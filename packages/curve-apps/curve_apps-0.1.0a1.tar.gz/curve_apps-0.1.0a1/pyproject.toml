[tool.poetry]
name = "curve_apps"
version = "0.1.0-alpha.1"
license = "MIT"
description = "Find edges on 2D grids or vertices."
authors = ["Mira Geoscience <support@mirageoscience.com>"]
repository = "https://github.com/MiraGeoscience/curve_apps"
homepage = "https://mirageoscience.com"
readme = "README.rst"
packages = [
     { include = "curve_apps" },
     { include = "curve_apps-assets" },
]

# TODO: adjust classifiers
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Natural Language :: English",
]

[tool.poetry.scripts]

[tool.poetry.dependencies]
pydantic = {version = "~2.5"}
python = "^3.9, <3.11"
numpy = "~1.23.5"  # also geoh5py
scipy = "~1.10.1"
scikit-image = "~0.19.0"
tqdm = "~4.66.0"

## pip dependencies
geoh5py = {version = "~0.9.0-alpha.3", source = "pypi", allow-prereleases = true}
geoapps-utils = {version = "~0.3.0a2", source = "pypi", allow-prereleases = true}
#geoapps-utils = { url = "https://github.com/MiraGeoscience/geoapps-utils/archive/refs/heads/GEOPY-1348.zip#sha256=" }

## indirect dependencies, forcing them here for installation through Conda not pip
h5py = "*" # from geoh5py
Pillow = "*" # from geoh5py

## about pip dependencies
# to be specified to work with conda-lock
# - from PyPI: my_package = { version = "1.2.3", source = "pypi" }
# - from URL:
#   - for a tags:   my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/tags/VERSION_TAG.zip#sha256=" }
#   - for a branch: my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/heads/BRANCH.zip#sha256=" }
# Note - conda-lock does not support the syntax: my_package = { git = ... }
#        while poetry2conda supports only { git = "...", tag = "..." }, and not { url = ... }

[tool.poetry.dev-dependencies]
Pygments = "*"
pylint = "*"
pytest = "*"
pytest-cov = "*"
sphinx = "*"
sphinx-autodoc-typehints = "*"
sphinx-rtd-theme = "*"
tomli = "*"

[tool.conda-lock]
platforms = ['win-64', 'linux-64']
channels = ['conda-forge']

[tool.isort]
# settings for compatibility between ``isort`` and ``black`` formatting
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88

[tool.black]
# defaults are just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
    "numpy.typing.mypy_plugin"
]

[tool.pytest.ini_options]

[tool.coverage.run]
branch = true
source = ["curve_apps"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]


[tool.coverage.html]
skip_empty = true
skip_covered = true

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
