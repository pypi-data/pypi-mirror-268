# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .create_call_agent_params_actions_item import CreateCallAgentParamsActionsItem
from .create_call_agent_params_endpointing_sensitivity import CreateCallAgentParamsEndpointingSensitivity
from .create_call_agent_params_ivr_navigation_mode import CreateCallAgentParamsIvrNavigationMode
from .create_call_agent_params_openai_account_connection import CreateCallAgentParamsOpenaiAccountConnection
from .create_call_agent_params_prompt import CreateCallAgentParamsPrompt
from .create_call_agent_params_vector_database import CreateCallAgentParamsVectorDatabase
from .create_call_agent_params_voice import CreateCallAgentParamsVoice
from .create_call_agent_params_webhook import CreateCallAgentParamsWebhook
from .interrupt_sensitivity import InterruptSensitivity
from .language import Language

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CreateCallAgentParams(pydantic.BaseModel):
    name: typing.Optional[str]
    prompt: CreateCallAgentParamsPrompt
    language: typing.Optional[Language]
    actions: typing.Optional[typing.List[CreateCallAgentParamsActionsItem]]
    voice: typing.Optional[CreateCallAgentParamsVoice]
    initial_message: typing.Optional[str]
    webhook: typing.Optional[CreateCallAgentParamsWebhook]
    vector_database: typing.Optional[CreateCallAgentParamsVectorDatabase]
    interrupt_sensitivity: typing.Optional[InterruptSensitivity]
    context_endpoint: typing.Optional[str]
    noise_suppression: typing.Optional[bool]
    endpointing_sensitivity: typing.Optional[CreateCallAgentParamsEndpointingSensitivity]
    ivr_navigation_mode: typing.Optional[CreateCallAgentParamsIvrNavigationMode]
    conversation_speed: typing.Optional[float]
    initial_message_delay: typing.Optional[float]
    openai_model_name_override: typing.Optional[str]
    ask_if_human_present_on_idle: typing.Optional[bool]
    openai_account_connection: typing.Optional[CreateCallAgentParamsOpenaiAccountConnection]
    run_do_not_call_detection: typing.Optional[bool]
    llm_temperature: typing.Optional[float]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
