# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class Language(str, enum.Enum):
    """
    An enumeration.
    """

    EN = "en"
    ES = "es"
    DE = "de"
    HI = "hi"
    PT = "pt"
    FR = "fr"
    NL = "nl"
    ID = "id"
    IT = "it"
    JA = "ja"
    KO = "ko"

    def visit(
        self,
        en: typing.Callable[[], T_Result],
        es: typing.Callable[[], T_Result],
        de: typing.Callable[[], T_Result],
        hi: typing.Callable[[], T_Result],
        pt: typing.Callable[[], T_Result],
        fr: typing.Callable[[], T_Result],
        nl: typing.Callable[[], T_Result],
        id: typing.Callable[[], T_Result],
        it: typing.Callable[[], T_Result],
        ja: typing.Callable[[], T_Result],
        ko: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is Language.EN:
            return en()
        if self is Language.ES:
            return es()
        if self is Language.DE:
            return de()
        if self is Language.HI:
            return hi()
        if self is Language.PT:
            return pt()
        if self is Language.FR:
            return fr()
        if self is Language.NL:
            return nl()
        if self is Language.ID:
            return id()
        if self is Language.IT:
            return it()
        if self is Language.JA:
            return ja()
        if self is Language.KO:
            return ko()
