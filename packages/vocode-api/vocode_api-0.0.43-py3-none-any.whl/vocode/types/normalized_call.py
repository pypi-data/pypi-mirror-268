# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .call_status import CallStatus
from .normalized_call_human_detection_result import NormalizedCallHumanDetectionResult
from .normalized_call_on_no_human_answer import NormalizedCallOnNoHumanAnswer
from .normalized_call_stage import NormalizedCallStage
from .normalized_call_stage_outcome import NormalizedCallStageOutcome
from .normalized_call_telephony_account_connection import NormalizedCallTelephonyAccountConnection
from .normalized_call_telephony_provider import NormalizedCallTelephonyProvider

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class NormalizedCall(pydantic.BaseModel):
    id: str
    user_id: str
    status: typing.Optional[CallStatus]
    error_message: typing.Optional[str]
    recording_available: typing.Optional[bool]
    transcript: typing.Optional[str]
    human_detection_result: typing.Optional[NormalizedCallHumanDetectionResult]
    do_not_call_result: typing.Optional[bool]
    telephony_id: typing.Optional[str]
    stage: typing.Optional[NormalizedCallStage]
    stage_outcome: typing.Optional[NormalizedCallStageOutcome]
    to_number: str
    from_number: str
    agent: str
    telephony_provider: NormalizedCallTelephonyProvider
    agent_phone_number: str
    start_time: typing.Optional[dt.datetime]
    end_time: typing.Optional[dt.datetime]
    hipaa_compliant: typing.Optional[bool]
    on_no_human_answer: typing.Optional[NormalizedCallOnNoHumanAnswer]
    context: typing.Optional[typing.Dict[str, str]]
    run_do_not_call_detection: typing.Optional[bool]
    telephony_account_connection: typing.Optional[NormalizedCallTelephonyAccountConnection]
    telephony_params: typing.Optional[typing.Dict[str, str]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
