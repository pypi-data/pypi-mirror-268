# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.call import Call
from ...types.call_page import CallPage
from ...types.http_validation_error import HttpValidationError
from .types.create_call_request_agent import CreateCallRequestAgent
from .types.create_call_request_on_no_human_answer import CreateCallRequestOnNoHumanAnswer

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CallsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_calls(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        sort_column: typing.Optional[str] = None,
        sort_desc: typing.Optional[bool] = None,
    ) -> CallPage:
        """
        Parameters:
            - page: typing.Optional[int].

            - size: typing.Optional[int].

            - sort_column: typing.Optional[str].

            - sort_desc: typing.Optional[bool].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/calls/list"),
            params=remove_none_from_dict(
                {"page": page, "size": size, "sort_column": sort_column, "sort_desc": sort_desc}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CallPage, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_call(self, *, id: str) -> Call:
        """
        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/calls"),
            params=remove_none_from_dict({"id": id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Call, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def end_call(self, *, id: str) -> Call:
        """
        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/calls/end"),
            params=remove_none_from_dict({"id": id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Call, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_call(
        self,
        *,
        from_number: str,
        to_number: str,
        agent: CreateCallRequestAgent,
        on_no_human_answer: typing.Optional[CreateCallRequestOnNoHumanAnswer] = OMIT,
        run_do_not_call_detection: typing.Optional[bool] = OMIT,
        hipaa_compliant: typing.Optional[bool] = OMIT,
        context: typing.Optional[typing.Dict[str, str]] = OMIT,
        telephony_params: typing.Optional[typing.Dict[str, str]] = OMIT,
    ) -> Call:
        """
        Parameters:
            - from_number: str.

            - to_number: str.

            - agent: CreateCallRequestAgent.

            - on_no_human_answer: typing.Optional[CreateCallRequestOnNoHumanAnswer].

            - run_do_not_call_detection: typing.Optional[bool].

            - hipaa_compliant: typing.Optional[bool].

            - context: typing.Optional[typing.Dict[str, str]].

            - telephony_params: typing.Optional[typing.Dict[str, str]].
        """
        _request: typing.Dict[str, typing.Any] = {"from_number": from_number, "to_number": to_number, "agent": agent}
        if on_no_human_answer is not OMIT:
            _request["on_no_human_answer"] = on_no_human_answer
        if run_do_not_call_detection is not OMIT:
            _request["run_do_not_call_detection"] = run_do_not_call_detection
        if hipaa_compliant is not OMIT:
            _request["hipaa_compliant"] = hipaa_compliant
        if context is not OMIT:
            _request["context"] = context
        if telephony_params is not OMIT:
            _request["telephony_params"] = telephony_params
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/calls/create"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Call, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_recording(self, *, id: str) -> typing.Iterator[bytes]:
        """
        Parameters:
            - id: str.
        """
        with self._client_wrapper.httpx_client.stream(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/calls/recording"),
            params=remove_none_from_dict({"id": id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        ) as _response:
            if 200 <= _response.status_code < 300:
                for _chunk in _response.iter_bytes():
                    yield _chunk
                return
            _response.read()
            try:
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCallsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_calls(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        sort_column: typing.Optional[str] = None,
        sort_desc: typing.Optional[bool] = None,
    ) -> CallPage:
        """
        Parameters:
            - page: typing.Optional[int].

            - size: typing.Optional[int].

            - sort_column: typing.Optional[str].

            - sort_desc: typing.Optional[bool].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/calls/list"),
            params=remove_none_from_dict(
                {"page": page, "size": size, "sort_column": sort_column, "sort_desc": sort_desc}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CallPage, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_call(self, *, id: str) -> Call:
        """
        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/calls"),
            params=remove_none_from_dict({"id": id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Call, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def end_call(self, *, id: str) -> Call:
        """
        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/calls/end"),
            params=remove_none_from_dict({"id": id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Call, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_call(
        self,
        *,
        from_number: str,
        to_number: str,
        agent: CreateCallRequestAgent,
        on_no_human_answer: typing.Optional[CreateCallRequestOnNoHumanAnswer] = OMIT,
        run_do_not_call_detection: typing.Optional[bool] = OMIT,
        hipaa_compliant: typing.Optional[bool] = OMIT,
        context: typing.Optional[typing.Dict[str, str]] = OMIT,
        telephony_params: typing.Optional[typing.Dict[str, str]] = OMIT,
    ) -> Call:
        """
        Parameters:
            - from_number: str.

            - to_number: str.

            - agent: CreateCallRequestAgent.

            - on_no_human_answer: typing.Optional[CreateCallRequestOnNoHumanAnswer].

            - run_do_not_call_detection: typing.Optional[bool].

            - hipaa_compliant: typing.Optional[bool].

            - context: typing.Optional[typing.Dict[str, str]].

            - telephony_params: typing.Optional[typing.Dict[str, str]].
        """
        _request: typing.Dict[str, typing.Any] = {"from_number": from_number, "to_number": to_number, "agent": agent}
        if on_no_human_answer is not OMIT:
            _request["on_no_human_answer"] = on_no_human_answer
        if run_do_not_call_detection is not OMIT:
            _request["run_do_not_call_detection"] = run_do_not_call_detection
        if hipaa_compliant is not OMIT:
            _request["hipaa_compliant"] = hipaa_compliant
        if context is not OMIT:
            _request["context"] = context
        if telephony_params is not OMIT:
            _request["telephony_params"] = telephony_params
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/calls/create"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Call, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_recording(self, *, id: str) -> typing.AsyncIterator[bytes]:
        """
        Parameters:
            - id: str.
        """
        async with self._client_wrapper.httpx_client.stream(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/calls/recording"),
            params=remove_none_from_dict({"id": id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        ) as _response:
            if 200 <= _response.status_code < 300:
                async for _chunk in _response.aiter_bytes():
                    yield _chunk
                return
            await _response.aread()
            try:
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)
