# Statements / comments
COMMENT = "#" ! /.*?$/m ;
STATEMENT = name:1/([\w\.]+)/ "=" ! expr: - @EXPRESSION ";" ;
PRAGMA = "$" type:0/\w+/ args:1/(.*?)$/m ;

# Expression supergroup
EXPRESSION = name:1/(?:(\^|[\w\.]*):)?/ expr:[
    ( type:<"group"> val:@NODE_GROUP )
    ( type:<"group_ws_sensitive"> val:@NODE_GROUP_WS_SENSITIVE )
    ( type:<"union"> val:@NODE_UNION )
    ( type:<"range"> val:@NODE_RANGE )
    ( type:<"range_ws_sensitive"> val:@NODE_RANGE_WS_SENSITIVE )
    ( type:<"string"> val:@STRING_NODE )
    ( type:<"pattern"> val:@PATTERN_NODE )
    ( type:<"stealer"> @STEALER )
    ( type:<"context"> val:@CONTEXT )
    ( type:<"noderef"> val:@NODEREF )
];

# Node groups
## NodeGroup
NODE_GROUP = "(" ! : - @EXPRESSION ! ")" ;
NODE_GROUP_WS_SENSITIVE = "{" ! : - @EXPRESSION ! "}" ;
## NodeUnion
NODE_UNION = "[" ! : - @EXPRESSION ! "]" ;
## NodeRange
NODE_RANGE = min:0/\d*/ "-" ! max:1/(\d+)?/ ! node:@EXPRESSION ;
NODE_RANGE_WS_SENSITIVE = min:0/\d*/ "~" ! max:1/(\d+)?/ node:@EXPRESSION ;

# Real nodes
## StringNode
STRING_NODE = :[
    { "\"" ! :0/(?:[^"\\]|(?:\\.))*/ "\"" }
    { "'" ! :0/(?:[^'\\]|(?:\\.))*/ "'" }
];
## PatternNode
PATTERN_NODE = :{ group:1/(\d*)?/ "/" ! pattern:0/(?:[^\/\\]|(?:\\.))*/ ! "/" ! flags:0/[ims]*/ } ;

# Meta nodes
STEALER = "!" ;
CONTEXT = "<" ! :[ ( str:@STRING_NODE ) ( raw:0/\w*/ ) ] ! ">" ;
NODEREF = "@" ! :0/[\w\.]+/ ;
