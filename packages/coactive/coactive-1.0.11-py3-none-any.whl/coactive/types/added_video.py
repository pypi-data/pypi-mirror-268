# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AddedVideo(pydantic.BaseModel):
    """
    Confirmation of a video added to the dataset
    """

    path: typing.Optional[str] = pydantic.Field(description="The original path of the video")
    coactive_video_id: str = pydantic.Field(alias="coactiveVideoId", description="The coactive video id")
    metadata: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="The user provided metadata for the video"
    )
    created_dt: dt.datetime = pydantic.Field(alias="createdDt", description="The created timestamp of the video")
    created_user_id: str = pydantic.Field(alias="createdUserId", description="The user that created the resource")
    updated_dt: dt.datetime = pydantic.Field(alias="updatedDt", description="The last updated timestamp of the video")
    updated_user_id: str = pydantic.Field(alias="updatedUserId", description="The user that last updated the video")
    request_id: str = pydantic.Field(
        alias="requestId", description="Unique request id for adding this asset to the pipeline"
    )
    request_dt: dt.datetime = pydantic.Field(alias="requestDt", description="Time the request was received")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
