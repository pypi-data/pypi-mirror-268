# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *
import pulumi_command

__all__ = ['CurlArgs', 'Curl']

@pulumi.input_type
class CurlArgs:
    def __init__(__self__, *,
                 connection: pulumi.Input['pulumi_command.remote.ConnectionArgs'],
                 urls: pulumi.Input[Union[str, Sequence[pulumi.Input[str]]]],
                 abstract_unix_socket: Optional[pulumi.Input[str]] = None,
                 alt_svc: Optional[pulumi.Input[str]] = None,
                 any_auth: Optional[pulumi.Input[bool]] = None,
                 append: Optional[pulumi.Input[bool]] = None,
                 aws_sigv4: Optional[pulumi.Input[str]] = None,
                 basic: Optional[pulumi.Input[bool]] = None,
                 binary_path: Optional[pulumi.Input[str]] = None,
                 cacert: Optional[pulumi.Input[str]] = None,
                 capath: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_status: Optional[pulumi.Input[bool]] = None,
                 cert_type: Optional[pulumi.Input['CurlCertType']] = None,
                 ciphers: Optional[pulumi.Input[str]] = None,
                 compressed: Optional[pulumi.Input[bool]] = None,
                 compressed_ssh: Optional[pulumi.Input[bool]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 connect_to: Optional[pulumi.Input[str]] = None,
                 continue_at: Optional[pulumi.Input[str]] = None,
                 cookie: Optional[pulumi.Input[str]] = None,
                 cookie_jar: Optional[pulumi.Input[str]] = None,
                 create_dirs: Optional[pulumi.Input[bool]] = None,
                 create_file_mode: Optional[pulumi.Input[str]] = None,
                 crlf: Optional[pulumi.Input[bool]] = None,
                 crlf_file: Optional[pulumi.Input[str]] = None,
                 curves: Optional[pulumi.Input[str]] = None,
                 data: Optional[pulumi.Input[str]] = None,
                 data_ascii: Optional[pulumi.Input[str]] = None,
                 data_binary: Optional[pulumi.Input[str]] = None,
                 data_raw: Optional[pulumi.Input[str]] = None,
                 data_url_encode: Optional[pulumi.Input[str]] = None,
                 delegation: Optional[pulumi.Input['CurlDelegationLevel']] = None,
                 digest: Optional[pulumi.Input[bool]] = None,
                 disable: Optional[pulumi.Input[bool]] = None,
                 disable_eprt: Optional[pulumi.Input[bool]] = None,
                 disable_epsv: Optional[pulumi.Input[bool]] = None,
                 disallow_username_in_url: Optional[pulumi.Input[bool]] = None,
                 dns_interface: Optional[pulumi.Input[str]] = None,
                 dns_ipv4_addr: Optional[pulumi.Input[str]] = None,
                 dns_ipv6_addr: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[str]] = None,
                 doh_cert_status: Optional[pulumi.Input[bool]] = None,
                 doh_insecure: Optional[pulumi.Input[bool]] = None,
                 doh_url: Optional[pulumi.Input[str]] = None,
                 dump_header: Optional[pulumi.Input[str]] = None,
                 egd_file: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 etag_compare: Optional[pulumi.Input[str]] = None,
                 etag_save: Optional[pulumi.Input[str]] = None,
                 expect100_timeout: Optional[pulumi.Input[int]] = None,
                 fail: Optional[pulumi.Input[bool]] = None,
                 fail_early: Optional[pulumi.Input[bool]] = None,
                 fail_with_body: Optional[pulumi.Input[bool]] = None,
                 false_start: Optional[pulumi.Input[bool]] = None,
                 form: Optional[pulumi.Input[str]] = None,
                 form_escape: Optional[pulumi.Input[bool]] = None,
                 form_name: Optional[pulumi.Input[str]] = None,
                 ftp_account: Optional[pulumi.Input[str]] = None,
                 ftp_alternative_user: Optional[pulumi.Input[str]] = None,
                 ftp_create_dirs: Optional[pulumi.Input[bool]] = None,
                 ftp_method: Optional[pulumi.Input[str]] = None,
                 ftp_pasv: Optional[pulumi.Input[bool]] = None,
                 ftp_port: Optional[pulumi.Input[str]] = None,
                 ftp_pret: Optional[pulumi.Input[bool]] = None,
                 ftp_skip_pasv_ip: Optional[pulumi.Input[bool]] = None,
                 ftp_ssl_ccc_mode: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional['CommandLifecycle'] = None,
                 stdin: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None):
        """
        The set of arguments for constructing a Curl resource.
        :param pulumi.Input['pulumi_command.remote.ConnectionArgs'] connection: Connection details for the remote system
        :param pulumi.Input[Union[str, Sequence[pulumi.Input[str]]]] urls: Corresponds to the URLs argument.
        :param pulumi.Input[str] abstract_unix_socket: (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
        :param pulumi.Input[str] alt_svc: (HTTPS)  This  option enables the alt-svc parser in curl.
        :param pulumi.Input[bool] any_auth: (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
        :param pulumi.Input[bool] append: (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
        :param pulumi.Input[str] aws_sigv4: Use AWS V4 signature authentication in the transfer.
        :param pulumi.Input[bool] basic: (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
        :param pulumi.Input[str] binary_path: Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
        :param pulumi.Input[str] cacert: (TLS)  Tells curl to use the specified certificate file to verify the peer.
        :param pulumi.Input[str] capath: (TLS) Tells curl to use the specified certificate directory to verify the peer.
        :param pulumi.Input[str] cert: (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
        :param pulumi.Input[bool] cert_status: (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
        :param pulumi.Input['CurlCertType'] cert_type: (TLS) Tells curl what type the provided client certificate is using.
        :param pulumi.Input[str] ciphers: (TLS) Specifies which ciphers to use in the connection.
        :param pulumi.Input[bool] compressed: (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
        :param pulumi.Input[bool] compressed_ssh: (SCP SFTP) Enables built-in SSH compression.
        :param pulumi.Input[str] config: Specify a text file to read curl arguments from.
        :param pulumi.Input[int] connect_timeout: Maximum  time  in seconds that you allow curl's connection to take.
        :param pulumi.Input[str] connect_to: For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
        :param pulumi.Input[str] continue_at: Continue/Resume a previous file transfer at the given offset.
        :param pulumi.Input[str] cookie: (HTTP) Pass the data to the HTTP server in the Cookie header.
        :param pulumi.Input[str] cookie_jar: (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
        :param pulumi.Input[bool] create_dirs: When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
        :param pulumi.Input[str] create_file_mode: (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644.
        :param pulumi.Input[bool] crlf: (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
        :param pulumi.Input[str] crlf_file: (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
        :param pulumi.Input[str] curves: (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
        :param pulumi.Input[str] data: (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
        :param pulumi.Input[str] data_ascii: (HTTP) This is just an alias for -d, --data.
        :param pulumi.Input[str] data_binary: (HTTP) This posts data exactly as specified with no extra processing whatsoever.
        :param pulumi.Input[str] data_raw: (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
        :param pulumi.Input[str] data_url_encode: (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
        :param pulumi.Input['CurlDelegationLevel'] delegation: (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
        :param pulumi.Input[bool] digest: (HTTP) Enables HTTP Digest authentication.
        :param pulumi.Input[bool] disable: If used as the first parameter on the command line, the curlrc config file will not be read and used.
        :param pulumi.Input[bool] disable_eprt: (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
        :param pulumi.Input[bool] disable_epsv: (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
        :param pulumi.Input[bool] disallow_username_in_url: (HTTP) This tells curl to exit if passed a url containing a username.
        :param pulumi.Input[str] dns_interface: (DNS)  Tell  curl  to send outgoing DNS requests through <interface>.
        :param pulumi.Input[str] dns_ipv4_addr: (DNS) Tell curl to bind to <ip-address> when making IPv4 DNS requests, so that the DNS requests originate from this address.
        :param pulumi.Input[str] dns_ipv6_addr: (DNS) Tell curl to bind to <ip-address> when making IPv6 DNS requests, so that the DNS requests originate from this address.
        :param pulumi.Input[str] dns_servers: Set the list of DNS servers to be used instead of the system default.
        :param pulumi.Input[bool] doh_cert_status: Same as --cert-status but used for DoH (DNS-over-HTTPS).
        :param pulumi.Input[bool] doh_insecure: Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
        :param pulumi.Input[str] doh_url: Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
        :param pulumi.Input[str] dump_header: (HTTP FTP) Write the received protocol headers to the specified file.
        :param pulumi.Input[str] egd_file: (TLS) Specify the path name to the Entropy Gathering Daemon socket.
        :param pulumi.Input[str] engine: (TLS) Select the OpenSSL crypto engine to use for cipher operations.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] environment: Environment variables
        :param pulumi.Input[str] etag_compare: (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
        :param pulumi.Input[str] etag_save: (HTTP) This option saves an HTTP ETag to the specified file.
        :param pulumi.Input[int] expect100_timeout: (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
        :param pulumi.Input[bool] fail: (HTTP) Fail silently (no output at all) on server errors.
        :param pulumi.Input[bool] fail_early: Fail and exit on the first detected transfer error.
        :param pulumi.Input[bool] fail_with_body: (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
        :param pulumi.Input[bool] false_start: (TLS) Tells curl to use false start during the TLS handshake.
        :param pulumi.Input[str] form: (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
        :param pulumi.Input[bool] form_escape: (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
        :param pulumi.Input[str] form_name: (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
        :param pulumi.Input[str] ftp_account: (FTP) When an FTP server asks for 'account data' after user name and password has been provided, this data is sent off using the ACCT command.
        :param pulumi.Input[str] ftp_alternative_user: (FTP) If authenticating with the USER and PASS commands fails, send this command.
        :param pulumi.Input[bool] ftp_create_dirs: (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
        :param pulumi.Input[str] ftp_method: (FTP) Control what method curl should use to reach a file on an FTP(S) server.
        :param pulumi.Input[bool] ftp_pasv: (FTP) Use passive mode for the data connection.
        :param pulumi.Input[str] ftp_port: (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
        :param pulumi.Input[bool] ftp_pret: (FTP) Tell curl to send a PRET command before PASV (and EPSV).
        :param pulumi.Input[bool] ftp_skip_pasv_ip: (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection.
        :param pulumi.Input[str] ftp_ssl_ccc_mode: (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
        :param 'CommandLifecycle' lifecycle: At what stage(s) in the resource lifecycle should the command be run
        :param pulumi.Input[str] stdin: TODO
        :param pulumi.Input[Sequence[Any]] triggers: TODO
        """
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "urls", urls)
        if abstract_unix_socket is not None:
            pulumi.set(__self__, "abstract_unix_socket", abstract_unix_socket)
        if alt_svc is not None:
            pulumi.set(__self__, "alt_svc", alt_svc)
        if any_auth is not None:
            pulumi.set(__self__, "any_auth", any_auth)
        if append is not None:
            pulumi.set(__self__, "append", append)
        if aws_sigv4 is not None:
            pulumi.set(__self__, "aws_sigv4", aws_sigv4)
        if basic is not None:
            pulumi.set(__self__, "basic", basic)
        if binary_path is not None:
            pulumi.set(__self__, "binary_path", binary_path)
        if cacert is not None:
            pulumi.set(__self__, "cacert", cacert)
        if capath is not None:
            pulumi.set(__self__, "capath", capath)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if cert_status is not None:
            pulumi.set(__self__, "cert_status", cert_status)
        if cert_type is not None:
            pulumi.set(__self__, "cert_type", cert_type)
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if compressed is not None:
            pulumi.set(__self__, "compressed", compressed)
        if compressed_ssh is not None:
            pulumi.set(__self__, "compressed_ssh", compressed_ssh)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if connect_to is not None:
            pulumi.set(__self__, "connect_to", connect_to)
        if continue_at is not None:
            pulumi.set(__self__, "continue_at", continue_at)
        if cookie is not None:
            pulumi.set(__self__, "cookie", cookie)
        if cookie_jar is not None:
            pulumi.set(__self__, "cookie_jar", cookie_jar)
        if create_dirs is not None:
            pulumi.set(__self__, "create_dirs", create_dirs)
        if create_file_mode is not None:
            pulumi.set(__self__, "create_file_mode", create_file_mode)
        if crlf is not None:
            pulumi.set(__self__, "crlf", crlf)
        if crlf_file is not None:
            pulumi.set(__self__, "crlf_file", crlf_file)
        if curves is not None:
            pulumi.set(__self__, "curves", curves)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if data_ascii is not None:
            pulumi.set(__self__, "data_ascii", data_ascii)
        if data_binary is not None:
            pulumi.set(__self__, "data_binary", data_binary)
        if data_raw is not None:
            pulumi.set(__self__, "data_raw", data_raw)
        if data_url_encode is not None:
            pulumi.set(__self__, "data_url_encode", data_url_encode)
        if delegation is not None:
            pulumi.set(__self__, "delegation", delegation)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if disable_eprt is not None:
            pulumi.set(__self__, "disable_eprt", disable_eprt)
        if disable_epsv is not None:
            pulumi.set(__self__, "disable_epsv", disable_epsv)
        if disallow_username_in_url is not None:
            pulumi.set(__self__, "disallow_username_in_url", disallow_username_in_url)
        if dns_interface is not None:
            pulumi.set(__self__, "dns_interface", dns_interface)
        if dns_ipv4_addr is not None:
            pulumi.set(__self__, "dns_ipv4_addr", dns_ipv4_addr)
        if dns_ipv6_addr is not None:
            pulumi.set(__self__, "dns_ipv6_addr", dns_ipv6_addr)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if doh_cert_status is not None:
            pulumi.set(__self__, "doh_cert_status", doh_cert_status)
        if doh_insecure is not None:
            pulumi.set(__self__, "doh_insecure", doh_insecure)
        if doh_url is not None:
            pulumi.set(__self__, "doh_url", doh_url)
        if dump_header is not None:
            pulumi.set(__self__, "dump_header", dump_header)
        if egd_file is not None:
            pulumi.set(__self__, "egd_file", egd_file)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if etag_compare is not None:
            pulumi.set(__self__, "etag_compare", etag_compare)
        if etag_save is not None:
            pulumi.set(__self__, "etag_save", etag_save)
        if expect100_timeout is not None:
            pulumi.set(__self__, "expect100_timeout", expect100_timeout)
        if fail is not None:
            pulumi.set(__self__, "fail", fail)
        if fail_early is not None:
            pulumi.set(__self__, "fail_early", fail_early)
        if fail_with_body is not None:
            pulumi.set(__self__, "fail_with_body", fail_with_body)
        if false_start is not None:
            pulumi.set(__self__, "false_start", false_start)
        if form is not None:
            pulumi.set(__self__, "form", form)
        if form_escape is not None:
            pulumi.set(__self__, "form_escape", form_escape)
        if form_name is not None:
            pulumi.set(__self__, "form_name", form_name)
        if ftp_account is not None:
            pulumi.set(__self__, "ftp_account", ftp_account)
        if ftp_alternative_user is not None:
            pulumi.set(__self__, "ftp_alternative_user", ftp_alternative_user)
        if ftp_create_dirs is not None:
            pulumi.set(__self__, "ftp_create_dirs", ftp_create_dirs)
        if ftp_method is not None:
            pulumi.set(__self__, "ftp_method", ftp_method)
        if ftp_pasv is not None:
            pulumi.set(__self__, "ftp_pasv", ftp_pasv)
        if ftp_port is not None:
            pulumi.set(__self__, "ftp_port", ftp_port)
        if ftp_pret is not None:
            pulumi.set(__self__, "ftp_pret", ftp_pret)
        if ftp_skip_pasv_ip is not None:
            pulumi.set(__self__, "ftp_skip_pasv_ip", ftp_skip_pasv_ip)
        if ftp_ssl_ccc_mode is not None:
            pulumi.set(__self__, "ftp_ssl_ccc_mode", ftp_ssl_ccc_mode)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['pulumi_command.remote.ConnectionArgs']:
        """
        Connection details for the remote system
        """
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['pulumi_command.remote.ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter
    def urls(self) -> pulumi.Input[Union[str, Sequence[pulumi.Input[str]]]]:
        """
        Corresponds to the URLs argument.
        """
        return pulumi.get(self, "urls")

    @urls.setter
    def urls(self, value: pulumi.Input[Union[str, Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "urls", value)

    @property
    @pulumi.getter(name="abstractUnixSocket")
    def abstract_unix_socket(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
        """
        return pulumi.get(self, "abstract_unix_socket")

    @abstract_unix_socket.setter
    def abstract_unix_socket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abstract_unix_socket", value)

    @property
    @pulumi.getter(name="altSvc")
    def alt_svc(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTPS)  This  option enables the alt-svc parser in curl.
        """
        return pulumi.get(self, "alt_svc")

    @alt_svc.setter
    def alt_svc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_svc", value)

    @property
    @pulumi.getter(name="anyAuth")
    def any_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
        """
        return pulumi.get(self, "any_auth")

    @any_auth.setter
    def any_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "any_auth", value)

    @property
    @pulumi.getter
    def append(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
        """
        return pulumi.get(self, "append")

    @append.setter
    def append(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "append", value)

    @property
    @pulumi.getter(name="awsSigv4")
    def aws_sigv4(self) -> Optional[pulumi.Input[str]]:
        """
        Use AWS V4 signature authentication in the transfer.
        """
        return pulumi.get(self, "aws_sigv4")

    @aws_sigv4.setter
    def aws_sigv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_sigv4", value)

    @property
    @pulumi.getter
    def basic(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
        """
        return pulumi.get(self, "basic")

    @basic.setter
    def basic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "basic", value)

    @property
    @pulumi.getter(name="binaryPath")
    def binary_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
        """
        return pulumi.get(self, "binary_path")

    @binary_path.setter
    def binary_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binary_path", value)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS)  Tells curl to use the specified certificate file to verify the peer.
        """
        return pulumi.get(self, "cacert")

    @cacert.setter
    def cacert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cacert", value)

    @property
    @pulumi.getter
    def capath(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS) Tells curl to use the specified certificate directory to verify the peer.
        """
        return pulumi.get(self, "capath")

    @capath.setter
    def capath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capath", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="certStatus")
    def cert_status(self) -> Optional[pulumi.Input[bool]]:
        """
        (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
        """
        return pulumi.get(self, "cert_status")

    @cert_status.setter
    def cert_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cert_status", value)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> Optional[pulumi.Input['CurlCertType']]:
        """
        (TLS) Tells curl what type the provided client certificate is using.
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: Optional[pulumi.Input['CurlCertType']]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS) Specifies which ciphers to use in the connection.
        """
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ciphers", value)

    @property
    @pulumi.getter
    def compressed(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
        """
        return pulumi.get(self, "compressed")

    @compressed.setter
    def compressed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compressed", value)

    @property
    @pulumi.getter(name="compressedSsh")
    def compressed_ssh(self) -> Optional[pulumi.Input[bool]]:
        """
        (SCP SFTP) Enables built-in SSH compression.
        """
        return pulumi.get(self, "compressed_ssh")

    @compressed_ssh.setter
    def compressed_ssh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compressed_ssh", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a text file to read curl arguments from.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum  time  in seconds that you allow curl's connection to take.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="connectTo")
    def connect_to(self) -> Optional[pulumi.Input[str]]:
        """
        For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
        """
        return pulumi.get(self, "connect_to")

    @connect_to.setter
    def connect_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_to", value)

    @property
    @pulumi.getter(name="continueAt")
    def continue_at(self) -> Optional[pulumi.Input[str]]:
        """
        Continue/Resume a previous file transfer at the given offset.
        """
        return pulumi.get(self, "continue_at")

    @continue_at.setter
    def continue_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "continue_at", value)

    @property
    @pulumi.getter
    def cookie(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) Pass the data to the HTTP server in the Cookie header.
        """
        return pulumi.get(self, "cookie")

    @cookie.setter
    def cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie", value)

    @property
    @pulumi.getter(name="cookieJar")
    def cookie_jar(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
        """
        return pulumi.get(self, "cookie_jar")

    @cookie_jar.setter
    def cookie_jar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_jar", value)

    @property
    @pulumi.getter(name="createDirs")
    def create_dirs(self) -> Optional[pulumi.Input[bool]]:
        """
        When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
        """
        return pulumi.get(self, "create_dirs")

    @create_dirs.setter
    def create_dirs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_dirs", value)

    @property
    @pulumi.getter(name="createFileMode")
    def create_file_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644.
        """
        return pulumi.get(self, "create_file_mode")

    @create_file_mode.setter
    def create_file_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_file_mode", value)

    @property
    @pulumi.getter
    def crlf(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
        """
        return pulumi.get(self, "crlf")

    @crlf.setter
    def crlf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "crlf", value)

    @property
    @pulumi.getter(name="crlfFile")
    def crlf_file(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
        """
        return pulumi.get(self, "crlf_file")

    @crlf_file.setter
    def crlf_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crlf_file", value)

    @property
    @pulumi.getter
    def curves(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
        """
        return pulumi.get(self, "curves")

    @curves.setter
    def curves(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "curves", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter(name="dataAscii")
    def data_ascii(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This is just an alias for -d, --data.
        """
        return pulumi.get(self, "data_ascii")

    @data_ascii.setter
    def data_ascii(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_ascii", value)

    @property
    @pulumi.getter(name="dataBinary")
    def data_binary(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This posts data exactly as specified with no extra processing whatsoever.
        """
        return pulumi.get(self, "data_binary")

    @data_binary.setter
    def data_binary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_binary", value)

    @property
    @pulumi.getter(name="dataRaw")
    def data_raw(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
        """
        return pulumi.get(self, "data_raw")

    @data_raw.setter
    def data_raw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_raw", value)

    @property
    @pulumi.getter(name="dataUrlEncode")
    def data_url_encode(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
        """
        return pulumi.get(self, "data_url_encode")

    @data_url_encode.setter
    def data_url_encode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_url_encode", value)

    @property
    @pulumi.getter
    def delegation(self) -> Optional[pulumi.Input['CurlDelegationLevel']]:
        """
        (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
        """
        return pulumi.get(self, "delegation")

    @delegation.setter
    def delegation(self, value: Optional[pulumi.Input['CurlDelegationLevel']]):
        pulumi.set(self, "delegation", value)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Enables HTTP Digest authentication.
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def disable(self) -> Optional[pulumi.Input[bool]]:
        """
        If used as the first parameter on the command line, the curlrc config file will not be read and used.
        """
        return pulumi.get(self, "disable")

    @disable.setter
    def disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable", value)

    @property
    @pulumi.getter(name="disableEprt")
    def disable_eprt(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
        """
        return pulumi.get(self, "disable_eprt")

    @disable_eprt.setter
    def disable_eprt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_eprt", value)

    @property
    @pulumi.getter(name="disableEpsv")
    def disable_epsv(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
        """
        return pulumi.get(self, "disable_epsv")

    @disable_epsv.setter
    def disable_epsv(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_epsv", value)

    @property
    @pulumi.getter(name="disallowUsernameInUrl")
    def disallow_username_in_url(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) This tells curl to exit if passed a url containing a username.
        """
        return pulumi.get(self, "disallow_username_in_url")

    @disallow_username_in_url.setter
    def disallow_username_in_url(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disallow_username_in_url", value)

    @property
    @pulumi.getter(name="dnsInterface")
    def dns_interface(self) -> Optional[pulumi.Input[str]]:
        """
        (DNS)  Tell  curl  to send outgoing DNS requests through <interface>.
        """
        return pulumi.get(self, "dns_interface")

    @dns_interface.setter
    def dns_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_interface", value)

    @property
    @pulumi.getter(name="dnsIpv4Addr")
    def dns_ipv4_addr(self) -> Optional[pulumi.Input[str]]:
        """
        (DNS) Tell curl to bind to <ip-address> when making IPv4 DNS requests, so that the DNS requests originate from this address.
        """
        return pulumi.get(self, "dns_ipv4_addr")

    @dns_ipv4_addr.setter
    def dns_ipv4_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_ipv4_addr", value)

    @property
    @pulumi.getter(name="dnsIpv6Addr")
    def dns_ipv6_addr(self) -> Optional[pulumi.Input[str]]:
        """
        (DNS) Tell curl to bind to <ip-address> when making IPv6 DNS requests, so that the DNS requests originate from this address.
        """
        return pulumi.get(self, "dns_ipv6_addr")

    @dns_ipv6_addr.setter
    def dns_ipv6_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_ipv6_addr", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[str]]:
        """
        Set the list of DNS servers to be used instead of the system default.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dohCertStatus")
    def doh_cert_status(self) -> Optional[pulumi.Input[bool]]:
        """
        Same as --cert-status but used for DoH (DNS-over-HTTPS).
        """
        return pulumi.get(self, "doh_cert_status")

    @doh_cert_status.setter
    def doh_cert_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "doh_cert_status", value)

    @property
    @pulumi.getter(name="dohInsecure")
    def doh_insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
        """
        return pulumi.get(self, "doh_insecure")

    @doh_insecure.setter
    def doh_insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "doh_insecure", value)

    @property
    @pulumi.getter(name="dohUrl")
    def doh_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
        """
        return pulumi.get(self, "doh_url")

    @doh_url.setter
    def doh_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "doh_url", value)

    @property
    @pulumi.getter(name="dumpHeader")
    def dump_header(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP FTP) Write the received protocol headers to the specified file.
        """
        return pulumi.get(self, "dump_header")

    @dump_header.setter
    def dump_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dump_header", value)

    @property
    @pulumi.getter(name="egdFile")
    def egd_file(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS) Specify the path name to the Entropy Gathering Daemon socket.
        """
        return pulumi.get(self, "egd_file")

    @egd_file.setter
    def egd_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egd_file", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS) Select the OpenSSL crypto engine to use for cipher operations.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Environment variables
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="etagCompare")
    def etag_compare(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
        """
        return pulumi.get(self, "etag_compare")

    @etag_compare.setter
    def etag_compare(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag_compare", value)

    @property
    @pulumi.getter(name="etagSave")
    def etag_save(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This option saves an HTTP ETag to the specified file.
        """
        return pulumi.get(self, "etag_save")

    @etag_save.setter
    def etag_save(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag_save", value)

    @property
    @pulumi.getter(name="expect100Timeout")
    def expect100_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
        """
        return pulumi.get(self, "expect100_timeout")

    @expect100_timeout.setter
    def expect100_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expect100_timeout", value)

    @property
    @pulumi.getter
    def fail(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Fail silently (no output at all) on server errors.
        """
        return pulumi.get(self, "fail")

    @fail.setter
    def fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail", value)

    @property
    @pulumi.getter(name="failEarly")
    def fail_early(self) -> Optional[pulumi.Input[bool]]:
        """
        Fail and exit on the first detected transfer error.
        """
        return pulumi.get(self, "fail_early")

    @fail_early.setter
    def fail_early(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_early", value)

    @property
    @pulumi.getter(name="failWithBody")
    def fail_with_body(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
        """
        return pulumi.get(self, "fail_with_body")

    @fail_with_body.setter
    def fail_with_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_with_body", value)

    @property
    @pulumi.getter(name="falseStart")
    def false_start(self) -> Optional[pulumi.Input[bool]]:
        """
        (TLS) Tells curl to use false start during the TLS handshake.
        """
        return pulumi.get(self, "false_start")

    @false_start.setter
    def false_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "false_start", value)

    @property
    @pulumi.getter
    def form(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
        """
        return pulumi.get(self, "form")

    @form.setter
    def form(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "form", value)

    @property
    @pulumi.getter(name="formEscape")
    def form_escape(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
        """
        return pulumi.get(self, "form_escape")

    @form_escape.setter
    def form_escape(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "form_escape", value)

    @property
    @pulumi.getter(name="formName")
    def form_name(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
        """
        return pulumi.get(self, "form_name")

    @form_name.setter
    def form_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "form_name", value)

    @property
    @pulumi.getter(name="ftpAccount")
    def ftp_account(self) -> Optional[pulumi.Input[str]]:
        """
        (FTP) When an FTP server asks for 'account data' after user name and password has been provided, this data is sent off using the ACCT command.
        """
        return pulumi.get(self, "ftp_account")

    @ftp_account.setter
    def ftp_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_account", value)

    @property
    @pulumi.getter(name="ftpAlternativeUser")
    def ftp_alternative_user(self) -> Optional[pulumi.Input[str]]:
        """
        (FTP) If authenticating with the USER and PASS commands fails, send this command.
        """
        return pulumi.get(self, "ftp_alternative_user")

    @ftp_alternative_user.setter
    def ftp_alternative_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_alternative_user", value)

    @property
    @pulumi.getter(name="ftpCreateDirs")
    def ftp_create_dirs(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
        """
        return pulumi.get(self, "ftp_create_dirs")

    @ftp_create_dirs.setter
    def ftp_create_dirs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ftp_create_dirs", value)

    @property
    @pulumi.getter(name="ftpMethod")
    def ftp_method(self) -> Optional[pulumi.Input[str]]:
        """
        (FTP) Control what method curl should use to reach a file on an FTP(S) server.
        """
        return pulumi.get(self, "ftp_method")

    @ftp_method.setter
    def ftp_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_method", value)

    @property
    @pulumi.getter(name="ftpPasv")
    def ftp_pasv(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP) Use passive mode for the data connection.
        """
        return pulumi.get(self, "ftp_pasv")

    @ftp_pasv.setter
    def ftp_pasv(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ftp_pasv", value)

    @property
    @pulumi.getter(name="ftpPort")
    def ftp_port(self) -> Optional[pulumi.Input[str]]:
        """
        (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
        """
        return pulumi.get(self, "ftp_port")

    @ftp_port.setter
    def ftp_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_port", value)

    @property
    @pulumi.getter(name="ftpPret")
    def ftp_pret(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP) Tell curl to send a PRET command before PASV (and EPSV).
        """
        return pulumi.get(self, "ftp_pret")

    @ftp_pret.setter
    def ftp_pret(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ftp_pret", value)

    @property
    @pulumi.getter(name="ftpSkipPasvIp")
    def ftp_skip_pasv_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection.
        """
        return pulumi.get(self, "ftp_skip_pasv_ip")

    @ftp_skip_pasv_ip.setter
    def ftp_skip_pasv_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ftp_skip_pasv_ip", value)

    @property
    @pulumi.getter(name="ftpSslCccMode")
    def ftp_ssl_ccc_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
        """
        return pulumi.get(self, "ftp_ssl_ccc_mode")

    @ftp_ssl_ccc_mode.setter
    def ftp_ssl_ccc_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_ssl_ccc_mode", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['CommandLifecycle']:
        """
        At what stage(s) in the resource lifecycle should the command be run
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional['CommandLifecycle']):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter
    def stdin(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "stdin")

    @stdin.setter
    def stdin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stdin", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        """
        TODO
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "triggers", value)


class Curl(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abstract_unix_socket: Optional[pulumi.Input[str]] = None,
                 alt_svc: Optional[pulumi.Input[str]] = None,
                 any_auth: Optional[pulumi.Input[bool]] = None,
                 append: Optional[pulumi.Input[bool]] = None,
                 aws_sigv4: Optional[pulumi.Input[str]] = None,
                 basic: Optional[pulumi.Input[bool]] = None,
                 binary_path: Optional[pulumi.Input[str]] = None,
                 cacert: Optional[pulumi.Input[str]] = None,
                 capath: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_status: Optional[pulumi.Input[bool]] = None,
                 cert_type: Optional[pulumi.Input['CurlCertType']] = None,
                 ciphers: Optional[pulumi.Input[str]] = None,
                 compressed: Optional[pulumi.Input[bool]] = None,
                 compressed_ssh: Optional[pulumi.Input[bool]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 connect_to: Optional[pulumi.Input[str]] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 continue_at: Optional[pulumi.Input[str]] = None,
                 cookie: Optional[pulumi.Input[str]] = None,
                 cookie_jar: Optional[pulumi.Input[str]] = None,
                 create_dirs: Optional[pulumi.Input[bool]] = None,
                 create_file_mode: Optional[pulumi.Input[str]] = None,
                 crlf: Optional[pulumi.Input[bool]] = None,
                 crlf_file: Optional[pulumi.Input[str]] = None,
                 curves: Optional[pulumi.Input[str]] = None,
                 data: Optional[pulumi.Input[str]] = None,
                 data_ascii: Optional[pulumi.Input[str]] = None,
                 data_binary: Optional[pulumi.Input[str]] = None,
                 data_raw: Optional[pulumi.Input[str]] = None,
                 data_url_encode: Optional[pulumi.Input[str]] = None,
                 delegation: Optional[pulumi.Input['CurlDelegationLevel']] = None,
                 digest: Optional[pulumi.Input[bool]] = None,
                 disable: Optional[pulumi.Input[bool]] = None,
                 disable_eprt: Optional[pulumi.Input[bool]] = None,
                 disable_epsv: Optional[pulumi.Input[bool]] = None,
                 disallow_username_in_url: Optional[pulumi.Input[bool]] = None,
                 dns_interface: Optional[pulumi.Input[str]] = None,
                 dns_ipv4_addr: Optional[pulumi.Input[str]] = None,
                 dns_ipv6_addr: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[str]] = None,
                 doh_cert_status: Optional[pulumi.Input[bool]] = None,
                 doh_insecure: Optional[pulumi.Input[bool]] = None,
                 doh_url: Optional[pulumi.Input[str]] = None,
                 dump_header: Optional[pulumi.Input[str]] = None,
                 egd_file: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 etag_compare: Optional[pulumi.Input[str]] = None,
                 etag_save: Optional[pulumi.Input[str]] = None,
                 expect100_timeout: Optional[pulumi.Input[int]] = None,
                 fail: Optional[pulumi.Input[bool]] = None,
                 fail_early: Optional[pulumi.Input[bool]] = None,
                 fail_with_body: Optional[pulumi.Input[bool]] = None,
                 false_start: Optional[pulumi.Input[bool]] = None,
                 form: Optional[pulumi.Input[str]] = None,
                 form_escape: Optional[pulumi.Input[bool]] = None,
                 form_name: Optional[pulumi.Input[str]] = None,
                 ftp_account: Optional[pulumi.Input[str]] = None,
                 ftp_alternative_user: Optional[pulumi.Input[str]] = None,
                 ftp_create_dirs: Optional[pulumi.Input[bool]] = None,
                 ftp_method: Optional[pulumi.Input[str]] = None,
                 ftp_pasv: Optional[pulumi.Input[bool]] = None,
                 ftp_port: Optional[pulumi.Input[str]] = None,
                 ftp_pret: Optional[pulumi.Input[bool]] = None,
                 ftp_skip_pasv_ip: Optional[pulumi.Input[bool]] = None,
                 ftp_ssl_ccc_mode: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional['CommandLifecycle'] = None,
                 stdin: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None,
                 urls: Optional[pulumi.Input[Union[str, Sequence[pulumi.Input[str]]]]] = None,
                 __props__=None):
        """
        Abstraction over the `curl` utility on a remote system. Transfer a URL.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] abstract_unix_socket: (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
        :param pulumi.Input[str] alt_svc: (HTTPS)  This  option enables the alt-svc parser in curl.
        :param pulumi.Input[bool] any_auth: (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
        :param pulumi.Input[bool] append: (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
        :param pulumi.Input[str] aws_sigv4: Use AWS V4 signature authentication in the transfer.
        :param pulumi.Input[bool] basic: (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
        :param pulumi.Input[str] binary_path: Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
        :param pulumi.Input[str] cacert: (TLS)  Tells curl to use the specified certificate file to verify the peer.
        :param pulumi.Input[str] capath: (TLS) Tells curl to use the specified certificate directory to verify the peer.
        :param pulumi.Input[str] cert: (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
        :param pulumi.Input[bool] cert_status: (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
        :param pulumi.Input['CurlCertType'] cert_type: (TLS) Tells curl what type the provided client certificate is using.
        :param pulumi.Input[str] ciphers: (TLS) Specifies which ciphers to use in the connection.
        :param pulumi.Input[bool] compressed: (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
        :param pulumi.Input[bool] compressed_ssh: (SCP SFTP) Enables built-in SSH compression.
        :param pulumi.Input[str] config: Specify a text file to read curl arguments from.
        :param pulumi.Input[int] connect_timeout: Maximum  time  in seconds that you allow curl's connection to take.
        :param pulumi.Input[str] connect_to: For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
        :param pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']] connection: Connection details for the remote system
        :param pulumi.Input[str] continue_at: Continue/Resume a previous file transfer at the given offset.
        :param pulumi.Input[str] cookie: (HTTP) Pass the data to the HTTP server in the Cookie header.
        :param pulumi.Input[str] cookie_jar: (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
        :param pulumi.Input[bool] create_dirs: When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
        :param pulumi.Input[str] create_file_mode: (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644.
        :param pulumi.Input[bool] crlf: (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
        :param pulumi.Input[str] crlf_file: (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
        :param pulumi.Input[str] curves: (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
        :param pulumi.Input[str] data: (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
        :param pulumi.Input[str] data_ascii: (HTTP) This is just an alias for -d, --data.
        :param pulumi.Input[str] data_binary: (HTTP) This posts data exactly as specified with no extra processing whatsoever.
        :param pulumi.Input[str] data_raw: (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
        :param pulumi.Input[str] data_url_encode: (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
        :param pulumi.Input['CurlDelegationLevel'] delegation: (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
        :param pulumi.Input[bool] digest: (HTTP) Enables HTTP Digest authentication.
        :param pulumi.Input[bool] disable: If used as the first parameter on the command line, the curlrc config file will not be read and used.
        :param pulumi.Input[bool] disable_eprt: (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
        :param pulumi.Input[bool] disable_epsv: (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
        :param pulumi.Input[bool] disallow_username_in_url: (HTTP) This tells curl to exit if passed a url containing a username.
        :param pulumi.Input[str] dns_interface: (DNS)  Tell  curl  to send outgoing DNS requests through <interface>.
        :param pulumi.Input[str] dns_ipv4_addr: (DNS) Tell curl to bind to <ip-address> when making IPv4 DNS requests, so that the DNS requests originate from this address.
        :param pulumi.Input[str] dns_ipv6_addr: (DNS) Tell curl to bind to <ip-address> when making IPv6 DNS requests, so that the DNS requests originate from this address.
        :param pulumi.Input[str] dns_servers: Set the list of DNS servers to be used instead of the system default.
        :param pulumi.Input[bool] doh_cert_status: Same as --cert-status but used for DoH (DNS-over-HTTPS).
        :param pulumi.Input[bool] doh_insecure: Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
        :param pulumi.Input[str] doh_url: Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
        :param pulumi.Input[str] dump_header: (HTTP FTP) Write the received protocol headers to the specified file.
        :param pulumi.Input[str] egd_file: (TLS) Specify the path name to the Entropy Gathering Daemon socket.
        :param pulumi.Input[str] engine: (TLS) Select the OpenSSL crypto engine to use for cipher operations.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] environment: Environment variables
        :param pulumi.Input[str] etag_compare: (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
        :param pulumi.Input[str] etag_save: (HTTP) This option saves an HTTP ETag to the specified file.
        :param pulumi.Input[int] expect100_timeout: (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
        :param pulumi.Input[bool] fail: (HTTP) Fail silently (no output at all) on server errors.
        :param pulumi.Input[bool] fail_early: Fail and exit on the first detected transfer error.
        :param pulumi.Input[bool] fail_with_body: (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
        :param pulumi.Input[bool] false_start: (TLS) Tells curl to use false start during the TLS handshake.
        :param pulumi.Input[str] form: (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
        :param pulumi.Input[bool] form_escape: (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
        :param pulumi.Input[str] form_name: (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
        :param pulumi.Input[str] ftp_account: (FTP) When an FTP server asks for 'account data' after user name and password has been provided, this data is sent off using the ACCT command.
        :param pulumi.Input[str] ftp_alternative_user: (FTP) If authenticating with the USER and PASS commands fails, send this command.
        :param pulumi.Input[bool] ftp_create_dirs: (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
        :param pulumi.Input[str] ftp_method: (FTP) Control what method curl should use to reach a file on an FTP(S) server.
        :param pulumi.Input[bool] ftp_pasv: (FTP) Use passive mode for the data connection.
        :param pulumi.Input[str] ftp_port: (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
        :param pulumi.Input[bool] ftp_pret: (FTP) Tell curl to send a PRET command before PASV (and EPSV).
        :param pulumi.Input[bool] ftp_skip_pasv_ip: (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection.
        :param pulumi.Input[str] ftp_ssl_ccc_mode: (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
        :param 'CommandLifecycle' lifecycle: At what stage(s) in the resource lifecycle should the command be run
        :param pulumi.Input[str] stdin: TODO
        :param pulumi.Input[Sequence[Any]] triggers: TODO
        :param pulumi.Input[Union[str, Sequence[pulumi.Input[str]]]] urls: Corresponds to the URLs argument.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CurlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Abstraction over the `curl` utility on a remote system. Transfer a URL.

        :param str resource_name: The name of the resource.
        :param CurlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CurlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abstract_unix_socket: Optional[pulumi.Input[str]] = None,
                 alt_svc: Optional[pulumi.Input[str]] = None,
                 any_auth: Optional[pulumi.Input[bool]] = None,
                 append: Optional[pulumi.Input[bool]] = None,
                 aws_sigv4: Optional[pulumi.Input[str]] = None,
                 basic: Optional[pulumi.Input[bool]] = None,
                 binary_path: Optional[pulumi.Input[str]] = None,
                 cacert: Optional[pulumi.Input[str]] = None,
                 capath: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_status: Optional[pulumi.Input[bool]] = None,
                 cert_type: Optional[pulumi.Input['CurlCertType']] = None,
                 ciphers: Optional[pulumi.Input[str]] = None,
                 compressed: Optional[pulumi.Input[bool]] = None,
                 compressed_ssh: Optional[pulumi.Input[bool]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 connect_to: Optional[pulumi.Input[str]] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 continue_at: Optional[pulumi.Input[str]] = None,
                 cookie: Optional[pulumi.Input[str]] = None,
                 cookie_jar: Optional[pulumi.Input[str]] = None,
                 create_dirs: Optional[pulumi.Input[bool]] = None,
                 create_file_mode: Optional[pulumi.Input[str]] = None,
                 crlf: Optional[pulumi.Input[bool]] = None,
                 crlf_file: Optional[pulumi.Input[str]] = None,
                 curves: Optional[pulumi.Input[str]] = None,
                 data: Optional[pulumi.Input[str]] = None,
                 data_ascii: Optional[pulumi.Input[str]] = None,
                 data_binary: Optional[pulumi.Input[str]] = None,
                 data_raw: Optional[pulumi.Input[str]] = None,
                 data_url_encode: Optional[pulumi.Input[str]] = None,
                 delegation: Optional[pulumi.Input['CurlDelegationLevel']] = None,
                 digest: Optional[pulumi.Input[bool]] = None,
                 disable: Optional[pulumi.Input[bool]] = None,
                 disable_eprt: Optional[pulumi.Input[bool]] = None,
                 disable_epsv: Optional[pulumi.Input[bool]] = None,
                 disallow_username_in_url: Optional[pulumi.Input[bool]] = None,
                 dns_interface: Optional[pulumi.Input[str]] = None,
                 dns_ipv4_addr: Optional[pulumi.Input[str]] = None,
                 dns_ipv6_addr: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[str]] = None,
                 doh_cert_status: Optional[pulumi.Input[bool]] = None,
                 doh_insecure: Optional[pulumi.Input[bool]] = None,
                 doh_url: Optional[pulumi.Input[str]] = None,
                 dump_header: Optional[pulumi.Input[str]] = None,
                 egd_file: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 etag_compare: Optional[pulumi.Input[str]] = None,
                 etag_save: Optional[pulumi.Input[str]] = None,
                 expect100_timeout: Optional[pulumi.Input[int]] = None,
                 fail: Optional[pulumi.Input[bool]] = None,
                 fail_early: Optional[pulumi.Input[bool]] = None,
                 fail_with_body: Optional[pulumi.Input[bool]] = None,
                 false_start: Optional[pulumi.Input[bool]] = None,
                 form: Optional[pulumi.Input[str]] = None,
                 form_escape: Optional[pulumi.Input[bool]] = None,
                 form_name: Optional[pulumi.Input[str]] = None,
                 ftp_account: Optional[pulumi.Input[str]] = None,
                 ftp_alternative_user: Optional[pulumi.Input[str]] = None,
                 ftp_create_dirs: Optional[pulumi.Input[bool]] = None,
                 ftp_method: Optional[pulumi.Input[str]] = None,
                 ftp_pasv: Optional[pulumi.Input[bool]] = None,
                 ftp_port: Optional[pulumi.Input[str]] = None,
                 ftp_pret: Optional[pulumi.Input[bool]] = None,
                 ftp_skip_pasv_ip: Optional[pulumi.Input[bool]] = None,
                 ftp_ssl_ccc_mode: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional['CommandLifecycle'] = None,
                 stdin: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None,
                 urls: Optional[pulumi.Input[Union[str, Sequence[pulumi.Input[str]]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CurlArgs.__new__(CurlArgs)

            __props__.__dict__["abstract_unix_socket"] = abstract_unix_socket
            __props__.__dict__["alt_svc"] = alt_svc
            __props__.__dict__["any_auth"] = any_auth
            __props__.__dict__["append"] = append
            __props__.__dict__["aws_sigv4"] = aws_sigv4
            __props__.__dict__["basic"] = basic
            __props__.__dict__["binary_path"] = binary_path
            __props__.__dict__["cacert"] = cacert
            __props__.__dict__["capath"] = capath
            __props__.__dict__["cert"] = cert
            __props__.__dict__["cert_status"] = cert_status
            __props__.__dict__["cert_type"] = cert_type
            __props__.__dict__["ciphers"] = ciphers
            __props__.__dict__["compressed"] = compressed
            __props__.__dict__["compressed_ssh"] = compressed_ssh
            __props__.__dict__["config"] = config
            __props__.__dict__["connect_timeout"] = connect_timeout
            __props__.__dict__["connect_to"] = connect_to
            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = connection
            __props__.__dict__["continue_at"] = continue_at
            __props__.__dict__["cookie"] = cookie
            __props__.__dict__["cookie_jar"] = cookie_jar
            __props__.__dict__["create_dirs"] = create_dirs
            __props__.__dict__["create_file_mode"] = create_file_mode
            __props__.__dict__["crlf"] = crlf
            __props__.__dict__["crlf_file"] = crlf_file
            __props__.__dict__["curves"] = curves
            __props__.__dict__["data"] = data
            __props__.__dict__["data_ascii"] = data_ascii
            __props__.__dict__["data_binary"] = data_binary
            __props__.__dict__["data_raw"] = data_raw
            __props__.__dict__["data_url_encode"] = data_url_encode
            __props__.__dict__["delegation"] = delegation
            __props__.__dict__["digest"] = digest
            __props__.__dict__["disable"] = disable
            __props__.__dict__["disable_eprt"] = disable_eprt
            __props__.__dict__["disable_epsv"] = disable_epsv
            __props__.__dict__["disallow_username_in_url"] = disallow_username_in_url
            __props__.__dict__["dns_interface"] = dns_interface
            __props__.__dict__["dns_ipv4_addr"] = dns_ipv4_addr
            __props__.__dict__["dns_ipv6_addr"] = dns_ipv6_addr
            __props__.__dict__["dns_servers"] = dns_servers
            __props__.__dict__["doh_cert_status"] = doh_cert_status
            __props__.__dict__["doh_insecure"] = doh_insecure
            __props__.__dict__["doh_url"] = doh_url
            __props__.__dict__["dump_header"] = dump_header
            __props__.__dict__["egd_file"] = egd_file
            __props__.__dict__["engine"] = engine
            __props__.__dict__["environment"] = environment
            __props__.__dict__["etag_compare"] = etag_compare
            __props__.__dict__["etag_save"] = etag_save
            __props__.__dict__["expect100_timeout"] = expect100_timeout
            __props__.__dict__["fail"] = fail
            __props__.__dict__["fail_early"] = fail_early
            __props__.__dict__["fail_with_body"] = fail_with_body
            __props__.__dict__["false_start"] = false_start
            __props__.__dict__["form"] = form
            __props__.__dict__["form_escape"] = form_escape
            __props__.__dict__["form_name"] = form_name
            __props__.__dict__["ftp_account"] = ftp_account
            __props__.__dict__["ftp_alternative_user"] = ftp_alternative_user
            __props__.__dict__["ftp_create_dirs"] = ftp_create_dirs
            __props__.__dict__["ftp_method"] = ftp_method
            __props__.__dict__["ftp_pasv"] = ftp_pasv
            __props__.__dict__["ftp_port"] = ftp_port
            __props__.__dict__["ftp_pret"] = ftp_pret
            __props__.__dict__["ftp_skip_pasv_ip"] = ftp_skip_pasv_ip
            __props__.__dict__["ftp_ssl_ccc_mode"] = ftp_ssl_ccc_mode
            __props__.__dict__["lifecycle"] = lifecycle
            __props__.__dict__["stdin"] = stdin
            __props__.__dict__["triggers"] = triggers
            if urls is None and not opts.urn:
                raise TypeError("Missing required property 'urls'")
            __props__.__dict__["urls"] = urls
            __props__.__dict__["command"] = None
            __props__.__dict__["stderr"] = None
            __props__.__dict__["stdout"] = None
        super(Curl, __self__).__init__(
            'kubernetes-the-hard-way:tools:Curl',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="abstractUnixSocket")
    def abstract_unix_socket(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
        """
        return pulumi.get(self, "abstract_unix_socket")

    @property
    @pulumi.getter(name="altSvc")
    def alt_svc(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTPS)  This  option enables the alt-svc parser in curl.
        """
        return pulumi.get(self, "alt_svc")

    @property
    @pulumi.getter(name="anyAuth")
    def any_auth(self) -> pulumi.Output[Optional[bool]]:
        """
        (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
        """
        return pulumi.get(self, "any_auth")

    @property
    @pulumi.getter
    def append(self) -> pulumi.Output[Optional[bool]]:
        """
        (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
        """
        return pulumi.get(self, "append")

    @property
    @pulumi.getter(name="awsSigv4")
    def aws_sigv4(self) -> pulumi.Output[Optional[str]]:
        """
        Use AWS V4 signature authentication in the transfer.
        """
        return pulumi.get(self, "aws_sigv4")

    @property
    @pulumi.getter
    def basic(self) -> pulumi.Output[Optional[bool]]:
        """
        (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
        """
        return pulumi.get(self, "basic")

    @property
    @pulumi.getter(name="binaryPath")
    def binary_path(self) -> pulumi.Output[str]:
        """
        Path to the binary on the remote system. If omitted, the tool is assumed to be on $PATH
        """
        return pulumi.get(self, "binary_path")

    @property
    @pulumi.getter
    def cacert(self) -> pulumi.Output[Optional[str]]:
        """
        (TLS)  Tells curl to use the specified certificate file to verify the peer.
        """
        return pulumi.get(self, "cacert")

    @property
    @pulumi.getter
    def capath(self) -> pulumi.Output[Optional[str]]:
        """
        (TLS) Tells curl to use the specified certificate directory to verify the peer.
        """
        return pulumi.get(self, "capath")

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Output[Optional[str]]:
        """
        (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="certStatus")
    def cert_status(self) -> pulumi.Output[Optional[bool]]:
        """
        (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
        """
        return pulumi.get(self, "cert_status")

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> pulumi.Output[Optional['CurlCertType']]:
        """
        (TLS) Tells curl what type the provided client certificate is using.
        """
        return pulumi.get(self, "cert_type")

    @property
    @pulumi.getter
    def ciphers(self) -> pulumi.Output[Optional[str]]:
        """
        (TLS) Specifies which ciphers to use in the connection.
        """
        return pulumi.get(self, "ciphers")

    @property
    @pulumi.getter
    def command(self) -> pulumi.Output['pulumi_command.remote.Command']:
        """
        The underlying command
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def compressed(self) -> pulumi.Output[Optional[bool]]:
        """
        (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
        """
        return pulumi.get(self, "compressed")

    @property
    @pulumi.getter(name="compressedSsh")
    def compressed_ssh(self) -> pulumi.Output[Optional[bool]]:
        """
        (SCP SFTP) Enables built-in SSH compression.
        """
        return pulumi.get(self, "compressed_ssh")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional[str]]:
        """
        Specify a text file to read curl arguments from.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum  time  in seconds that you allow curl's connection to take.
        """
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="connectTo")
    def connect_to(self) -> pulumi.Output[Optional[str]]:
        """
        For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
        """
        return pulumi.get(self, "connect_to")

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Output['pulumi_command.remote.outputs.Connection']:
        """
        Connection details for the remote system
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="continueAt")
    def continue_at(self) -> pulumi.Output[Optional[str]]:
        """
        Continue/Resume a previous file transfer at the given offset.
        """
        return pulumi.get(self, "continue_at")

    @property
    @pulumi.getter
    def cookie(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP) Pass the data to the HTTP server in the Cookie header.
        """
        return pulumi.get(self, "cookie")

    @property
    @pulumi.getter(name="cookieJar")
    def cookie_jar(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
        """
        return pulumi.get(self, "cookie_jar")

    @property
    @pulumi.getter(name="createDirs")
    def create_dirs(self) -> pulumi.Output[Optional[bool]]:
        """
        When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
        """
        return pulumi.get(self, "create_dirs")

    @property
    @pulumi.getter(name="createFileMode")
    def create_file_mode(self) -> pulumi.Output[Optional[str]]:
        """
        (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644.
        """
        return pulumi.get(self, "create_file_mode")

    @property
    @pulumi.getter
    def crlf(self) -> pulumi.Output[Optional[bool]]:
        """
        (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
        """
        return pulumi.get(self, "crlf")

    @property
    @pulumi.getter(name="crlfFile")
    def crlf_file(self) -> pulumi.Output[Optional[str]]:
        """
        (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
        """
        return pulumi.get(self, "crlf_file")

    @property
    @pulumi.getter
    def curves(self) -> pulumi.Output[Optional[str]]:
        """
        (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
        """
        return pulumi.get(self, "curves")

    @property
    @pulumi.getter
    def data(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="dataAscii")
    def data_ascii(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP) This is just an alias for -d, --data.
        """
        return pulumi.get(self, "data_ascii")

    @property
    @pulumi.getter(name="dataBinary")
    def data_binary(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP) This posts data exactly as specified with no extra processing whatsoever.
        """
        return pulumi.get(self, "data_binary")

    @property
    @pulumi.getter(name="dataRaw")
    def data_raw(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
        """
        return pulumi.get(self, "data_raw")

    @property
    @pulumi.getter(name="dataUrlEncode")
    def data_url_encode(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
        """
        return pulumi.get(self, "data_url_encode")

    @property
    @pulumi.getter
    def delegation(self) -> pulumi.Output[Optional['CurlDelegationLevel']]:
        """
        (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
        """
        return pulumi.get(self, "delegation")

    @property
    @pulumi.getter
    def digest(self) -> pulumi.Output[Optional[bool]]:
        """
        (HTTP) Enables HTTP Digest authentication.
        """
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter
    def disable(self) -> pulumi.Output[Optional[bool]]:
        """
        If used as the first parameter on the command line, the curlrc config file will not be read and used.
        """
        return pulumi.get(self, "disable")

    @property
    @pulumi.getter(name="disableEprt")
    def disable_eprt(self) -> pulumi.Output[Optional[bool]]:
        """
        (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
        """
        return pulumi.get(self, "disable_eprt")

    @property
    @pulumi.getter(name="disableEpsv")
    def disable_epsv(self) -> pulumi.Output[Optional[bool]]:
        """
        (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
        """
        return pulumi.get(self, "disable_epsv")

    @property
    @pulumi.getter(name="disallowUsernameInUrl")
    def disallow_username_in_url(self) -> pulumi.Output[Optional[bool]]:
        """
        (HTTP) This tells curl to exit if passed a url containing a username.
        """
        return pulumi.get(self, "disallow_username_in_url")

    @property
    @pulumi.getter(name="dnsInterface")
    def dns_interface(self) -> pulumi.Output[Optional[str]]:
        """
        (DNS)  Tell  curl  to send outgoing DNS requests through <interface>.
        """
        return pulumi.get(self, "dns_interface")

    @property
    @pulumi.getter(name="dnsIpv4Addr")
    def dns_ipv4_addr(self) -> pulumi.Output[Optional[str]]:
        """
        (DNS) Tell curl to bind to <ip-address> when making IPv4 DNS requests, so that the DNS requests originate from this address.
        """
        return pulumi.get(self, "dns_ipv4_addr")

    @property
    @pulumi.getter(name="dnsIpv6Addr")
    def dns_ipv6_addr(self) -> pulumi.Output[Optional[str]]:
        """
        (DNS) Tell curl to bind to <ip-address> when making IPv6 DNS requests, so that the DNS requests originate from this address.
        """
        return pulumi.get(self, "dns_ipv6_addr")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[str]]:
        """
        Set the list of DNS servers to be used instead of the system default.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="dohCertStatus")
    def doh_cert_status(self) -> pulumi.Output[Optional[bool]]:
        """
        Same as --cert-status but used for DoH (DNS-over-HTTPS).
        """
        return pulumi.get(self, "doh_cert_status")

    @property
    @pulumi.getter(name="dohInsecure")
    def doh_insecure(self) -> pulumi.Output[Optional[bool]]:
        """
        Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
        """
        return pulumi.get(self, "doh_insecure")

    @property
    @pulumi.getter(name="dohUrl")
    def doh_url(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
        """
        return pulumi.get(self, "doh_url")

    @property
    @pulumi.getter(name="dumpHeader")
    def dump_header(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP FTP) Write the received protocol headers to the specified file.
        """
        return pulumi.get(self, "dump_header")

    @property
    @pulumi.getter(name="egdFile")
    def egd_file(self) -> pulumi.Output[Optional[str]]:
        """
        (TLS) Specify the path name to the Entropy Gathering Daemon socket.
        """
        return pulumi.get(self, "egd_file")

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Output[Optional[str]]:
        """
        (TLS) Select the OpenSSL crypto engine to use for cipher operations.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Environment variables
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="etagCompare")
    def etag_compare(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
        """
        return pulumi.get(self, "etag_compare")

    @property
    @pulumi.getter(name="etagSave")
    def etag_save(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP) This option saves an HTTP ETag to the specified file.
        """
        return pulumi.get(self, "etag_save")

    @property
    @pulumi.getter(name="expect100Timeout")
    def expect100_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
        """
        return pulumi.get(self, "expect100_timeout")

    @property
    @pulumi.getter
    def fail(self) -> pulumi.Output[Optional[bool]]:
        """
        (HTTP) Fail silently (no output at all) on server errors.
        """
        return pulumi.get(self, "fail")

    @property
    @pulumi.getter(name="failEarly")
    def fail_early(self) -> pulumi.Output[Optional[bool]]:
        """
        Fail and exit on the first detected transfer error.
        """
        return pulumi.get(self, "fail_early")

    @property
    @pulumi.getter(name="failWithBody")
    def fail_with_body(self) -> pulumi.Output[Optional[bool]]:
        """
        (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
        """
        return pulumi.get(self, "fail_with_body")

    @property
    @pulumi.getter(name="falseStart")
    def false_start(self) -> pulumi.Output[Optional[bool]]:
        """
        (TLS) Tells curl to use false start during the TLS handshake.
        """
        return pulumi.get(self, "false_start")

    @property
    @pulumi.getter
    def form(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
        """
        return pulumi.get(self, "form")

    @property
    @pulumi.getter(name="formEscape")
    def form_escape(self) -> pulumi.Output[Optional[bool]]:
        """
        (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
        """
        return pulumi.get(self, "form_escape")

    @property
    @pulumi.getter(name="formName")
    def form_name(self) -> pulumi.Output[Optional[str]]:
        """
        (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
        """
        return pulumi.get(self, "form_name")

    @property
    @pulumi.getter(name="ftpAccount")
    def ftp_account(self) -> pulumi.Output[Optional[str]]:
        """
        (FTP) When an FTP server asks for 'account data' after user name and password has been provided, this data is sent off using the ACCT command.
        """
        return pulumi.get(self, "ftp_account")

    @property
    @pulumi.getter(name="ftpAlternativeUser")
    def ftp_alternative_user(self) -> pulumi.Output[Optional[str]]:
        """
        (FTP) If authenticating with the USER and PASS commands fails, send this command.
        """
        return pulumi.get(self, "ftp_alternative_user")

    @property
    @pulumi.getter(name="ftpCreateDirs")
    def ftp_create_dirs(self) -> pulumi.Output[Optional[bool]]:
        """
        (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
        """
        return pulumi.get(self, "ftp_create_dirs")

    @property
    @pulumi.getter(name="ftpMethod")
    def ftp_method(self) -> pulumi.Output[Optional[str]]:
        """
        (FTP) Control what method curl should use to reach a file on an FTP(S) server.
        """
        return pulumi.get(self, "ftp_method")

    @property
    @pulumi.getter(name="ftpPasv")
    def ftp_pasv(self) -> pulumi.Output[Optional[bool]]:
        """
        (FTP) Use passive mode for the data connection.
        """
        return pulumi.get(self, "ftp_pasv")

    @property
    @pulumi.getter(name="ftpPort")
    def ftp_port(self) -> pulumi.Output[Optional[str]]:
        """
        (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
        """
        return pulumi.get(self, "ftp_port")

    @property
    @pulumi.getter(name="ftpPret")
    def ftp_pret(self) -> pulumi.Output[Optional[bool]]:
        """
        (FTP) Tell curl to send a PRET command before PASV (and EPSV).
        """
        return pulumi.get(self, "ftp_pret")

    @property
    @pulumi.getter(name="ftpSkipPasvIp")
    def ftp_skip_pasv_ip(self) -> pulumi.Output[Optional[bool]]:
        """
        (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection.
        """
        return pulumi.get(self, "ftp_skip_pasv_ip")

    @property
    @pulumi.getter(name="ftpSslCccMode")
    def ftp_ssl_ccc_mode(self) -> pulumi.Output[Optional[str]]:
        """
        (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
        """
        return pulumi.get(self, "ftp_ssl_ccc_mode")

    @property
    @pulumi.getter
    def lifecycle(self) -> pulumi.Output[Optional['CommandLifecycle']]:
        """
        At what stage(s) in the resource lifecycle should the command be run
        """
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter
    def stderr(self) -> pulumi.Output[str]:
        """
        TODO
        """
        return pulumi.get(self, "stderr")

    @property
    @pulumi.getter
    def stdin(self) -> pulumi.Output[Optional[str]]:
        """
        TODO
        """
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter
    def stdout(self) -> pulumi.Output[str]:
        """
        TODO
        """
        return pulumi.get(self, "stdout")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Sequence[Any]]:
        """
        TODO
        """
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter
    def urls(self) -> pulumi.Output[Any]:
        """
        Corresponds to the URLs argument.
        """
        return pulumi.get(self, "urls")

