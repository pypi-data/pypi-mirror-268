# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kubernetes_executor_config.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import struct_pb2 as google_dot_protobuf_dot_struct__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n kubernetes_executor_config.proto\x12\x0ekfp_kubernetes\x1a\x1cgoogle/protobuf/struct.proto\"\xb7\x06\n\x18KubernetesExecutorConfig\x12\x38\n\x10secret_as_volume\x18\x01 \x03(\x0b\x32\x1e.kfp_kubernetes.SecretAsVolume\x12\x32\n\rsecret_as_env\x18\x02 \x03(\x0b\x32\x1b.kfp_kubernetes.SecretAsEnv\x12+\n\tpvc_mount\x18\x03 \x03(\x0b\x32\x18.kfp_kubernetes.PvcMount\x12\x33\n\rnode_selector\x18\x04 \x01(\x0b\x32\x1c.kfp_kubernetes.NodeSelector\x12\x31\n\x0cpod_metadata\x18\x05 \x01(\x0b\x32\x1b.kfp_kubernetes.PodMetadata\x12:\n\x11image_pull_secret\x18\x06 \x03(\x0b\x32\x1f.kfp_kubernetes.ImagePullSecret\x12\x19\n\x11image_pull_policy\x18\x07 \x01(\t\x12?\n\x14\x63onfig_map_as_volume\x18\x08 \x03(\x0b\x32!.kfp_kubernetes.ConfigMapAsVolume\x12\x39\n\x11\x63onfig_map_as_env\x18\t \x03(\x0b\x32\x1e.kfp_kubernetes.ConfigMapAsEnv\x12\x1f\n\x17\x61\x63tive_deadline_seconds\x18\n \x01(\x03\x12\x39\n\x11\x66ield_path_as_env\x18\x0b \x03(\x0b\x32\x1e.kfp_kubernetes.FieldPathAsEnv\x12/\n\x0btolerations\x18\x0c \x03(\x0b\x32\x1a.kfp_kubernetes.Toleration\x12H\n\x18generic_ephemeral_volume\x18\r \x03(\x0b\x32&.kfp_kubernetes.GenericEphemeralVolume\x12\x37\n\rnode_affinity\x18\x0e \x03(\x0b\x32 .kfp_kubernetes.NodeAffinityTerm\x12\x35\n\x0cpod_affinity\x18\x0f \x03(\x0b\x32\x1f.kfp_kubernetes.PodAffinityTerm\"]\n\x0eSecretAsVolume\x12\x13\n\x0bsecret_name\x18\x01 \x01(\t\x12\x12\n\nmount_path\x18\x02 \x01(\t\x12\x15\n\x08optional\x18\x03 \x01(\x08H\x00\x88\x01\x01\x42\x0b\n\t_optional\"\x9f\x01\n\x0bSecretAsEnv\x12\x13\n\x0bsecret_name\x18\x01 \x01(\t\x12\x41\n\nkey_to_env\x18\x02 \x03(\x0b\x32-.kfp_kubernetes.SecretAsEnv.SecretKeyToEnvMap\x1a\x38\n\x11SecretKeyToEnvMap\x12\x12\n\nsecret_key\x18\x01 \x01(\t\x12\x0f\n\x07\x65nv_var\x18\x02 \x01(\t\"N\n\x17TaskOutputParameterSpec\x12\x15\n\rproducer_task\x18\x01 \x01(\t\x12\x1c\n\x14output_parameter_key\x18\x02 \x01(\t\"\xb2\x01\n\x08PvcMount\x12H\n\x15task_output_parameter\x18\x01 \x01(\x0b\x32\'.kfp_kubernetes.TaskOutputParameterSpecH\x00\x12\x12\n\x08\x63onstant\x18\x02 \x01(\tH\x00\x12#\n\x19\x63omponent_input_parameter\x18\x03 \x01(\tH\x00\x12\x12\n\nmount_path\x18\x04 \x01(\tB\x0f\n\rpvc_reference\"\xe4\x01\n\tCreatePvc\x12\x12\n\x08pvc_name\x18\x01 \x01(\tH\x00\x12\x19\n\x0fpvc_name_suffix\x18\x02 \x01(\tH\x00\x12\x14\n\x0c\x61\x63\x63\x65ss_modes\x18\x03 \x03(\t\x12\x0c\n\x04size\x18\x04 \x01(\t\x12\x1d\n\x15\x64\x65\x66\x61ult_storage_class\x18\x05 \x01(\x08\x12\x1a\n\x12storage_class_name\x18\x06 \x01(\t\x12\x13\n\x0bvolume_name\x18\x07 \x01(\t\x12,\n\x0b\x61nnotations\x18\x08 \x01(\x0b\x32\x17.google.protobuf.StructB\x06\n\x04name\"\x9f\x01\n\tDeletePvc\x12H\n\x15task_output_parameter\x18\x01 \x01(\x0b\x32\'.kfp_kubernetes.TaskOutputParameterSpecH\x00\x12\x12\n\x08\x63onstant\x18\x02 \x01(\tH\x00\x12#\n\x19\x63omponent_input_parameter\x18\x03 \x01(\tH\x00\x42\x0f\n\rpvc_reference\"w\n\x0cNodeSelector\x12\x38\n\x06labels\x18\x01 \x03(\x0b\x32(.kfp_kubernetes.NodeSelector.LabelsEntry\x1a-\n\x0bLabelsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\xec\x01\n\x0bPodMetadata\x12\x37\n\x06labels\x18\x01 \x03(\x0b\x32\'.kfp_kubernetes.PodMetadata.LabelsEntry\x12\x41\n\x0b\x61nnotations\x18\x02 \x03(\x0b\x32,.kfp_kubernetes.PodMetadata.AnnotationsEntry\x1a-\n\x0bLabelsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a\x32\n\x10\x41nnotationsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"d\n\x11\x43onfigMapAsVolume\x12\x17\n\x0f\x63onfig_map_name\x18\x01 \x01(\t\x12\x12\n\nmount_path\x18\x02 \x01(\t\x12\x15\n\x08optional\x18\x03 \x01(\x08H\x00\x88\x01\x01\x42\x0b\n\t_optional\"\xb3\x01\n\x0e\x43onfigMapAsEnv\x12\x17\n\x0f\x63onfig_map_name\x18\x01 \x01(\t\x12G\n\nkey_to_env\x18\x02 \x03(\x0b\x32\x33.kfp_kubernetes.ConfigMapAsEnv.ConfigMapKeyToEnvMap\x1a?\n\x14\x43onfigMapKeyToEnvMap\x12\x16\n\x0e\x63onfig_map_key\x18\x01 \x01(\t\x12\x0f\n\x07\x65nv_var\x18\x02 \x01(\t\"\xcf\x01\n\x16GenericEphemeralVolume\x12\x13\n\x0bvolume_name\x18\x01 \x01(\t\x12\x12\n\nmount_path\x18\x02 \x01(\t\x12\x14\n\x0c\x61\x63\x63\x65ss_modes\x18\x03 \x03(\t\x12\x0c\n\x04size\x18\x04 \x01(\t\x12\x1d\n\x15\x64\x65\x66\x61ult_storage_class\x18\x05 \x01(\x08\x12\x1a\n\x12storage_class_name\x18\x06 \x01(\t\x12-\n\x08metadata\x18\x07 \x01(\x0b\x32\x1b.kfp_kubernetes.PodMetadata\"&\n\x0fImagePullSecret\x12\x13\n\x0bsecret_name\x18\x01 \x01(\t\"2\n\x0e\x46ieldPathAsEnv\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x12\n\nfield_path\x18\x02 \x01(\t\"\x82\x01\n\nToleration\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\x10\n\x08operator\x18\x02 \x01(\t\x12\r\n\x05value\x18\x03 \x01(\t\x12\x0e\n\x06\x65\x66\x66\x65\x63t\x18\x04 \x01(\t\x12\x1f\n\x12toleration_seconds\x18\x05 \x01(\x03H\x00\x88\x01\x01\x42\x15\n\x13_toleration_seconds\"D\n\x13SelectorRequirement\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\x10\n\x08operator\x18\x02 \x01(\t\x12\x0e\n\x06values\x18\x03 \x03(\t\"\xad\x01\n\x10NodeAffinityTerm\x12>\n\x11match_expressions\x18\x01 \x03(\x0b\x32#.kfp_kubernetes.SelectorRequirement\x12\x39\n\x0cmatch_fields\x18\x02 \x03(\x0b\x32#.kfp_kubernetes.SelectorRequirement\x12\x13\n\x06weight\x18\x03 \x01(\x05H\x00\x88\x01\x01\x42\t\n\x07_weight\"\xa3\x04\n\x0fPodAffinityTerm\x12\x42\n\x15match_pod_expressions\x18\x01 \x03(\x0b\x32#.kfp_kubernetes.SelectorRequirement\x12M\n\x10match_pod_labels\x18\x02 \x03(\x0b\x32\x33.kfp_kubernetes.PodAffinityTerm.MatchPodLabelsEntry\x12\x14\n\x0ctopology_key\x18\x03 \x01(\t\x12\x12\n\nnamespaces\x18\x04 \x03(\t\x12H\n\x1bmatch_namespace_expressions\x18\x05 \x03(\x0b\x32#.kfp_kubernetes.SelectorRequirement\x12Y\n\x16match_namespace_labels\x18\x06 \x03(\x0b\x32\x39.kfp_kubernetes.PodAffinityTerm.MatchNamespaceLabelsEntry\x12\x13\n\x06weight\x18\x07 \x01(\x05H\x00\x88\x01\x01\x12\x11\n\x04\x61nti\x18\x08 \x01(\x08H\x01\x88\x01\x01\x1a\x35\n\x13MatchPodLabelsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a;\n\x19MatchNamespaceLabelsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x42\t\n\x07_weightB\x07\n\x05_antiBIZGgithub.com/kubeflow/pipelines/kubernetes_platform/go/kubernetesplatformb\x06proto3')



_KUBERNETESEXECUTORCONFIG = DESCRIPTOR.message_types_by_name['KubernetesExecutorConfig']
_SECRETASVOLUME = DESCRIPTOR.message_types_by_name['SecretAsVolume']
_SECRETASENV = DESCRIPTOR.message_types_by_name['SecretAsEnv']
_SECRETASENV_SECRETKEYTOENVMAP = _SECRETASENV.nested_types_by_name['SecretKeyToEnvMap']
_TASKOUTPUTPARAMETERSPEC = DESCRIPTOR.message_types_by_name['TaskOutputParameterSpec']
_PVCMOUNT = DESCRIPTOR.message_types_by_name['PvcMount']
_CREATEPVC = DESCRIPTOR.message_types_by_name['CreatePvc']
_DELETEPVC = DESCRIPTOR.message_types_by_name['DeletePvc']
_NODESELECTOR = DESCRIPTOR.message_types_by_name['NodeSelector']
_NODESELECTOR_LABELSENTRY = _NODESELECTOR.nested_types_by_name['LabelsEntry']
_PODMETADATA = DESCRIPTOR.message_types_by_name['PodMetadata']
_PODMETADATA_LABELSENTRY = _PODMETADATA.nested_types_by_name['LabelsEntry']
_PODMETADATA_ANNOTATIONSENTRY = _PODMETADATA.nested_types_by_name['AnnotationsEntry']
_CONFIGMAPASVOLUME = DESCRIPTOR.message_types_by_name['ConfigMapAsVolume']
_CONFIGMAPASENV = DESCRIPTOR.message_types_by_name['ConfigMapAsEnv']
_CONFIGMAPASENV_CONFIGMAPKEYTOENVMAP = _CONFIGMAPASENV.nested_types_by_name['ConfigMapKeyToEnvMap']
_GENERICEPHEMERALVOLUME = DESCRIPTOR.message_types_by_name['GenericEphemeralVolume']
_IMAGEPULLSECRET = DESCRIPTOR.message_types_by_name['ImagePullSecret']
_FIELDPATHASENV = DESCRIPTOR.message_types_by_name['FieldPathAsEnv']
_TOLERATION = DESCRIPTOR.message_types_by_name['Toleration']
_SELECTORREQUIREMENT = DESCRIPTOR.message_types_by_name['SelectorRequirement']
_NODEAFFINITYTERM = DESCRIPTOR.message_types_by_name['NodeAffinityTerm']
_PODAFFINITYTERM = DESCRIPTOR.message_types_by_name['PodAffinityTerm']
_PODAFFINITYTERM_MATCHPODLABELSENTRY = _PODAFFINITYTERM.nested_types_by_name['MatchPodLabelsEntry']
_PODAFFINITYTERM_MATCHNAMESPACELABELSENTRY = _PODAFFINITYTERM.nested_types_by_name['MatchNamespaceLabelsEntry']
KubernetesExecutorConfig = _reflection.GeneratedProtocolMessageType('KubernetesExecutorConfig', (_message.Message,), {
  'DESCRIPTOR' : _KUBERNETESEXECUTORCONFIG,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.KubernetesExecutorConfig)
  })
_sym_db.RegisterMessage(KubernetesExecutorConfig)

SecretAsVolume = _reflection.GeneratedProtocolMessageType('SecretAsVolume', (_message.Message,), {
  'DESCRIPTOR' : _SECRETASVOLUME,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.SecretAsVolume)
  })
_sym_db.RegisterMessage(SecretAsVolume)

SecretAsEnv = _reflection.GeneratedProtocolMessageType('SecretAsEnv', (_message.Message,), {

  'SecretKeyToEnvMap' : _reflection.GeneratedProtocolMessageType('SecretKeyToEnvMap', (_message.Message,), {
    'DESCRIPTOR' : _SECRETASENV_SECRETKEYTOENVMAP,
    '__module__' : 'kubernetes_executor_config_pb2'
    # @@protoc_insertion_point(class_scope:kfp_kubernetes.SecretAsEnv.SecretKeyToEnvMap)
    })
  ,
  'DESCRIPTOR' : _SECRETASENV,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.SecretAsEnv)
  })
_sym_db.RegisterMessage(SecretAsEnv)
_sym_db.RegisterMessage(SecretAsEnv.SecretKeyToEnvMap)

TaskOutputParameterSpec = _reflection.GeneratedProtocolMessageType('TaskOutputParameterSpec', (_message.Message,), {
  'DESCRIPTOR' : _TASKOUTPUTPARAMETERSPEC,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.TaskOutputParameterSpec)
  })
_sym_db.RegisterMessage(TaskOutputParameterSpec)

PvcMount = _reflection.GeneratedProtocolMessageType('PvcMount', (_message.Message,), {
  'DESCRIPTOR' : _PVCMOUNT,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.PvcMount)
  })
_sym_db.RegisterMessage(PvcMount)

CreatePvc = _reflection.GeneratedProtocolMessageType('CreatePvc', (_message.Message,), {
  'DESCRIPTOR' : _CREATEPVC,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.CreatePvc)
  })
_sym_db.RegisterMessage(CreatePvc)

DeletePvc = _reflection.GeneratedProtocolMessageType('DeletePvc', (_message.Message,), {
  'DESCRIPTOR' : _DELETEPVC,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.DeletePvc)
  })
_sym_db.RegisterMessage(DeletePvc)

NodeSelector = _reflection.GeneratedProtocolMessageType('NodeSelector', (_message.Message,), {

  'LabelsEntry' : _reflection.GeneratedProtocolMessageType('LabelsEntry', (_message.Message,), {
    'DESCRIPTOR' : _NODESELECTOR_LABELSENTRY,
    '__module__' : 'kubernetes_executor_config_pb2'
    # @@protoc_insertion_point(class_scope:kfp_kubernetes.NodeSelector.LabelsEntry)
    })
  ,
  'DESCRIPTOR' : _NODESELECTOR,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.NodeSelector)
  })
_sym_db.RegisterMessage(NodeSelector)
_sym_db.RegisterMessage(NodeSelector.LabelsEntry)

PodMetadata = _reflection.GeneratedProtocolMessageType('PodMetadata', (_message.Message,), {

  'LabelsEntry' : _reflection.GeneratedProtocolMessageType('LabelsEntry', (_message.Message,), {
    'DESCRIPTOR' : _PODMETADATA_LABELSENTRY,
    '__module__' : 'kubernetes_executor_config_pb2'
    # @@protoc_insertion_point(class_scope:kfp_kubernetes.PodMetadata.LabelsEntry)
    })
  ,

  'AnnotationsEntry' : _reflection.GeneratedProtocolMessageType('AnnotationsEntry', (_message.Message,), {
    'DESCRIPTOR' : _PODMETADATA_ANNOTATIONSENTRY,
    '__module__' : 'kubernetes_executor_config_pb2'
    # @@protoc_insertion_point(class_scope:kfp_kubernetes.PodMetadata.AnnotationsEntry)
    })
  ,
  'DESCRIPTOR' : _PODMETADATA,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.PodMetadata)
  })
_sym_db.RegisterMessage(PodMetadata)
_sym_db.RegisterMessage(PodMetadata.LabelsEntry)
_sym_db.RegisterMessage(PodMetadata.AnnotationsEntry)

ConfigMapAsVolume = _reflection.GeneratedProtocolMessageType('ConfigMapAsVolume', (_message.Message,), {
  'DESCRIPTOR' : _CONFIGMAPASVOLUME,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.ConfigMapAsVolume)
  })
_sym_db.RegisterMessage(ConfigMapAsVolume)

ConfigMapAsEnv = _reflection.GeneratedProtocolMessageType('ConfigMapAsEnv', (_message.Message,), {

  'ConfigMapKeyToEnvMap' : _reflection.GeneratedProtocolMessageType('ConfigMapKeyToEnvMap', (_message.Message,), {
    'DESCRIPTOR' : _CONFIGMAPASENV_CONFIGMAPKEYTOENVMAP,
    '__module__' : 'kubernetes_executor_config_pb2'
    # @@protoc_insertion_point(class_scope:kfp_kubernetes.ConfigMapAsEnv.ConfigMapKeyToEnvMap)
    })
  ,
  'DESCRIPTOR' : _CONFIGMAPASENV,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.ConfigMapAsEnv)
  })
_sym_db.RegisterMessage(ConfigMapAsEnv)
_sym_db.RegisterMessage(ConfigMapAsEnv.ConfigMapKeyToEnvMap)

GenericEphemeralVolume = _reflection.GeneratedProtocolMessageType('GenericEphemeralVolume', (_message.Message,), {
  'DESCRIPTOR' : _GENERICEPHEMERALVOLUME,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.GenericEphemeralVolume)
  })
_sym_db.RegisterMessage(GenericEphemeralVolume)

ImagePullSecret = _reflection.GeneratedProtocolMessageType('ImagePullSecret', (_message.Message,), {
  'DESCRIPTOR' : _IMAGEPULLSECRET,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.ImagePullSecret)
  })
_sym_db.RegisterMessage(ImagePullSecret)

FieldPathAsEnv = _reflection.GeneratedProtocolMessageType('FieldPathAsEnv', (_message.Message,), {
  'DESCRIPTOR' : _FIELDPATHASENV,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.FieldPathAsEnv)
  })
_sym_db.RegisterMessage(FieldPathAsEnv)

Toleration = _reflection.GeneratedProtocolMessageType('Toleration', (_message.Message,), {
  'DESCRIPTOR' : _TOLERATION,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.Toleration)
  })
_sym_db.RegisterMessage(Toleration)

SelectorRequirement = _reflection.GeneratedProtocolMessageType('SelectorRequirement', (_message.Message,), {
  'DESCRIPTOR' : _SELECTORREQUIREMENT,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.SelectorRequirement)
  })
_sym_db.RegisterMessage(SelectorRequirement)

NodeAffinityTerm = _reflection.GeneratedProtocolMessageType('NodeAffinityTerm', (_message.Message,), {
  'DESCRIPTOR' : _NODEAFFINITYTERM,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.NodeAffinityTerm)
  })
_sym_db.RegisterMessage(NodeAffinityTerm)

PodAffinityTerm = _reflection.GeneratedProtocolMessageType('PodAffinityTerm', (_message.Message,), {

  'MatchPodLabelsEntry' : _reflection.GeneratedProtocolMessageType('MatchPodLabelsEntry', (_message.Message,), {
    'DESCRIPTOR' : _PODAFFINITYTERM_MATCHPODLABELSENTRY,
    '__module__' : 'kubernetes_executor_config_pb2'
    # @@protoc_insertion_point(class_scope:kfp_kubernetes.PodAffinityTerm.MatchPodLabelsEntry)
    })
  ,

  'MatchNamespaceLabelsEntry' : _reflection.GeneratedProtocolMessageType('MatchNamespaceLabelsEntry', (_message.Message,), {
    'DESCRIPTOR' : _PODAFFINITYTERM_MATCHNAMESPACELABELSENTRY,
    '__module__' : 'kubernetes_executor_config_pb2'
    # @@protoc_insertion_point(class_scope:kfp_kubernetes.PodAffinityTerm.MatchNamespaceLabelsEntry)
    })
  ,
  'DESCRIPTOR' : _PODAFFINITYTERM,
  '__module__' : 'kubernetes_executor_config_pb2'
  # @@protoc_insertion_point(class_scope:kfp_kubernetes.PodAffinityTerm)
  })
_sym_db.RegisterMessage(PodAffinityTerm)
_sym_db.RegisterMessage(PodAffinityTerm.MatchPodLabelsEntry)
_sym_db.RegisterMessage(PodAffinityTerm.MatchNamespaceLabelsEntry)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'ZGgithub.com/kubeflow/pipelines/kubernetes_platform/go/kubernetesplatform'
  _NODESELECTOR_LABELSENTRY._options = None
  _NODESELECTOR_LABELSENTRY._serialized_options = b'8\001'
  _PODMETADATA_LABELSENTRY._options = None
  _PODMETADATA_LABELSENTRY._serialized_options = b'8\001'
  _PODMETADATA_ANNOTATIONSENTRY._options = None
  _PODMETADATA_ANNOTATIONSENTRY._serialized_options = b'8\001'
  _PODAFFINITYTERM_MATCHPODLABELSENTRY._options = None
  _PODAFFINITYTERM_MATCHPODLABELSENTRY._serialized_options = b'8\001'
  _PODAFFINITYTERM_MATCHNAMESPACELABELSENTRY._options = None
  _PODAFFINITYTERM_MATCHNAMESPACELABELSENTRY._serialized_options = b'8\001'
  _KUBERNETESEXECUTORCONFIG._serialized_start=83
  _KUBERNETESEXECUTORCONFIG._serialized_end=906
  _SECRETASVOLUME._serialized_start=908
  _SECRETASVOLUME._serialized_end=1001
  _SECRETASENV._serialized_start=1004
  _SECRETASENV._serialized_end=1163
  _SECRETASENV_SECRETKEYTOENVMAP._serialized_start=1107
  _SECRETASENV_SECRETKEYTOENVMAP._serialized_end=1163
  _TASKOUTPUTPARAMETERSPEC._serialized_start=1165
  _TASKOUTPUTPARAMETERSPEC._serialized_end=1243
  _PVCMOUNT._serialized_start=1246
  _PVCMOUNT._serialized_end=1424
  _CREATEPVC._serialized_start=1427
  _CREATEPVC._serialized_end=1655
  _DELETEPVC._serialized_start=1658
  _DELETEPVC._serialized_end=1817
  _NODESELECTOR._serialized_start=1819
  _NODESELECTOR._serialized_end=1938
  _NODESELECTOR_LABELSENTRY._serialized_start=1893
  _NODESELECTOR_LABELSENTRY._serialized_end=1938
  _PODMETADATA._serialized_start=1941
  _PODMETADATA._serialized_end=2177
  _PODMETADATA_LABELSENTRY._serialized_start=1893
  _PODMETADATA_LABELSENTRY._serialized_end=1938
  _PODMETADATA_ANNOTATIONSENTRY._serialized_start=2127
  _PODMETADATA_ANNOTATIONSENTRY._serialized_end=2177
  _CONFIGMAPASVOLUME._serialized_start=2179
  _CONFIGMAPASVOLUME._serialized_end=2279
  _CONFIGMAPASENV._serialized_start=2282
  _CONFIGMAPASENV._serialized_end=2461
  _CONFIGMAPASENV_CONFIGMAPKEYTOENVMAP._serialized_start=2398
  _CONFIGMAPASENV_CONFIGMAPKEYTOENVMAP._serialized_end=2461
  _GENERICEPHEMERALVOLUME._serialized_start=2464
  _GENERICEPHEMERALVOLUME._serialized_end=2671
  _IMAGEPULLSECRET._serialized_start=2673
  _IMAGEPULLSECRET._serialized_end=2711
  _FIELDPATHASENV._serialized_start=2713
  _FIELDPATHASENV._serialized_end=2763
  _TOLERATION._serialized_start=2766
  _TOLERATION._serialized_end=2896
  _SELECTORREQUIREMENT._serialized_start=2898
  _SELECTORREQUIREMENT._serialized_end=2966
  _NODEAFFINITYTERM._serialized_start=2969
  _NODEAFFINITYTERM._serialized_end=3142
  _PODAFFINITYTERM._serialized_start=3145
  _PODAFFINITYTERM._serialized_end=3692
  _PODAFFINITYTERM_MATCHPODLABELSENTRY._serialized_start=3558
  _PODAFFINITYTERM_MATCHPODLABELSENTRY._serialized_end=3611
  _PODAFFINITYTERM_MATCHNAMESPACELABELSENTRY._serialized_start=3613
  _PODAFFINITYTERM_MATCHNAMESPACELABELSENTRY._serialized_end=3672
# @@protoc_insertion_point(module_scope)
