import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class LoadedDriver(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType = char
    BYTE: ghidra.program.model.data.DataType = byte
    DWORD: ghidra.program.model.data.DataType = dword
    IBO32: ghidra.program.model.data.DataType = IBO32DataType: typedef ImageBaseOffset32 pointer32
    IBO64: ghidra.program.model.data.DataType = IBO64DataType: typedef ImageBaseOffset64 pointer64
    NAME: unicode = u'_KLDR_DATA_TABLE_ENTRY'
    POINTER: ghidra.program.model.data.DataType = pointer
    QWORD: ghidra.program.model.data.DataType = qword
    SLEB128: ghidra.program.model.data.SignedLeb128DataType = sleb128
    STRING: ghidra.program.model.data.DataType = string
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType = uleb128
    UTF16: ghidra.program.model.data.DataType = unicode
    UTF8: ghidra.program.model.data.DataType = string-utf8
    VOID: ghidra.program.model.data.DataType = void
    WORD: ghidra.program.model.data.DataType = word







    def equals(self, __a0: object) -> bool: ...

    def getBaseDllName(self) -> long: ...

    def getBuildFileHash(self) -> long: ...

    def getCheckSum(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getDllBase(self) -> long: ...

    def getEntryPoint(self) -> long: ...

    def getFlags(self) -> int: ...

    def getFullDllName(self) -> long: ...

    def getLoadCount(self) -> int: ...

    def getNameOffset(self) -> int: ...

    def getSizeOfImage(self) -> long: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setBaseDllName(self, __a0: long) -> None: ...

    def setBuildFileHash(self, __a0: long) -> None: ...

    def setCheckSum(self, __a0: int) -> None: ...

    def setDllBase(self, __a0: long) -> None: ...

    def setEntryPoint(self, __a0: long) -> None: ...

    def setFlags(self, __a0: int) -> None: ...

    def setFullDllName(self, __a0: long) -> None: ...

    def setLoadCount(self, __a0: int) -> None: ...

    def setNameOffset(self, __a0: int) -> None: ...

    def setSizeOfImage(self, __a0: long) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def baseDllName(self) -> long: ...

    @baseDllName.setter
    def baseDllName(self, value: long) -> None: ...

    @property
    def buildFileHash(self) -> long: ...

    @buildFileHash.setter
    def buildFileHash(self, value: long) -> None: ...

    @property
    def checkSum(self) -> int: ...

    @checkSum.setter
    def checkSum(self, value: int) -> None: ...

    @property
    def dllBase(self) -> long: ...

    @dllBase.setter
    def dllBase(self, value: long) -> None: ...

    @property
    def entryPoint(self) -> long: ...

    @entryPoint.setter
    def entryPoint(self, value: long) -> None: ...

    @property
    def flags(self) -> int: ...

    @flags.setter
    def flags(self, value: int) -> None: ...

    @property
    def fullDllName(self) -> long: ...

    @fullDllName.setter
    def fullDllName(self, value: long) -> None: ...

    @property
    def loadCount(self) -> int: ...

    @loadCount.setter
    def loadCount(self, value: int) -> None: ...

    @property
    def nameOffset(self) -> int: ...

    @nameOffset.setter
    def nameOffset(self, value: int) -> None: ...

    @property
    def sizeOfImage(self) -> long: ...

    @sizeOfImage.setter
    def sizeOfImage(self, value: long) -> None: ...