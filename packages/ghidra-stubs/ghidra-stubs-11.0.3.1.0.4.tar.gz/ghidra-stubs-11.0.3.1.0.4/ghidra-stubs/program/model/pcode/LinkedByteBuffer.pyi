import ghidra.program.model.pcode
import ghidra.program.model.pcode.LinkedByteBuffer
import java.io
import java.lang


class LinkedByteBuffer(object):
    BUFFER_SIZE: int = 1024




    class ArrayIter(object):
        array: List[int]
        next: ghidra.program.model.pcode.LinkedByteBuffer.ArrayIter



        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class Position(object):
        array: List[int]
        current: int
        seqIter: ghidra.program.model.pcode.LinkedByteBuffer.ArrayIter



        def __init__(self): ...



        def advancePosition(self, __a0: int) -> None: ...

        def copy(self, __a0: ghidra.program.model.pcode.LinkedByteBuffer.Position) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getByte(self) -> int: ...

        def getBytePlus1(self) -> int: ...

        def getClass(self) -> java.lang.Class: ...

        def getNextByte(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def byte(self) -> int: ...

        @property
        def bytePlus1(self) -> int: ...

        @property
        def nextByte(self) -> int: ...

    def __init__(self, max: int, src: unicode): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getStartPosition(self, position: ghidra.program.model.pcode.LinkedByteBuffer.Position) -> None: ...

    def hashCode(self) -> int: ...

    def ingestStream(self, stream: java.io.InputStream) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def pad(self, val: int) -> None:
        """
        Add a particular byte to the buffer
        @param val is the byte value to add
        """
        ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

