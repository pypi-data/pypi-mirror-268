from typing import List
import ghidra.app.plugin.processors.sleigh
import ghidra.pcode.emu.sys
import ghidra.pcode.emu.unix
import ghidra.pcode.exec
import ghidra.program.model.lang
import ghidra.program.model.listing
import java.lang
import java.lang.reflect
import java.util


class AbstractEmuUnixSyscallUseropLibrary(ghidra.pcode.emu.sys.AnnotatedEmuSyscallUseropLibrary):





    class Errno(java.lang.Enum):
        EBADF: ghidra.pcode.emu.unix.AbstractEmuUnixSyscallUseropLibrary.Errno = EBADF







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.pcode.emu.unix.AbstractEmuUnixSyscallUseropLibrary.Errno: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.pcode.emu.unix.AbstractEmuUnixSyscallUseropLibrary.Errno]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self, __a0: ghidra.pcode.emu.PcodeMachine, __a1: ghidra.pcode.emu.unix.EmuUnixFileSystem, __a2: ghidra.program.model.listing.Program): ...

    @overload
    def __init__(self, __a0: ghidra.pcode.emu.PcodeMachine, __a1: ghidra.pcode.emu.unix.EmuUnixFileSystem, __a2: ghidra.program.model.listing.Program, __a3: ghidra.pcode.emu.unix.EmuUnixUser): ...



    def compose(self, __a0: ghidra.pcode.exec.PcodeUseropLibrary) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getOperandType(__a0: java.lang.Class) -> java.lang.reflect.Type: ...

    def getSymbols(self, __a0: ghidra.app.plugin.processors.sleigh.SleighLanguage) -> java.util.Map: ...

    def getSyscallUserop(self) -> ghidra.pcode.exec.PcodeUseropLibrary.PcodeUseropDefinition: ...

    def getSyscalls(self) -> java.util.Map: ...

    def getUserops(self) -> java.util.Map: ...

    def handleError(self, __a0: ghidra.pcode.exec.PcodeExecutor, __a1: ghidra.pcode.exec.PcodeExecutionException) -> bool: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def loadSyscallConventionMap(__a0: ghidra.program.model.listing.Program) -> java.util.Map: ...

    @staticmethod
    def loadSyscallFunctionMap(__a0: ghidra.program.model.listing.Program) -> java.util.Map: ...

    @overload
    @staticmethod
    def loadSyscallNumberMap(__a0: unicode) -> java.util.Map: ...

    @overload
    @staticmethod
    def loadSyscallNumberMap(__a0: ghidra.program.model.listing.Program) -> java.util.Map: ...

    def newBoundSyscall(self, __a0: ghidra.pcode.exec.PcodeUseropLibrary.PcodeUseropDefinition, __a1: ghidra.program.model.lang.PrototypeModel) -> ghidra.pcode.emu.sys.UseropEmuSyscallDefinition: ...

    @staticmethod
    def nil() -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def putDescriptor(self, __a0: int, __a1: ghidra.pcode.emu.unix.EmuUnixFileDescriptor) -> ghidra.pcode.emu.unix.EmuUnixFileDescriptor: ...

    def readSyscallNumber(self, __a0: ghidra.pcode.exec.PcodeExecutorState, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> long: ...

    def syscall(self, __a0: ghidra.pcode.exec.PcodeExecutor, __a1: ghidra.pcode.exec.PcodeUseropLibrary) -> None: ...

    def toString(self) -> unicode: ...

    def unix_close(self, __a0: object) -> object: ...

    def unix_exit(self, __a0: object) -> object: ...

    def unix_group_exit(self, __a0: object) -> None: ...

    def unix_open(self, __a0: ghidra.pcode.exec.PcodeExecutorState, __a1: object, __a2: object, __a3: object) -> object: ...

    def unix_read(self, __a0: ghidra.pcode.exec.PcodeExecutorState, __a1: object, __a2: object, __a3: object) -> object: ...

    def unix_write(self, __a0: ghidra.pcode.exec.PcodeExecutorState, __a1: object, __a2: object, __a3: object) -> object: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

