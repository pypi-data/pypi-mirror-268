from typing import List
import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang
import java.util


class FullDumpHeader(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType = char
    BYTE: ghidra.program.model.data.DataType = byte
    DWORD: ghidra.program.model.data.DataType = dword
    IBO32: ghidra.program.model.data.DataType = IBO32DataType: typedef ImageBaseOffset32 pointer32
    IBO64: ghidra.program.model.data.DataType = IBO64DataType: typedef ImageBaseOffset64 pointer64
    NAME: unicode = u'PAGEDUMP_FULL'
    POINTER: ghidra.program.model.data.DataType = pointer
    QWORD: ghidra.program.model.data.DataType = qword
    SIGNATURE: int = 1162297680
    SLEB128: ghidra.program.model.data.SignedLeb128DataType = sleb128
    STRING: ghidra.program.model.data.DataType = string
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType = uleb128
    UTF16: ghidra.program.model.data.DataType = unicode
    UTF8: ghidra.program.model.data.DataType = string-utf8
    VOID: ghidra.program.model.data.DataType = void
    WORD: ghidra.program.model.data.DataType = word







    def PFN2RVA(self, __a0: int) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getBitmapSize(self) -> long: ...

    def getBuffer(self) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getDumpOptions(self) -> long: ...

    def getHeaderSize(self) -> long: ...

    def getPages(self) -> long: ...

    def getSignature(self) -> int: ...

    def getValidDump(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def pfnKeySet(self) -> java.util.Set: ...

    def setBitmapSize(self, __a0: long) -> None: ...

    def setBuffer(self, __a0: List[int]) -> None: ...

    def setDumpOptions(self, __a0: long) -> None: ...

    def setHeaderSize(self, __a0: long) -> None: ...

    def setPages(self, __a0: long) -> None: ...

    def setSignature(self, __a0: int) -> None: ...

    def setValidDump(self, __a0: int) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def bitmapSize(self) -> long: ...

    @bitmapSize.setter
    def bitmapSize(self, value: long) -> None: ...

    @property
    def buffer(self) -> List[int]: ...

    @buffer.setter
    def buffer(self, value: List[int]) -> None: ...

    @property
    def dumpOptions(self) -> long: ...

    @dumpOptions.setter
    def dumpOptions(self, value: long) -> None: ...

    @property
    def headerSize(self) -> long: ...

    @headerSize.setter
    def headerSize(self, value: long) -> None: ...

    @property
    def pages(self) -> long: ...

    @pages.setter
    def pages(self, value: long) -> None: ...

    @property
    def signature(self) -> int: ...

    @signature.setter
    def signature(self, value: int) -> None: ...

    @property
    def validDump(self) -> int: ...

    @validDump.setter
    def validDump(self, value: int) -> None: ...