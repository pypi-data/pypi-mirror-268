import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class TriageStorage(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType = char
    BYTE: ghidra.program.model.data.DataType = byte
    DWORD: ghidra.program.model.data.DataType = dword
    IBO32: ghidra.program.model.data.DataType = IBO32DataType: typedef ImageBaseOffset32 pointer32
    IBO64: ghidra.program.model.data.DataType = IBO64DataType: typedef ImageBaseOffset64 pointer64
    NAME: unicode = u'_MI_TRIAGE_STORAGE'
    POINTER: ghidra.program.model.data.DataType = pointer
    QWORD: ghidra.program.model.data.DataType = qword
    SLEB128: ghidra.program.model.data.SignedLeb128DataType = sleb128
    STRING: ghidra.program.model.data.DataType = string
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType = uleb128
    UTF16: ghidra.program.model.data.DataType = unicode
    UTF8: ghidra.program.model.data.DataType = string-utf8
    VOID: ghidra.program.model.data.DataType = void
    WORD: ghidra.program.model.data.DataType = word







    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getCommitedPages(self) -> long: ...

    def getCommitedPagesMaximum(self) -> long: ...

    def getCommitedPagesPeak(self) -> long: ...

    def getKernelVerifier(self) -> int: ...

    def getMiTriageActionTaken(self) -> int: ...

    def getMmAllocatedNonPagedPool(self) -> long: ...

    def getMmMaximumNonPagedPool(self) -> long: ...

    def getMmSpecialPoolTag(self) -> int: ...

    def getMmVerifyDriverLevel(self) -> int: ...

    def getPagePoolAllocated(self) -> long: ...

    def getPagedPoolMaximum(self) -> long: ...

    def getSize(self) -> int: ...

    def getVersion(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setCommitedPages(self, __a0: long) -> None: ...

    def setCommitedPagesMaximum(self, __a0: long) -> None: ...

    def setCommitedPagesPeak(self, __a0: long) -> None: ...

    def setKernelVerifier(self, __a0: int) -> None: ...

    def setMiTriageActionTaken(self, __a0: int) -> None: ...

    def setMmAllocatedNonPagedPool(self, __a0: long) -> None: ...

    def setMmMaximumNonPagedPool(self, __a0: long) -> None: ...

    def setMmSpecialPoolTag(self, __a0: int) -> None: ...

    def setMmVerifyDriverLevel(self, __a0: int) -> None: ...

    def setPagePoolAllocated(self, __a0: long) -> None: ...

    def setPagedPoolMaximum(self, __a0: long) -> None: ...

    def setSize(self, __a0: int) -> None: ...

    def setVersion(self, __a0: int) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def commitedPages(self) -> long: ...

    @commitedPages.setter
    def commitedPages(self, value: long) -> None: ...

    @property
    def commitedPagesMaximum(self) -> long: ...

    @commitedPagesMaximum.setter
    def commitedPagesMaximum(self, value: long) -> None: ...

    @property
    def commitedPagesPeak(self) -> long: ...

    @commitedPagesPeak.setter
    def commitedPagesPeak(self, value: long) -> None: ...

    @property
    def kernelVerifier(self) -> int: ...

    @kernelVerifier.setter
    def kernelVerifier(self, value: int) -> None: ...

    @property
    def miTriageActionTaken(self) -> int: ...

    @miTriageActionTaken.setter
    def miTriageActionTaken(self, value: int) -> None: ...

    @property
    def mmAllocatedNonPagedPool(self) -> long: ...

    @mmAllocatedNonPagedPool.setter
    def mmAllocatedNonPagedPool(self, value: long) -> None: ...

    @property
    def mmMaximumNonPagedPool(self) -> long: ...

    @mmMaximumNonPagedPool.setter
    def mmMaximumNonPagedPool(self, value: long) -> None: ...

    @property
    def mmSpecialPoolTag(self) -> int: ...

    @mmSpecialPoolTag.setter
    def mmSpecialPoolTag(self, value: int) -> None: ...

    @property
    def mmVerifyDriverLevel(self) -> int: ...

    @mmVerifyDriverLevel.setter
    def mmVerifyDriverLevel(self, value: int) -> None: ...

    @property
    def pagePoolAllocated(self) -> long: ...

    @pagePoolAllocated.setter
    def pagePoolAllocated(self, value: long) -> None: ...

    @property
    def pagedPoolMaximum(self) -> long: ...

    @pagedPoolMaximum.setter
    def pagedPoolMaximum(self, value: long) -> None: ...

    @property
    def size(self) -> int: ...

    @size.setter
    def size(self, value: int) -> None: ...

    @property
    def version(self) -> int: ...

    @version.setter
    def version(self, value: int) -> None: ...