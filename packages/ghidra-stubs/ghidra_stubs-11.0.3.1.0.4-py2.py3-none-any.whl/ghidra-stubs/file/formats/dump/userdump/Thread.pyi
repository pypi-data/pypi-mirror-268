import ghidra.app.util.bin
import ghidra.program.model.data
import java.lang


class Thread(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType = char
    BYTE: ghidra.program.model.data.DataType = byte
    DWORD: ghidra.program.model.data.DataType = dword
    IBO32: ghidra.program.model.data.DataType = IBO32DataType: typedef ImageBaseOffset32 pointer32
    IBO64: ghidra.program.model.data.DataType = IBO64DataType: typedef ImageBaseOffset64 pointer64
    NAME: unicode = u'THREAD'
    POINTER: ghidra.program.model.data.DataType = pointer
    QWORD: ghidra.program.model.data.DataType = qword
    SLEB128: ghidra.program.model.data.SignedLeb128DataType = sleb128
    STRING: ghidra.program.model.data.DataType = string
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType = uleb128
    UTF16: ghidra.program.model.data.DataType = unicode
    UTF8: ghidra.program.model.data.DataType = string-utf8
    VOID: ghidra.program.model.data.DataType = void
    WORD: ghidra.program.model.data.DataType = word



    def __init__(self, __a0: ghidra.file.formats.dump.DumpFileReader, __a1: long): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getContextDataSize(self) -> int: ...

    def getContextRVA(self) -> int: ...

    def getPlatformId(self) -> int: ...

    def getPriority(self) -> int: ...

    def getPriorityClass(self) -> int: ...

    def getStackDataSize(self) -> long: ...

    def getStackRVA(self) -> int: ...

    def getStackStartOfMemoryRange(self) -> long: ...

    def getSuspendCount(self) -> int: ...

    def getTeb(self) -> long: ...

    def getThreadId(self) -> int: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setContextDataSize(self, __a0: int) -> None: ...

    def setContextRVA(self, __a0: int) -> None: ...

    def setPlatformId(self, __a0: int) -> None: ...

    def setPriority(self, __a0: int) -> None: ...

    def setPriorityClass(self, __a0: int) -> None: ...

    def setStackDataSize(self, __a0: long) -> None: ...

    def setStackRVA(self, __a0: int) -> None: ...

    def setStackStartOfMemoryRange(self, __a0: long) -> None: ...

    def setSuspendCount(self, __a0: int) -> None: ...

    def setTeb(self, __a0: long) -> None: ...

    def setThreadId(self, __a0: int) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def contextDataSize(self) -> int: ...

    @contextDataSize.setter
    def contextDataSize(self, value: int) -> None: ...

    @property
    def contextRVA(self) -> int: ...

    @contextRVA.setter
    def contextRVA(self, value: int) -> None: ...

    @property
    def platformId(self) -> int: ...

    @platformId.setter
    def platformId(self, value: int) -> None: ...

    @property
    def priority(self) -> int: ...

    @priority.setter
    def priority(self, value: int) -> None: ...

    @property
    def priorityClass(self) -> int: ...

    @priorityClass.setter
    def priorityClass(self, value: int) -> None: ...

    @property
    def stackDataSize(self) -> long: ...

    @stackDataSize.setter
    def stackDataSize(self, value: long) -> None: ...

    @property
    def stackRVA(self) -> int: ...

    @stackRVA.setter
    def stackRVA(self, value: int) -> None: ...

    @property
    def stackStartOfMemoryRange(self) -> long: ...

    @stackStartOfMemoryRange.setter
    def stackStartOfMemoryRange(self, value: long) -> None: ...

    @property
    def suspendCount(self) -> int: ...

    @suspendCount.setter
    def suspendCount(self, value: int) -> None: ...

    @property
    def teb(self) -> long: ...

    @teb.setter
    def teb(self, value: long) -> None: ...

    @property
    def threadId(self) -> int: ...

    @threadId.setter
    def threadId(self, value: int) -> None: ...