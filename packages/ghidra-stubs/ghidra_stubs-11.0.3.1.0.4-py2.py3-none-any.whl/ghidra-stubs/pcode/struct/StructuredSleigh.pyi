from typing import List
import ghidra.pcode.exec
import ghidra.pcode.struct
import java.io
import java.lang
import java.lang.reflect
import java.util


class StructuredSleigh(object):





    class WrapIf(object):








        def _elif(self, __a0: ghidra.pcode.struct.Expr, __a1: java.lang.Runnable) -> ghidra.pcode.struct.StructuredSleigh.WrapIf: ...

        def _else(self, __a0: java.lang.Runnable) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class StructuredSleighError(java.lang.RuntimeException):








        def addSuppressed(self, __a0: java.lang.Throwable) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fillInStackTrace(self) -> java.lang.Throwable: ...

        def getCause(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def getLocalizedMessage(self) -> unicode: ...

        def getMessage(self) -> unicode: ...

        def getStackTrace(self) -> List[java.lang.StackTraceElement]: ...

        def getSuppressed(self) -> List[java.lang.Throwable]: ...

        def hashCode(self) -> int: ...

        def initCause(self, __a0: java.lang.Throwable) -> java.lang.Throwable: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def printStackTrace(self) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintStream) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintWriter) -> None: ...

        def setStackTrace(self, __a0: List[java.lang.StackTraceElement]) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def e(self, __a0: unicode) -> ghidra.pcode.struct.Expr: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def generate(self) -> java.util.Map: ...

    @overload
    def generate(self, __a0: java.lang.reflect.Method) -> ghidra.pcode.exec.SleighPcodeUseropDefinition: ...

    @overload
    def generate(self, __a0: java.util.Map) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def s(self, __a0: unicode) -> ghidra.pcode.struct.StructuredSleigh.Stmt: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

