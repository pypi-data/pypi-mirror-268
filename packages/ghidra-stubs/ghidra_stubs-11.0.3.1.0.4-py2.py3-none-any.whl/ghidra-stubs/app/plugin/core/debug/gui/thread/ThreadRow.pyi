import ghidra.app.plugin.core.debug.gui.thread
import ghidra.trace.model
import ghidra.trace.model.thread
import java.lang


class ThreadRow(object):




    def __init__(self, __a0: ghidra.app.plugin.core.debug.gui.thread.DebuggerThreadsProvider, __a1: ghidra.trace.model.thread.TraceThread): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self) -> unicode: ...

    def getCreationSnap(self) -> long: ...

    def getDestructionSnap(self) -> unicode: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getName(self) -> unicode: ...

    def getState(self) -> ghidra.app.plugin.core.debug.gui.thread.ThreadState: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setComment(self, __a0: unicode) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def comment(self) -> unicode: ...

    @comment.setter
    def comment(self, value: unicode) -> None: ...

    @property
    def creationSnap(self) -> long: ...

    @property
    def destructionSnap(self) -> unicode: ...

    @property
    def lifespan(self) -> ghidra.trace.model.Lifespan: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def state(self) -> ghidra.app.plugin.core.debug.gui.thread.ThreadState: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceThread: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...