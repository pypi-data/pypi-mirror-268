import pandas as pd
import itertools
import json
from google.oauth2.service_account import Credentials
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import (
    DateRange,
    Dimension,
    Metric,
    RunReportRequest,
    GetMetadataRequest,
)

# https://medium.com/@tmmylo1021/extract-google-analytics-data-with-python-221626ed8975
# https://www.lupagedigital.com/blog/google-analytics-api-python/
# Connector assumes u have a keyfile
# !pip install google-analytics-data
# !pip install google-oauth2-tool


class Ga4:
    def __init__(
        self,
        property_id: int,
        key_file_location: str = None,
        service_account_info: str = None,
        get_metadata: bool = False,
    ):
        """
        Summary:
            Initialize a Google Analytics 4 connection. Choose to authenticate by supplying either a key file location or the contents of the key file as 'service_account_info'. If both are supplied, key file is used.

        Args:
            key_file_location (str): Path to the keyfile generated by Google Cloud.
            service_account_info (str): Contents of the keyfile generated by Google Cloud.
            property_id (int): Id of the Google Analytics property you wish to connect to.
            get_metadata (bool): Prints list of metadata (available metrics and dimensions) on successful initialization.
        """
        self.property_id = property_id

        if key_file_location is None and service_account_info is None:
            raise Exception(
                "Provide a key file or service account info string to authenticate."
            )

        if key_file_location:
            credentials = Credentials.from_service_account_file(key_file_location)
        elif service_account_info:
            credentials = Credentials.from_service_account_info(
                json.loads(service_account_info)
            )

        self.client = BetaAnalyticsDataClient(credentials=credentials)

        if get_metadata:
            metadata_api = GetMetadataRequest(
                name=f"properties/{self.property_id}/metadata"
            )
            response = self.client.get_metadata(request=metadata_api)
            print(response)

    def get_data(
        self, starting_date: str, ending_date: str, dimensions: list, metrics: list
    ) -> pd.DataFrame:
        """
        Summary:
            Retrieve data from Google Analytics Data API by specifying a date range,
            and the dimension(s) and metric(s) that you wish to retrieve.

        Args:
            starting_date (str): Starting date in format of YYYY-MM-DD, NdaysAgo, yesterday, or today.
            ending_date (str): Ending date in format of YYYY-MM-DD, NdaysAgo, yesterday, or today.
            dimensions (list): One or multiple dimensions to aggregate on.
            metrics (list): One or multiple metrics aggregate on.

        Returns:
            Dictionary: Results from the Google Analytics Data API.
        """
        request_api = RunReportRequest(
            property=f"properties/{self.property_id}",
            dimensions=[Dimension(name=dimension) for dimension in dimensions],
            metrics=[Metric(name=metric) for metric in metrics],
            date_ranges=[DateRange(start_date=starting_date, end_date=ending_date)],
        )
        response = self.client.run_report(request_api)
        return self._query_data(response)

    def _query_data(self, api_response: dict) -> pd.DataFrame:
        """
        Summary:
            Converts a Google Analytics Data API report response to a DataFrame.

        Args:
            api_response (dict): Response of the RunReportRequest function of the Google Analytics Data API.

        Returns:
            DataFrame: Row based orientation of the dimensions and metrics.
        """
        dimension_headers = [header.name for header in api_response.dimension_headers]
        metric_headers = [header.name for header in api_response.metric_headers]
        dimensions = []
        metrics = []
        for i in range(len(dimension_headers)):
            dimensions.append(
                [row.dimension_values[i].value for row in api_response.rows]
            )
        dimensions
        for i in range(len(metric_headers)):
            metrics.append([row.metric_values[i].value for row in api_response.rows])
        headers = dimension_headers, metric_headers
        headers = list(itertools.chain.from_iterable(headers))
        data = dimensions, metrics
        data = list(itertools.chain.from_iterable(data))
        df = pd.DataFrame(data)
        df = df.transpose()
        df.columns = headers
        return df
