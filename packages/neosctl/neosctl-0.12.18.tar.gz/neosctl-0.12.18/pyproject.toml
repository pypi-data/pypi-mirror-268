[tool.poetry]
name = "neosctl"
version = "0.12.18"
description = "NEOS Core CLI"
authors = []
license = "closed"
repository="https://github.com/NEOS-Critical/neos-platform-cli"
homepage="https://github.com/NEOS-Critical/neos-platform-cli"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.9"

httpx = "^0.25"
typer = "^0.12"
typing_extensions = { version = "^4.7.0", python = "<3.10" }
jq = { version = "^1.4.0", markers = "sys_platform != 'win32'" }
minio = "^7.1.14"
pydantic = "^2"
tabulate = "^0.9.0"
rtoml = "^0.10.0"
rich = "^13.7.1"
neos-common = "^0.12.0"

[tool.poetry.group.dev.dependencies]

# Tests
freezegun = "^1.2.1"
pretend = "^1.0.9"
pytest = "~7.1.2"
pytest-asyncio = "^0.18.3"
pytest-benchmark = "^3.4.1"
pytest-cov = "^3.0.0"
pytest-env = "^0.8.1"
pytest-random-order = "^1.0.4"
requests = "^2.28.1"
pytest-httpx = "^0.27"

# Style
ruff = "^0.3.0"
pre-commit = "^3.0.2"
pyright = "^1.1.293"

# Releases
changelog-gen = {version = "^0.9", extras = ["bump-my-version"]}

# Docs
pdoc = "^14.1.0"

[tool.bumpversion]
current_version = "0.12.18"
commit = true
tag = true

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "README.md"

[tool.changelog_gen]
release = true
commit = true
reject_empty = true
allowed_branches = [
    "main",
]
date_format = "(released %Y-%m-%d)"
issue_link = "https://neom.atlassian.net/browse/::issue_ref::"
commit_link = "https://github.com/NEOS-Critical/neos-platform-cli/commit/::commit_hash::"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "--random-order"
env = [
]
markers = [
    "nodotfile_patch: don't auto patch a dotfile into existence",
    "nocredential_patch: don't auto patch a credential file into existence",
]


[tool.coverage.report]
sort = "cover"
fail_under = 98
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == '__main__':",
    "@abc.abstractmethod"
]

[tool.coverage.run]
branch = true
source = ["neosctl"]

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "B008",     # typer involves a lot of function calls in function definitions
    "PLR0913",  # too many arguments to a function call
    "TCH",      # typechecking blocks break tests
    "FBT003",   # typer default + args, breaks FBT003
    "W291",     # Don't enforce whitespace, handled in pre-commit
    "FIX",      # allow TODOs
    "FA",
    "TD002",    # REMOVE: support author/links
    "TD003",    # REMOVE: support author/links
    "ANN101",   # REMOVE: type annotation on self
]

[tool.ruff.format]
line-ending = "lf"
quote-style = "double"

[tool.ruff.lint.per-file-ignores]
"neosctl/*"= [
    "D104",  # Ignore public __init__ missing docstring.
]
"neosctl/schema.py" = [
    "D101",  # ignore docstrings on pydantic models
]
"neosctl/services/gateway/schema.py" = [
    "D101",  # ignore docstrings on pydantic models
]
"neosctl/services/iam/schema.py" = [
    "D101",  # ignore docstrings on pydantic models
]
"neosctl/services/registry/schema.py" = [
    "D101",  # ignore docstrings on pydantic models
]
"tasks.py" = ["ANN", "INP001", "E501", "S"]
"tests/*" = [
    "ANN",  # skip annotation in tests
    "D",  # skip docstrings in tests
    "S101",  # allow assert statements
    "S105",
    "S106",
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = [
    "classmethod",
    "pydantic.field_validator",
    "pydantic.model_validator",
]

[tool.pyright]
include = ["neosctl"]
exclude = [
    "tests/*",
]

[tool.poetry.scripts]
neosctl = "neosctl.cli:app"

[build-system]
requires = ["poetry-core>=1.0,<=1.6.2"]
build-backend = "poetry.core.masonry.api"
