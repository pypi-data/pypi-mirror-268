window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "formulaic_mechanics", "modulename": "formulaic_mechanics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus", "modulename": "formulaic_mechanics.corpus", "kind": "module", "doc": "<p>Main class for all Corpus functions.</p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.__init__", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "formulaic_mechanics.corpus.Corpus.corpus", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.corpus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.bigrams", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.bigrams", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.book_counts", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.book_counts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.iliad_lexical_diversity", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.iliad_lexical_diversity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.odyssey_lexical_diversity", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.odyssey_lexical_diversity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.proper_nouns", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.proper_nouns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.proper_noun_lines", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.proper_noun_lines", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.iliad2", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.iliad2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.iliad2_catalogue", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.iliad2_catalogue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.iliad2_not_catalogue", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.iliad2_not_catalogue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.corpus.Corpus.count_phrase_occurrences", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.count_phrase_occurrences", "kind": "function", "doc": "<p>Counts how many times a phrase appears in the corpus.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>phrase : String\n    phrase to search for</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>int\n    number of times phrase appears in corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">phrase</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.corpus.Corpus.find_occurrences", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.find_occurrences", "kind": "function", "doc": "<p>Finds occurrences of a phrase  in the corpus.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>phrase : String\n    phrase to search for\nprint_lines : Boolean (False)\n    if True, print out list of occurrences</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains locations of each occurrence of target phrase</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">phrase</span>, </span><span class=\"param\"><span class=\"n\">print_lines</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.corpus.Corpus.count_previous_meters", "modulename": "formulaic_mechanics.corpus", "qualname": "Corpus.count_previous_meters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target_meter</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.create_corpora", "modulename": "formulaic_mechanics.create_corpora", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.create_corpora.clean_raw_greek_files", "modulename": "formulaic_mechanics.create_corpora.clean_raw_greek_files", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.create_corpora.clean_raw_greek_files.clean_raw_greek_files", "modulename": "formulaic_mechanics.create_corpora.clean_raw_greek_files", "qualname": "clean_raw_greek_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter", "modulename": "formulaic_mechanics.create_corpora.hexameter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.LONG", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "LONG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;+&#x27;"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.SHORT", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "SHORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;-&#x27;"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.INDETERMINATE", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "INDETERMINATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;?&#x27;"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.LONG_CORREPTION", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "LONG_CORREPTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;C&#x27;"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.INDETERMINATE_CORREPTION", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "INDETERMINATE_CORREPTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;c&#x27;"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.SHORT_SYNIZESIS", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "SHORT_SYNIZESIS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;,&#x27;"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.SKIPPED", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "SKIPPED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.&#x27;"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.FOOT", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "FOOT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;|&#x27;"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.LONG_SYLLABLES", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "LONG_SYLLABLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;]"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.SHORT_SYLLABLES", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "SHORT_SYLLABLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;]"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.CORREPTED_SYLLABLES", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "CORREPTED_SYLLABLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;C&#x27;]"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.CORREPTED_SYNIZESIS", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "CORREPTED_SYNIZESIS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;C&#x27;, &#x27;c&#x27;]"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.SYNIZESIS_SYLLABLES", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "SYNIZESIS_SYLLABLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;,&#x27;]"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ALL_SYLLABLES", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ALL_SYLLABLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;]"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.TRANSITION_TABLE", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.TRANSITION_TABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "[(0, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 1, 0, &#x27;+&#x27;), (0, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 1, 15, &#x27;+&#x27;), (0, [&#x27;,&#x27;], 3, 1, &#x27;.&#x27;), (3, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 1, 0, &#x27;+&#x27;), (1, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 7, 0, &#x27;+|&#x27;), (1, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 7, 15, &#x27;+|&#x27;), (1, [&#x27;,&#x27;], 4, 1, &#x27;.&#x27;), (4, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 7, 0, &#x27;+|&#x27;), (1, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 2, 0, &#x27;-&#x27;), (1, [&#x27;C&#x27;], 2, 1, &#x27;-&#x27;), (1, [&#x27;,&#x27;], 5, 1, &#x27;.&#x27;), (5, [&#x27;C&#x27;, &#x27;c&#x27;], 2, 1, &#x27;-&#x27;), (2, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 7, 0, &#x27;-|&#x27;), (2, [&#x27;C&#x27;], 7, 1, &#x27;-|&#x27;), (2, [&#x27;,&#x27;], 6, 1, &#x27;.&#x27;), (6, [&#x27;C&#x27;, &#x27;c&#x27;], 7, 1, &#x27;-|&#x27;), (7, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 8, 0, &#x27;+&#x27;), (7, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 8, 15, &#x27;+&#x27;), (7, [&#x27;,&#x27;], 10, 1, &#x27;.&#x27;), (10, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 8, 0, &#x27;+&#x27;), (8, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 14, 0, &#x27;+|&#x27;), (8, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 14, 15, &#x27;+|&#x27;), (8, [&#x27;,&#x27;], 11, 1, &#x27;.&#x27;), (11, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 14, 0, &#x27;+|&#x27;), (8, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 9, 0, &#x27;-&#x27;), (8, [&#x27;C&#x27;], 9, 1, &#x27;-&#x27;), (8, [&#x27;,&#x27;], 12, 1, &#x27;.&#x27;), (12, [&#x27;C&#x27;, &#x27;c&#x27;], 9, 1, &#x27;-&#x27;), (9, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 14, 0, &#x27;-|&#x27;), (9, [&#x27;C&#x27;], 14, 1, &#x27;-|&#x27;), (9, [&#x27;,&#x27;], 13, 1, &#x27;.&#x27;), (13, [&#x27;C&#x27;, &#x27;c&#x27;], 14, 1, &#x27;-|&#x27;), (14, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 15, 0, &#x27;+&#x27;), (14, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 15, 15, &#x27;+&#x27;), (14, [&#x27;,&#x27;], 17, 1, &#x27;.&#x27;), (17, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 15, 0, &#x27;+&#x27;), (15, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 21, 0, &#x27;+|&#x27;), (15, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 21, 15, &#x27;+|&#x27;), (15, [&#x27;,&#x27;], 18, 1, &#x27;.&#x27;), (18, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 21, 0, &#x27;+|&#x27;), (15, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 16, 0, &#x27;-&#x27;), (15, [&#x27;C&#x27;], 16, 1, &#x27;-&#x27;), (15, [&#x27;,&#x27;], 19, 1, &#x27;.&#x27;), (19, [&#x27;C&#x27;, &#x27;c&#x27;], 16, 1, &#x27;-&#x27;), (16, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 21, 0, &#x27;-|&#x27;), (16, [&#x27;C&#x27;], 21, 1, &#x27;-|&#x27;), (16, [&#x27;,&#x27;], 20, 1, &#x27;.&#x27;), (20, [&#x27;C&#x27;, &#x27;c&#x27;], 21, 1, &#x27;-|&#x27;), (21, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 22, 0, &#x27;+&#x27;), (21, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 22, 15, &#x27;+&#x27;), (21, [&#x27;,&#x27;], 24, 1, &#x27;.&#x27;), (24, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 22, 0, &#x27;+&#x27;), (22, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 28, 0, &#x27;+|&#x27;), (22, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 28, 15, &#x27;+|&#x27;), (22, [&#x27;,&#x27;], 25, 1, &#x27;.&#x27;), (25, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 28, 0, &#x27;+|&#x27;), (22, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 23, 0, &#x27;-&#x27;), (22, [&#x27;C&#x27;], 23, 1, &#x27;-&#x27;), (22, [&#x27;,&#x27;], 26, 1, &#x27;.&#x27;), (26, [&#x27;C&#x27;, &#x27;c&#x27;], 23, 1, &#x27;-&#x27;), (23, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 28, 0, &#x27;-|&#x27;), (23, [&#x27;C&#x27;], 28, 1, &#x27;-|&#x27;), (23, [&#x27;,&#x27;], 27, 1, &#x27;.&#x27;), (27, [&#x27;C&#x27;, &#x27;c&#x27;], 28, 1, &#x27;-|&#x27;), (28, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 29, 0, &#x27;+&#x27;), (28, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 29, 15, &#x27;+&#x27;), (28, [&#x27;,&#x27;], 31, 1, &#x27;.&#x27;), (31, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 29, 0, &#x27;+&#x27;), (29, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 35, 1, &#x27;+|&#x27;), (29, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 35, 16, &#x27;+|&#x27;), (29, [&#x27;,&#x27;], 32, 1, &#x27;.&#x27;), (32, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 35, 1, &#x27;+|&#x27;), (29, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 30, 0, &#x27;-&#x27;), (29, [&#x27;C&#x27;], 30, 1, &#x27;-&#x27;), (29, [&#x27;,&#x27;], 33, 1, &#x27;.&#x27;), (33, [&#x27;C&#x27;, &#x27;c&#x27;], 30, 1, &#x27;-&#x27;), (30, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 35, 0, &#x27;-|&#x27;), (30, [&#x27;C&#x27;], 35, 1, &#x27;-|&#x27;), (30, [&#x27;,&#x27;], 34, 1, &#x27;.&#x27;), (34, [&#x27;C&#x27;, &#x27;c&#x27;], 35, 1, &#x27;-|&#x27;), (35, [&#x27;+&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;], 36, 0, &#x27;+&#x27;), (35, [&#x27;-&#x27;, &#x27;?&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 36, 15, &#x27;+&#x27;), (35, [&#x27;,&#x27;], 38, 1, &#x27;.&#x27;), (38, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 36, 0, &#x27;+&#x27;), (36, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 37, 0, &#x27;+&#x27;), (36, [&#x27;,&#x27;], 39, 1, &#x27;.&#x27;), (39, [&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;], 37, 0, &#x27;+&#x27;)]"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.START_STATE", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.START_STATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.ACCEPT_STATE", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.ACCEPT_STATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "37"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.transitions", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.transitions", "kind": "variable", "doc": "<p></p>\n", "default_value": "defaultdict(&lt;class &#x27;list&#x27;&gt;, {(0, &#x27;+&#x27;): [(1, 0, &#x27;+&#x27;)], (0, &#x27;?&#x27;): [(1, 0, &#x27;+&#x27;), (1, 15, &#x27;+&#x27;)], (0, &#x27;C&#x27;): [(1, 0, &#x27;+&#x27;)], (0, &#x27;c&#x27;): [(1, 0, &#x27;+&#x27;), (1, 15, &#x27;+&#x27;)], (0, &#x27;-&#x27;): [(1, 15, &#x27;+&#x27;)], (0, &#x27;,&#x27;): [(1, 15, &#x27;+&#x27;), (3, 1, &#x27;.&#x27;)], (3, &#x27;+&#x27;): [(1, 0, &#x27;+&#x27;)], (3, &#x27;-&#x27;): [(1, 0, &#x27;+&#x27;)], (3, &#x27;?&#x27;): [(1, 0, &#x27;+&#x27;)], (3, &#x27;C&#x27;): [(1, 0, &#x27;+&#x27;)], (3, &#x27;c&#x27;): [(1, 0, &#x27;+&#x27;)], (3, &#x27;,&#x27;): [(1, 0, &#x27;+&#x27;)], (1, &#x27;+&#x27;): [(7, 0, &#x27;+|&#x27;)], (1, &#x27;?&#x27;): [(7, 0, &#x27;+|&#x27;), (7, 15, &#x27;+|&#x27;), (2, 0, &#x27;-&#x27;)], (1, &#x27;C&#x27;): [(7, 0, &#x27;+|&#x27;), (2, 1, &#x27;-&#x27;)], (1, &#x27;c&#x27;): [(7, 0, &#x27;+|&#x27;), (7, 15, &#x27;+|&#x27;), (2, 0, &#x27;-&#x27;)], (1, &#x27;-&#x27;): [(7, 15, &#x27;+|&#x27;), (2, 0, &#x27;-&#x27;)], (1, &#x27;,&#x27;): [(7, 15, &#x27;+|&#x27;), (4, 1, &#x27;.&#x27;), (2, 0, &#x27;-&#x27;), (5, 1, &#x27;.&#x27;)], (4, &#x27;+&#x27;): [(7, 0, &#x27;+|&#x27;)], (4, &#x27;-&#x27;): [(7, 0, &#x27;+|&#x27;)], (4, &#x27;?&#x27;): [(7, 0, &#x27;+|&#x27;)], (4, &#x27;C&#x27;): [(7, 0, &#x27;+|&#x27;)], (4, &#x27;c&#x27;): [(7, 0, &#x27;+|&#x27;)], (4, &#x27;,&#x27;): [(7, 0, &#x27;+|&#x27;)], (5, &#x27;C&#x27;): [(2, 1, &#x27;-&#x27;)], (5, &#x27;c&#x27;): [(2, 1, &#x27;-&#x27;)], (2, &#x27;-&#x27;): [(7, 0, &#x27;-|&#x27;)], (2, &#x27;?&#x27;): [(7, 0, &#x27;-|&#x27;)], (2, &#x27;c&#x27;): [(7, 0, &#x27;-|&#x27;)], (2, &#x27;,&#x27;): [(7, 0, &#x27;-|&#x27;), (6, 1, &#x27;.&#x27;)], (2, &#x27;C&#x27;): [(7, 1, &#x27;-|&#x27;)], (6, &#x27;C&#x27;): [(7, 1, &#x27;-|&#x27;)], (6, &#x27;c&#x27;): [(7, 1, &#x27;-|&#x27;)], (7, &#x27;+&#x27;): [(8, 0, &#x27;+&#x27;)], (7, &#x27;?&#x27;): [(8, 0, &#x27;+&#x27;), (8, 15, &#x27;+&#x27;)], (7, &#x27;C&#x27;): [(8, 0, &#x27;+&#x27;)], (7, &#x27;c&#x27;): [(8, 0, &#x27;+&#x27;), (8, 15, &#x27;+&#x27;)], (7, &#x27;-&#x27;): [(8, 15, &#x27;+&#x27;)], (7, &#x27;,&#x27;): [(8, 15, &#x27;+&#x27;), (10, 1, &#x27;.&#x27;)], (10, &#x27;+&#x27;): [(8, 0, &#x27;+&#x27;)], (10, &#x27;-&#x27;): [(8, 0, &#x27;+&#x27;)], (10, &#x27;?&#x27;): [(8, 0, &#x27;+&#x27;)], (10, &#x27;C&#x27;): [(8, 0, &#x27;+&#x27;)], (10, &#x27;c&#x27;): [(8, 0, &#x27;+&#x27;)], (10, &#x27;,&#x27;): [(8, 0, &#x27;+&#x27;)], (8, &#x27;+&#x27;): [(14, 0, &#x27;+|&#x27;)], (8, &#x27;?&#x27;): [(14, 0, &#x27;+|&#x27;), (14, 15, &#x27;+|&#x27;), (9, 0, &#x27;-&#x27;)], (8, &#x27;C&#x27;): [(14, 0, &#x27;+|&#x27;), (9, 1, &#x27;-&#x27;)], (8, &#x27;c&#x27;): [(14, 0, &#x27;+|&#x27;), (14, 15, &#x27;+|&#x27;), (9, 0, &#x27;-&#x27;)], (8, &#x27;-&#x27;): [(14, 15, &#x27;+|&#x27;), (9, 0, &#x27;-&#x27;)], (8, &#x27;,&#x27;): [(14, 15, &#x27;+|&#x27;), (11, 1, &#x27;.&#x27;), (9, 0, &#x27;-&#x27;), (12, 1, &#x27;.&#x27;)], (11, &#x27;+&#x27;): [(14, 0, &#x27;+|&#x27;)], (11, &#x27;-&#x27;): [(14, 0, &#x27;+|&#x27;)], (11, &#x27;?&#x27;): [(14, 0, &#x27;+|&#x27;)], (11, &#x27;C&#x27;): [(14, 0, &#x27;+|&#x27;)], (11, &#x27;c&#x27;): [(14, 0, &#x27;+|&#x27;)], (11, &#x27;,&#x27;): [(14, 0, &#x27;+|&#x27;)], (12, &#x27;C&#x27;): [(9, 1, &#x27;-&#x27;)], (12, &#x27;c&#x27;): [(9, 1, &#x27;-&#x27;)], (9, &#x27;-&#x27;): [(14, 0, &#x27;-|&#x27;)], (9, &#x27;?&#x27;): [(14, 0, &#x27;-|&#x27;)], (9, &#x27;c&#x27;): [(14, 0, &#x27;-|&#x27;)], (9, &#x27;,&#x27;): [(14, 0, &#x27;-|&#x27;), (13, 1, &#x27;.&#x27;)], (9, &#x27;C&#x27;): [(14, 1, &#x27;-|&#x27;)], (13, &#x27;C&#x27;): [(14, 1, &#x27;-|&#x27;)], (13, &#x27;c&#x27;): [(14, 1, &#x27;-|&#x27;)], (14, &#x27;+&#x27;): [(15, 0, &#x27;+&#x27;)], (14, &#x27;?&#x27;): [(15, 0, &#x27;+&#x27;), (15, 15, &#x27;+&#x27;)], (14, &#x27;C&#x27;): [(15, 0, &#x27;+&#x27;)], (14, &#x27;c&#x27;): [(15, 0, &#x27;+&#x27;), (15, 15, &#x27;+&#x27;)], (14, &#x27;-&#x27;): [(15, 15, &#x27;+&#x27;)], (14, &#x27;,&#x27;): [(15, 15, &#x27;+&#x27;), (17, 1, &#x27;.&#x27;)], (17, &#x27;+&#x27;): [(15, 0, &#x27;+&#x27;)], (17, &#x27;-&#x27;): [(15, 0, &#x27;+&#x27;)], (17, &#x27;?&#x27;): [(15, 0, &#x27;+&#x27;)], (17, &#x27;C&#x27;): [(15, 0, &#x27;+&#x27;)], (17, &#x27;c&#x27;): [(15, 0, &#x27;+&#x27;)], (17, &#x27;,&#x27;): [(15, 0, &#x27;+&#x27;)], (15, &#x27;+&#x27;): [(21, 0, &#x27;+|&#x27;)], (15, &#x27;?&#x27;): [(21, 0, &#x27;+|&#x27;), (21, 15, &#x27;+|&#x27;), (16, 0, &#x27;-&#x27;)], (15, &#x27;C&#x27;): [(21, 0, &#x27;+|&#x27;), (16, 1, &#x27;-&#x27;)], (15, &#x27;c&#x27;): [(21, 0, &#x27;+|&#x27;), (21, 15, &#x27;+|&#x27;), (16, 0, &#x27;-&#x27;)], (15, &#x27;-&#x27;): [(21, 15, &#x27;+|&#x27;), (16, 0, &#x27;-&#x27;)], (15, &#x27;,&#x27;): [(21, 15, &#x27;+|&#x27;), (18, 1, &#x27;.&#x27;), (16, 0, &#x27;-&#x27;), (19, 1, &#x27;.&#x27;)], (18, &#x27;+&#x27;): [(21, 0, &#x27;+|&#x27;)], (18, &#x27;-&#x27;): [(21, 0, &#x27;+|&#x27;)], (18, &#x27;?&#x27;): [(21, 0, &#x27;+|&#x27;)], (18, &#x27;C&#x27;): [(21, 0, &#x27;+|&#x27;)], (18, &#x27;c&#x27;): [(21, 0, &#x27;+|&#x27;)], (18, &#x27;,&#x27;): [(21, 0, &#x27;+|&#x27;)], (19, &#x27;C&#x27;): [(16, 1, &#x27;-&#x27;)], (19, &#x27;c&#x27;): [(16, 1, &#x27;-&#x27;)], (16, &#x27;-&#x27;): [(21, 0, &#x27;-|&#x27;)], (16, &#x27;?&#x27;): [(21, 0, &#x27;-|&#x27;)], (16, &#x27;c&#x27;): [(21, 0, &#x27;-|&#x27;)], (16, &#x27;,&#x27;): [(21, 0, &#x27;-|&#x27;), (20, 1, &#x27;.&#x27;)], (16, &#x27;C&#x27;): [(21, 1, &#x27;-|&#x27;)], (20, &#x27;C&#x27;): [(21, 1, &#x27;-|&#x27;)], (20, &#x27;c&#x27;): [(21, 1, &#x27;-|&#x27;)], (21, &#x27;+&#x27;): [(22, 0, &#x27;+&#x27;)], (21, &#x27;?&#x27;): [(22, 0, &#x27;+&#x27;), (22, 15, &#x27;+&#x27;)], (21, &#x27;C&#x27;): [(22, 0, &#x27;+&#x27;)], (21, &#x27;c&#x27;): [(22, 0, &#x27;+&#x27;), (22, 15, &#x27;+&#x27;)], (21, &#x27;-&#x27;): [(22, 15, &#x27;+&#x27;)], (21, &#x27;,&#x27;): [(22, 15, &#x27;+&#x27;), (24, 1, &#x27;.&#x27;)], (24, &#x27;+&#x27;): [(22, 0, &#x27;+&#x27;)], (24, &#x27;-&#x27;): [(22, 0, &#x27;+&#x27;)], (24, &#x27;?&#x27;): [(22, 0, &#x27;+&#x27;)], (24, &#x27;C&#x27;): [(22, 0, &#x27;+&#x27;)], (24, &#x27;c&#x27;): [(22, 0, &#x27;+&#x27;)], (24, &#x27;,&#x27;): [(22, 0, &#x27;+&#x27;)], (22, &#x27;+&#x27;): [(28, 0, &#x27;+|&#x27;)], (22, &#x27;?&#x27;): [(28, 0, &#x27;+|&#x27;), (28, 15, &#x27;+|&#x27;), (23, 0, &#x27;-&#x27;)], (22, &#x27;C&#x27;): [(28, 0, &#x27;+|&#x27;), (23, 1, &#x27;-&#x27;)], (22, &#x27;c&#x27;): [(28, 0, &#x27;+|&#x27;), (28, 15, &#x27;+|&#x27;), (23, 0, &#x27;-&#x27;)], (22, &#x27;-&#x27;): [(28, 15, &#x27;+|&#x27;), (23, 0, &#x27;-&#x27;)], (22, &#x27;,&#x27;): [(28, 15, &#x27;+|&#x27;), (25, 1, &#x27;.&#x27;), (23, 0, &#x27;-&#x27;), (26, 1, &#x27;.&#x27;)], (25, &#x27;+&#x27;): [(28, 0, &#x27;+|&#x27;)], (25, &#x27;-&#x27;): [(28, 0, &#x27;+|&#x27;)], (25, &#x27;?&#x27;): [(28, 0, &#x27;+|&#x27;)], (25, &#x27;C&#x27;): [(28, 0, &#x27;+|&#x27;)], (25, &#x27;c&#x27;): [(28, 0, &#x27;+|&#x27;)], (25, &#x27;,&#x27;): [(28, 0, &#x27;+|&#x27;)], (26, &#x27;C&#x27;): [(23, 1, &#x27;-&#x27;)], (26, &#x27;c&#x27;): [(23, 1, &#x27;-&#x27;)], (23, &#x27;-&#x27;): [(28, 0, &#x27;-|&#x27;)], (23, &#x27;?&#x27;): [(28, 0, &#x27;-|&#x27;)], (23, &#x27;c&#x27;): [(28, 0, &#x27;-|&#x27;)], (23, &#x27;,&#x27;): [(28, 0, &#x27;-|&#x27;), (27, 1, &#x27;.&#x27;)], (23, &#x27;C&#x27;): [(28, 1, &#x27;-|&#x27;)], (27, &#x27;C&#x27;): [(28, 1, &#x27;-|&#x27;)], (27, &#x27;c&#x27;): [(28, 1, &#x27;-|&#x27;)], (28, &#x27;+&#x27;): [(29, 0, &#x27;+&#x27;)], (28, &#x27;?&#x27;): [(29, 0, &#x27;+&#x27;), (29, 15, &#x27;+&#x27;)], (28, &#x27;C&#x27;): [(29, 0, &#x27;+&#x27;)], (28, &#x27;c&#x27;): [(29, 0, &#x27;+&#x27;), (29, 15, &#x27;+&#x27;)], (28, &#x27;-&#x27;): [(29, 15, &#x27;+&#x27;)], (28, &#x27;,&#x27;): [(29, 15, &#x27;+&#x27;), (31, 1, &#x27;.&#x27;)], (31, &#x27;+&#x27;): [(29, 0, &#x27;+&#x27;)], (31, &#x27;-&#x27;): [(29, 0, &#x27;+&#x27;)], (31, &#x27;?&#x27;): [(29, 0, &#x27;+&#x27;)], (31, &#x27;C&#x27;): [(29, 0, &#x27;+&#x27;)], (31, &#x27;c&#x27;): [(29, 0, &#x27;+&#x27;)], (31, &#x27;,&#x27;): [(29, 0, &#x27;+&#x27;)], (29, &#x27;+&#x27;): [(35, 1, &#x27;+|&#x27;)], (29, &#x27;?&#x27;): [(35, 1, &#x27;+|&#x27;), (35, 16, &#x27;+|&#x27;), (30, 0, &#x27;-&#x27;)], (29, &#x27;C&#x27;): [(35, 1, &#x27;+|&#x27;), (30, 1, &#x27;-&#x27;)], (29, &#x27;c&#x27;): [(35, 1, &#x27;+|&#x27;), (35, 16, &#x27;+|&#x27;), (30, 0, &#x27;-&#x27;)], (29, &#x27;-&#x27;): [(35, 16, &#x27;+|&#x27;), (30, 0, &#x27;-&#x27;)], (29, &#x27;,&#x27;): [(35, 16, &#x27;+|&#x27;), (32, 1, &#x27;.&#x27;), (30, 0, &#x27;-&#x27;), (33, 1, &#x27;.&#x27;)], (32, &#x27;+&#x27;): [(35, 1, &#x27;+|&#x27;)], (32, &#x27;-&#x27;): [(35, 1, &#x27;+|&#x27;)], (32, &#x27;?&#x27;): [(35, 1, &#x27;+|&#x27;)], (32, &#x27;C&#x27;): [(35, 1, &#x27;+|&#x27;)], (32, &#x27;c&#x27;): [(35, 1, &#x27;+|&#x27;)], (32, &#x27;,&#x27;): [(35, 1, &#x27;+|&#x27;)], (33, &#x27;C&#x27;): [(30, 1, &#x27;-&#x27;)], (33, &#x27;c&#x27;): [(30, 1, &#x27;-&#x27;)], (30, &#x27;-&#x27;): [(35, 0, &#x27;-|&#x27;)], (30, &#x27;?&#x27;): [(35, 0, &#x27;-|&#x27;)], (30, &#x27;c&#x27;): [(35, 0, &#x27;-|&#x27;)], (30, &#x27;,&#x27;): [(35, 0, &#x27;-|&#x27;), (34, 1, &#x27;.&#x27;)], (30, &#x27;C&#x27;): [(35, 1, &#x27;-|&#x27;)], (34, &#x27;C&#x27;): [(35, 1, &#x27;-|&#x27;)], (34, &#x27;c&#x27;): [(35, 1, &#x27;-|&#x27;)], (35, &#x27;+&#x27;): [(36, 0, &#x27;+&#x27;)], (35, &#x27;?&#x27;): [(36, 0, &#x27;+&#x27;), (36, 15, &#x27;+&#x27;)], (35, &#x27;C&#x27;): [(36, 0, &#x27;+&#x27;)], (35, &#x27;c&#x27;): [(36, 0, &#x27;+&#x27;), (36, 15, &#x27;+&#x27;)], (35, &#x27;-&#x27;): [(36, 15, &#x27;+&#x27;)], (35, &#x27;,&#x27;): [(36, 15, &#x27;+&#x27;), (38, 1, &#x27;.&#x27;)], (38, &#x27;+&#x27;): [(36, 0, &#x27;+&#x27;)], (38, &#x27;-&#x27;): [(36, 0, &#x27;+&#x27;)], (38, &#x27;?&#x27;): [(36, 0, &#x27;+&#x27;)], (38, &#x27;C&#x27;): [(36, 0, &#x27;+&#x27;)], (38, &#x27;c&#x27;): [(36, 0, &#x27;+&#x27;)], (38, &#x27;,&#x27;): [(36, 0, &#x27;+&#x27;)], (36, &#x27;+&#x27;): [(37, 0, &#x27;+&#x27;)], (36, &#x27;-&#x27;): [(37, 0, &#x27;+&#x27;)], (36, &#x27;?&#x27;): [(37, 0, &#x27;+&#x27;)], (36, &#x27;C&#x27;): [(37, 0, &#x27;+&#x27;)], (36, &#x27;c&#x27;): [(37, 0, &#x27;+&#x27;)], (36, &#x27;,&#x27;): [(37, 0, &#x27;+&#x27;), (39, 1, &#x27;.&#x27;)], (39, &#x27;+&#x27;): [(37, 0, &#x27;+&#x27;)], (39, &#x27;-&#x27;): [(37, 0, &#x27;+&#x27;)], (39, &#x27;?&#x27;): [(37, 0, &#x27;+&#x27;)], (39, &#x27;C&#x27;): [(37, 0, &#x27;+&#x27;)], (39, &#x27;c&#x27;): [(37, 0, &#x27;+&#x27;)], (39, &#x27;,&#x27;): [(37, 0, &#x27;+&#x27;)]})"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.states", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.states", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.input", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.input", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">syllables</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.transition", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.transition", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">syllable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.results", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.results", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.from_state", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.from_state", "kind": "variable", "doc": "<p></p>\n", "default_value": "39"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.syllables", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.syllables", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;+&#x27;, &#x27;-&#x27;, &#x27;?&#x27;, &#x27;C&#x27;, &#x27;c&#x27;, &#x27;,&#x27;]"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.to_state", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.to_state", "kind": "variable", "doc": "<p></p>\n", "default_value": "37"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.cost", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.cost", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.scan_as", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.scan_as", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;+&#x27;"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.ScansionNFA.syllable", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "ScansionNFA.syllable", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;,&#x27;"}, {"fullname": "formulaic_mechanics.create_corpora.hexameter.normalize", "modulename": "formulaic_mechanics.create_corpora.hexameter", "qualname": "normalize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">scansion</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.create_corpora.scan", "modulename": "formulaic_mechanics.create_corpora.scan", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.create_corpora.scan.analyze_line", "modulename": "formulaic_mechanics.create_corpora.scan", "qualname": "analyze_line", "kind": "function", "doc": "<p>Analyze scansion and caesura placement for a single line of epic\nhexameter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>line</strong>:  string</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.create_corpora.scan_corpus", "modulename": "formulaic_mechanics.create_corpora.scan_corpus", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.create_corpora.scan_corpus.make_unformatted_meter_files", "modulename": "formulaic_mechanics.create_corpora.scan_corpus", "qualname": "make_unformatted_meter_files", "kind": "function", "doc": "<p>Uses scan.py to scan all lines in clean_files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.create_corpora.scan_corpus.convert_dashed_meter", "modulename": "formulaic_mechanics.create_corpora.scan_corpus", "qualname": "convert_dashed_meter", "kind": "function", "doc": "<p>Converts all dashed metrical patterns to letter-based patterns</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dashed_meter</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.create_corpora.scan_corpus.format_meter_files", "modulename": "formulaic_mechanics.create_corpora.scan_corpus", "qualname": "format_meter_files", "kind": "function", "doc": "<p>Formats meter files into readable, useful format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.helpers", "modulename": "formulaic_mechanics.helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.helpers.meter_files_to_df", "modulename": "formulaic_mechanics.helpers", "qualname": "meter_files_to_df", "kind": "function", "doc": "<p>Reads all csv files in data/meter_files to a pandas dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.helpers.get_vocab_overlap", "modulename": "formulaic_mechanics.helpers", "qualname": "get_vocab_overlap", "kind": "function", "doc": "<p>Calculates the vocabulary overlap between two books in the Homeric corpus.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vocab_lists</span>, </span><span class=\"param\"><span class=\"n\">text1</span>, </span><span class=\"param\"><span class=\"n\">book1</span>, </span><span class=\"param\"><span class=\"n\">text2</span>, </span><span class=\"param\"><span class=\"n\">book2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.helpers.calculate_LR_MSTTR", "modulename": "formulaic_mechanics.helpers", "qualname": "calculate_LR_MSTTR", "kind": "function", "doc": "<p>Calculates the LR-MSTTR of the provided string.\nOriginal code from <a href=\"https://github.com/kristopherkyle/lexical_diversity/tree/master\">https://github.com/kristopherkyle/lexical_diversity/tree/master</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">subset_size</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.helpers.list_to_string", "modulename": "formulaic_mechanics.helpers", "qualname": "list_to_string", "kind": "function", "doc": "<p>Returns a list of words as a space-separated string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listed_elements</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.helpers.list_to_set", "modulename": "formulaic_mechanics.helpers", "qualname": "list_to_set", "kind": "function", "doc": "<p>Removes duplicates from the provided list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listed_elements</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.helpers.list_to_list", "modulename": "formulaic_mechanics.helpers", "qualname": "list_to_list", "kind": "function", "doc": "<p>Returns a list of sentences as a list of words in those sentences.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">listed_elements</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.helpers.clean_line", "modulename": "formulaic_mechanics.helpers", "qualname": "clean_line", "kind": "function", "doc": "<p>Cleans the provided line.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.helpers.book_statistics", "modulename": "formulaic_mechanics.helpers", "qualname": "book_statistics", "kind": "function", "doc": "<p>Returns a list of statistics about a particular book in the Homeric corpus.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target_text</span>, </span><span class=\"param\"><span class=\"n\">target_book</span>, </span><span class=\"param\"><span class=\"n\">lines_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.helpers.standardize_accents", "modulename": "formulaic_mechanics.helpers", "qualname": "standardize_accents", "kind": "function", "doc": "<p>Standardize all grave accents to acute accents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target_token</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.letters", "modulename": "formulaic_mechanics.letters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.letters.vowels", "modulename": "formulaic_mechanics.letters", "qualname": "vowels", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u1f70&#x27;, &#x27;\u03ac&#x27;, &#x27;\u1f02&#x27;, &#x27;\u1f04&#x27;, &#x27;\u1f03&#x27;, &#x27;\u1f05&#x27;, &#x27;\u0391&#x27;, &#x27;\u03b1&#x27;, &#x27;\u1f00&#x27;, &#x27;\u1f01&#x27;, &#x27;\u1f06&#x27;, &#x27;\u1f07&#x27;, &#x27;\u1f72&#x27;, &#x27;\u03ad&#x27;, &#x27;\u1f12&#x27;, &#x27;\u1f14&#x27;, &#x27;\u1f13&#x27;, &#x27;\u1f15&#x27;, &#x27;\u0395&#x27;, &#x27;\u03b5&#x27;, &#x27;\u1f10&#x27;, &#x27;\u1f11&#x27;, &#x27;\u1f74&#x27;, &#x27;\u03ae&#x27;, &#x27;\u1f22&#x27;, &#x27;\u1f24&#x27;, &#x27;\u1f23&#x27;, &#x27;\u1f25&#x27;, &#x27;\u0397&#x27;, &#x27;\u03b7&#x27;, &#x27;\u1f76&#x27;, &#x27;\u03af&#x27;, &#x27;\u1f32&#x27;, &#x27;\u1f34&#x27;, &#x27;\u1f33&#x27;, &#x27;\u1f35&#x27;, &#x27;\u1fd2&#x27;, &#x27;\u0390&#x27;, &#x27;\u0399&#x27;, &#x27;\u03b9&#x27;, &#x27;\u03ca&#x27;, &#x27;\u1f30&#x27;, &#x27;\u1f31&#x27;, &#x27;\u1f36&#x27;, &#x27;\u1f37&#x27;, &#x27;\u1f78&#x27;, &#x27;\u03cc&#x27;, &#x27;\u1f42&#x27;, &#x27;\u1f44&#x27;, &#x27;\u1f43&#x27;, &#x27;\u1f45&#x27;, &#x27;\u039f&#x27;, &#x27;\u03bf&#x27;, &#x27;\u1f40&#x27;, &#x27;\u1f41&#x27;, &#x27;\u1f7a&#x27;, &#x27;\u03cd&#x27;, &#x27;\u1f52&#x27;, &#x27;\u1f54&#x27;, &#x27;\u1f53&#x27;, &#x27;\u1f55&#x27;, &#x27;\u1fe2&#x27;, &#x27;\u03b0&#x27;, &#x27;\u03a5&#x27;, &#x27;\u03c5&#x27;, &#x27;\u03cb&#x27;, &#x27;\u1f50&#x27;, &#x27;\u1f51&#x27;, &#x27;\u1f56&#x27;, &#x27;\u1f57&#x27;, &#x27;\u1fe2&#x27;, &#x27;\u1fe3&#x27;, &#x27;\u1fe6\\t&#x27;, &#x27;\u1fe7&#x27;, &#x27;\u1f7c&#x27;, &#x27;\u03ce&#x27;, &#x27;\u1f62&#x27;, &#x27;\u1f64&#x27;, &#x27;\u1f63&#x27;, &#x27;\u1f65&#x27;, &#x27;\u03a9&#x27;, &#x27;\u03c9&#x27;, &#x27;\u1ff2&#x27;, &#x27;\u1ff3&#x27;, &#x27;\u1ff4&#x27;, &#x27;\u1ff6&#x27;, &#x27;\u1ff7&#x27;, &#x27;\u1fb2&#x27;, &#x27;\u1fb4&#x27;, &#x27;\u1f82&#x27;, &#x27;\u1f84&#x27;, &#x27;\u1f83&#x27;, &#x27;\u1f85&#x27;, &#x27;\u1f80&#x27;, &#x27;\u1f81&#x27;, &#x27;\u1f86&#x27;, &#x27;\u1f87&#x27;, &#x27;\u1fb2&#x27;, &#x27;\u1fb3&#x27;, &#x27;\u1fb4&#x27;, &#x27;\u1fb6&#x27;, &#x27;\u1fb7&#x27;, &#x27;\u1fc2&#x27;, &#x27;\u1fc4&#x27;, &#x27;\u1f92&#x27;, &#x27;\u1f94&#x27;, &#x27;\u1f93&#x27;, &#x27;\u1f95&#x27;, &#x27;\u1f20&#x27;, &#x27;\u1f21&#x27;, &#x27;\u1f26&#x27;, &#x27;\u1f27&#x27;, &#x27;\u1f90&#x27;, &#x27;\u1f91&#x27;, &#x27;\u1f96&#x27;, &#x27;\u1f97&#x27;, &#x27;\u1ff2&#x27;, &#x27;\u1ff4&#x27;, &#x27;\u1fa2&#x27;, &#x27;\u1fa4&#x27;, &#x27;\u1fa3&#x27;, &#x27;\u1fa5&#x27;, &#x27;\u1f60&#x27;, &#x27;\u1f61&#x27;, &#x27;\u1f66&#x27;, &#x27;\u1f67&#x27;, &#x27;\u1fa0&#x27;, &#x27;\u1fa1&#x27;, &#x27;\u1fa6&#x27;, &#x27;\u1fa7&#x27;, &#x27;\u1fba&#x27;, &#x27;\u0386&#x27;, &#x27;\u1f0a&#x27;, &#x27;\u1f0c&#x27;, &#x27;\u1f0b&#x27;, &#x27;\u1f0d&#x27;, &#x27;\u1fba\\t&#x27;, &#x27;\u1fbb&#x27;, &#x27;\u1fbc&#x27;, &#x27;\u1fc8&#x27;, &#x27;\u0388&#x27;, &#x27;\u1f1a&#x27;, &#x27;\u1f1c&#x27;, &#x27;\u1f1b&#x27;, &#x27;\u1f1d&#x27;, &#x27;\u1f18&#x27;, &#x27;\u1f19&#x27;, &#x27;\u1fca&#x27;, &#x27;\u0389&#x27;, &#x27;\u1f2a&#x27;, &#x27;\u1f2c&#x27;, &#x27;\u1f2b&#x27;, &#x27;\u1f2d&#x27;, &#x27;\u1f28&#x27;, &#x27;\u1f29&#x27;, &#x27;\u1f2e&#x27;, &#x27;\u1f2f&#x27;, &#x27;\u1fc2&#x27;, &#x27;\u1fc3&#x27;, &#x27;\u1fc4&#x27;, &#x27;\u1fc6&#x27;, &#x27;\u1fc7&#x27;, &#x27;\u1fc8&#x27;, &#x27;\u1fc9&#x27;, &#x27;\u1fca&#x27;, &#x27;\u1fcb&#x27;, &#x27;\u1fcc&#x27;, &#x27;\u1fda&#x27;, &#x27;\u038a&#x27;, &#x27;\u1f3a&#x27;, &#x27;\u1f3c&#x27;, &#x27;\u1f3b&#x27;, &#x27;\u1f3d&#x27;, &#x27;\u1f38&#x27;, &#x27;\u1f39&#x27;, &#x27;\u1f3f&#x27;, &#x27;\u1f3e&#x27;, &#x27;\u1fd2&#x27;, &#x27;\u1fd3&#x27;, &#x27;\u1fd7&#x27;, &#x27;\u1ff8&#x27;, &#x27;\u038c&#x27;, &#x27;\u1f4a&#x27;, &#x27;\u1f4c&#x27;, &#x27;\u1f4b&#x27;, &#x27;\u1f4d&#x27;, &#x27;\u1f48&#x27;, &#x27;\u1f49&#x27;, &#x27;\u1fea&#x27;, &#x27;\u038e&#x27;, &#x27;\u1f5b&#x27;, &#x27;\u1f5d&#x27;, &#x27;\u1f59&#x27;, &#x27;\u1f5f&#x27;, &#x27;\u1ffa&#x27;, &#x27;\u038f&#x27;, &#x27;\u1f6a&#x27;, &#x27;\u1f6c&#x27;, &#x27;\u1f6b&#x27;, &#x27;\u1f6d&#x27;, &#x27;\u1f8a&#x27;, &#x27;\u1f8c&#x27;, &#x27;\u1f8b&#x27;, &#x27;\u1f8d&#x27;, &#x27;\u1f0e&#x27;, &#x27;\u1f0f&#x27;, &#x27;\u1f08&#x27;, &#x27;\u1f09&#x27;, &#x27;\u1f88&#x27;, &#x27;\u1f89&#x27;, &#x27;\u1f8e&#x27;, &#x27;\u1f8f&#x27;, &#x27;\u1f9a&#x27;, &#x27;\u1f9c&#x27;, &#x27;\u1f9b&#x27;, &#x27;\u1f9d&#x27;, &#x27;\u1f98&#x27;, &#x27;\u1f99&#x27;, &#x27;\u1f9e&#x27;, &#x27;\u1f9f&#x27;, &#x27;\u1faa&#x27;, &#x27;\u1fac&#x27;, &#x27;\u1fab&#x27;, &#x27;\u1fad&#x27;, &#x27;\u1f68&#x27;, &#x27;\u1f69&#x27;, &#x27;\u1f6e&#x27;, &#x27;\u1f6f&#x27;, &#x27;\u1fa8&#x27;, &#x27;\u1fa9&#x27;, &#x27;\u1fae&#x27;, &#x27;\u1faf&#x27;, &#x27;\u1ff8&#x27;, &#x27;\u1ff9&#x27;, &#x27;\u1ffa&#x27;, &#x27;\u1ffb&#x27;, &#x27;\u1ffc&#x27;]"}, {"fullname": "formulaic_mechanics.letters.long_vowels", "modulename": "formulaic_mechanics.letters", "qualname": "long_vowels", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u1f74&#x27;, &#x27;\u03ae&#x27;, &#x27;\u1f22&#x27;, &#x27;\u1f24&#x27;, &#x27;\u1f23&#x27;, &#x27;\u1f25&#x27;, &#x27;\u0397&#x27;, &#x27;\u03b7&#x27;, &#x27;\u1fc2&#x27;, &#x27;\u1fc4&#x27;, &#x27;\u1f92&#x27;, &#x27;\u1f94&#x27;, &#x27;\u1f93&#x27;, &#x27;\u1f95&#x27;, &#x27;\u1f20&#x27;, &#x27;\u1f21&#x27;, &#x27;\u1f26&#x27;, &#x27;\u1f27&#x27;, &#x27;\u1f90&#x27;, &#x27;\u1f91&#x27;, &#x27;\u1f96&#x27;, &#x27;\u1f97&#x27;, &#x27;\u1fc2&#x27;, &#x27;\u1fc3&#x27;, &#x27;\u1fc4&#x27;, &#x27;\u1fc6&#x27;, &#x27;\u1fc7&#x27;, &#x27;\u1fca&#x27;, &#x27;\u1fcb&#x27;, &#x27;\u1fcc&#x27;, &#x27;\u1f9a&#x27;, &#x27;\u1f9c&#x27;, &#x27;\u1f9b&#x27;, &#x27;\u1f9d&#x27;, &#x27;\u1f98&#x27;, &#x27;\u1f99&#x27;, &#x27;\u1f9e&#x27;, &#x27;\u1f9f&#x27;, &#x27;\u1f7c&#x27;, &#x27;\u03ce&#x27;, &#x27;\u1f62&#x27;, &#x27;\u1f64&#x27;, &#x27;\u1f63&#x27;, &#x27;\u1f65&#x27;, &#x27;\u03a9&#x27;, &#x27;\u03c9&#x27;, &#x27;\u1ff2&#x27;, &#x27;\u1ff3&#x27;, &#x27;\u1ff4&#x27;, &#x27;\u1ff6&#x27;, &#x27;\u1ff7&#x27;, &#x27;\u1ff2&#x27;, &#x27;\u1ff4&#x27;, &#x27;\u1fa2&#x27;, &#x27;\u1fa4&#x27;, &#x27;\u1fa3&#x27;, &#x27;\u1fa5&#x27;, &#x27;\u1f60&#x27;, &#x27;\u1f61&#x27;, &#x27;\u1f66&#x27;, &#x27;\u1f67&#x27;, &#x27;\u1fa0&#x27;, &#x27;\u1fa1&#x27;, &#x27;\u1fa6&#x27;, &#x27;\u1fa7&#x27;, &#x27;\u1ffa&#x27;, &#x27;\u038f&#x27;, &#x27;\u1f6a&#x27;, &#x27;\u1f6c&#x27;, &#x27;\u1f6b&#x27;, &#x27;\u1f6d&#x27;, &#x27;\u1faa&#x27;, &#x27;\u1fac&#x27;, &#x27;\u1fab&#x27;, &#x27;\u1fad&#x27;, &#x27;\u1f68&#x27;, &#x27;\u1f69&#x27;, &#x27;\u1f6e&#x27;, &#x27;\u1f6f&#x27;, &#x27;\u1fa8&#x27;, &#x27;\u1fa9&#x27;, &#x27;\u1fae&#x27;, &#x27;\u1faf&#x27;]"}, {"fullname": "formulaic_mechanics.letters.alph_lower", "modulename": "formulaic_mechanics.letters", "qualname": "alph_lower", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u1f70&#x27;, &#x27;\u03ac&#x27;, &#x27;\u1f02&#x27;, &#x27;\u1f04&#x27;, &#x27;\u1f03&#x27;, &#x27;\u1f05&#x27;, &#x27;\u03b1&#x27;, &#x27;\u1f00&#x27;, &#x27;\u1f01&#x27;, &#x27;\u1f06&#x27;, &#x27;\u1f07&#x27;, &#x27;\u1fb2&#x27;, &#x27;\u1fb4&#x27;, &#x27;\u1f82&#x27;, &#x27;\u1f84&#x27;, &#x27;\u1f83&#x27;, &#x27;\u1f85&#x27;, &#x27;\u1f80&#x27;, &#x27;\u1f81&#x27;, &#x27;\u1f86&#x27;, &#x27;\u1f87&#x27;, &#x27;\u1fb2&#x27;, &#x27;\u1fb3&#x27;, &#x27;\u1fb4&#x27;, &#x27;\u1fb6&#x27;, &#x27;\u1fb7&#x27;]"}, {"fullname": "formulaic_mechanics.letters.epsi_lower", "modulename": "formulaic_mechanics.letters", "qualname": "epsi_lower", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u1f72&#x27;, &#x27;\u03ad&#x27;, &#x27;\u1f12&#x27;, &#x27;\u1f14&#x27;, &#x27;\u1f13&#x27;, &#x27;\u1f15&#x27;, &#x27;\u03b5&#x27;, &#x27;\u1f10&#x27;, &#x27;\u1f11&#x27;]"}, {"fullname": "formulaic_mechanics.letters.iota_lower", "modulename": "formulaic_mechanics.letters", "qualname": "iota_lower", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u1f76&#x27;, &#x27;\u03af&#x27;, &#x27;\u1f32&#x27;, &#x27;\u1f34&#x27;, &#x27;\u1f33&#x27;, &#x27;\u1f35&#x27;, &#x27;\u1fd2&#x27;, &#x27;\u0390&#x27;, &#x27;\u03b9&#x27;, &#x27;\u03ca&#x27;, &#x27;\u1f30&#x27;, &#x27;\u1f31&#x27;, &#x27;\u1f36&#x27;, &#x27;\u1f37&#x27;, &#x27;\u1fd2&#x27;, &#x27;\u1fd3&#x27;, &#x27;\u1fd7&#x27;]"}, {"fullname": "formulaic_mechanics.letters.etas_lower", "modulename": "formulaic_mechanics.letters", "qualname": "etas_lower", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u1f74&#x27;, &#x27;\u03ae&#x27;, &#x27;\u1f22&#x27;, &#x27;\u1f24&#x27;, &#x27;\u1f23&#x27;, &#x27;\u1f25&#x27;, &#x27;\u03b7&#x27;, &#x27;\u1fc2&#x27;, &#x27;\u1fc4&#x27;, &#x27;\u1f92&#x27;, &#x27;\u1f94&#x27;, &#x27;\u1f93&#x27;, &#x27;\u1f95&#x27;, &#x27;\u1f20&#x27;, &#x27;\u1f21&#x27;, &#x27;\u1f26&#x27;, &#x27;\u1f27&#x27;, &#x27;\u1f90&#x27;, &#x27;\u1f91&#x27;, &#x27;\u1f96&#x27;, &#x27;\u1f97&#x27;, &#x27;\u1fc2&#x27;, &#x27;\u1fc3&#x27;, &#x27;\u1fc4&#x27;, &#x27;\u1fc6&#x27;, &#x27;\u1fc7&#x27;]"}, {"fullname": "formulaic_mechanics.letters.omeg_lower", "modulename": "formulaic_mechanics.letters", "qualname": "omeg_lower", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u1f7c&#x27;, &#x27;\u03ce&#x27;, &#x27;\u1f62&#x27;, &#x27;\u1f64&#x27;, &#x27;\u1f63&#x27;, &#x27;\u1f65&#x27;, &#x27;\u03c9&#x27;, &#x27;\u1ff2&#x27;, &#x27;\u1ff3&#x27;, &#x27;\u1ff4&#x27;, &#x27;\u1ff6&#x27;, &#x27;\u1ff7&#x27;, &#x27;\u1ff2&#x27;, &#x27;\u1ff4&#x27;, &#x27;\u1fa2&#x27;, &#x27;\u1fa4&#x27;, &#x27;\u1fa3&#x27;, &#x27;\u1fa5&#x27;, &#x27;\u1f60&#x27;, &#x27;\u1f61&#x27;, &#x27;\u1f66&#x27;, &#x27;\u1f67&#x27;, &#x27;\u1fa0&#x27;, &#x27;\u1fa1&#x27;, &#x27;\u1fa6&#x27;, &#x27;\u1fa7&#x27;]"}, {"fullname": "formulaic_mechanics.letters.upsi_lower", "modulename": "formulaic_mechanics.letters", "qualname": "upsi_lower", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u1f7a&#x27;, &#x27;\u03cd&#x27;, &#x27;\u1f52&#x27;, &#x27;\u1f54&#x27;, &#x27;\u1f53&#x27;, &#x27;\u1f55&#x27;, &#x27;\u1fe2&#x27;, &#x27;\u03b0&#x27;, &#x27;\u03c5&#x27;, &#x27;\u03cb&#x27;, &#x27;\u1f50&#x27;, &#x27;\u1f51&#x27;, &#x27;\u1f56&#x27;, &#x27;\u1f57&#x27;, &#x27;\u1fe2&#x27;, &#x27;\u1fe3&#x27;, &#x27;\u1fe6\\t&#x27;, &#x27;\u1fe7&#x27;]"}, {"fullname": "formulaic_mechanics.letters.omic_lower", "modulename": "formulaic_mechanics.letters", "qualname": "omic_lower", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u1f78&#x27;, &#x27;\u03cc&#x27;, &#x27;\u1f42&#x27;, &#x27;\u1f44&#x27;, &#x27;\u1f43&#x27;, &#x27;\u1f45&#x27;, &#x27;\u03bf&#x27;, &#x27;\u1f40&#x27;, &#x27;\u1f41&#x27;]"}, {"fullname": "formulaic_mechanics.letters.alph_upper", "modulename": "formulaic_mechanics.letters", "qualname": "alph_upper", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u0391&#x27;, &#x27;\u1fba&#x27;, &#x27;\u0386&#x27;, &#x27;\u1f0a&#x27;, &#x27;\u1f0c&#x27;, &#x27;\u1f0b&#x27;, &#x27;\u1f0d&#x27;, &#x27;\u1fba&#x27;, &#x27;\u1fbb&#x27;, &#x27;\u1fbc&#x27;, &#x27;\u1f8a&#x27;, &#x27;\u1f8c&#x27;, &#x27;\u1f8b&#x27;, &#x27;\u1f8d&#x27;, &#x27;\u1f0e&#x27;, &#x27;\u1f0f&#x27;, &#x27;\u1f08&#x27;, &#x27;\u1f09&#x27;, &#x27;\u1f88&#x27;, &#x27;\u1f89&#x27;, &#x27;\u1f8e&#x27;, &#x27;\u1f8f&#x27;]"}, {"fullname": "formulaic_mechanics.letters.epsi_upper", "modulename": "formulaic_mechanics.letters", "qualname": "epsi_upper", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u0395&#x27;, &#x27;\u1fc8&#x27;, &#x27;\u0388&#x27;, &#x27;\u1f1a&#x27;, &#x27;\u1f1c&#x27;, &#x27;\u1f1b&#x27;, &#x27;\u1f1d&#x27;, &#x27;\u1f18&#x27;, &#x27;\u1f19&#x27;, &#x27;\u1fc8&#x27;, &#x27;\u1fc9&#x27;]"}, {"fullname": "formulaic_mechanics.letters.iota_upper", "modulename": "formulaic_mechanics.letters", "qualname": "iota_upper", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u0399&#x27;, &#x27;\u1fda&#x27;, &#x27;\u038a&#x27;, &#x27;\u1f3a&#x27;, &#x27;\u1f3c&#x27;, &#x27;\u1f3b&#x27;, &#x27;\u1f3d&#x27;, &#x27;\u1f38&#x27;, &#x27;\u1f39&#x27;, &#x27;\u1f3f&#x27;, &#x27;\u1f3e&#x27;]"}, {"fullname": "formulaic_mechanics.letters.etas_upper", "modulename": "formulaic_mechanics.letters", "qualname": "etas_upper", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u0397&#x27;, &#x27;\u1fca&#x27;, &#x27;\u0389&#x27;, &#x27;\u1f2a&#x27;, &#x27;\u1f2c&#x27;, &#x27;\u1f2b&#x27;, &#x27;\u1f2d&#x27;, &#x27;\u1f28&#x27;, &#x27;\u1f29&#x27;, &#x27;\u1f2e&#x27;, &#x27;\u1f2f&#x27;, &#x27;\u1fca&#x27;, &#x27;\u1fcb&#x27;, &#x27;\u1fcc&#x27;, &#x27;\u1f9a&#x27;, &#x27;\u1f9c&#x27;, &#x27;\u1f9b&#x27;, &#x27;\u1f9d&#x27;, &#x27;\u1f98&#x27;, &#x27;\u1f99&#x27;, &#x27;\u1f9e&#x27;, &#x27;\u1f9f&#x27;]"}, {"fullname": "formulaic_mechanics.letters.omeg_upper", "modulename": "formulaic_mechanics.letters", "qualname": "omeg_upper", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u03a9&#x27;, &#x27;\u1ffa&#x27;, &#x27;\u038f&#x27;, &#x27;\u1f6a&#x27;, &#x27;\u1f6c&#x27;, &#x27;\u1f6b&#x27;, &#x27;\u1f6d&#x27;, &#x27;\u1faa&#x27;, &#x27;\u1fac&#x27;, &#x27;\u1fab&#x27;, &#x27;\u1fad&#x27;, &#x27;\u1f68&#x27;, &#x27;\u1f69&#x27;, &#x27;\u1f6e&#x27;, &#x27;\u1f6f&#x27;, &#x27;\u1fa8&#x27;, &#x27;\u1fa9&#x27;, &#x27;\u1fae&#x27;, &#x27;\u1faf&#x27;, &#x27;\u1ffa&#x27;, &#x27;\u1ffb&#x27;, &#x27;\u1ffc&#x27;]"}, {"fullname": "formulaic_mechanics.letters.upsi_upper", "modulename": "formulaic_mechanics.letters", "qualname": "upsi_upper", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u03a5&#x27;, &#x27;\u1fea&#x27;, &#x27;\u038e&#x27;, &#x27;\u1f5b&#x27;, &#x27;\u1f5d&#x27;, &#x27;\u1f59&#x27;, &#x27;\u1f5f&#x27;]"}, {"fullname": "formulaic_mechanics.letters.omic_upper", "modulename": "formulaic_mechanics.letters", "qualname": "omic_upper", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u039f&#x27;, &#x27;\u1ff8&#x27;, &#x27;\u038c&#x27;, &#x27;\u1f4a&#x27;, &#x27;\u1f4c&#x27;, &#x27;\u1f4b&#x27;, &#x27;\u1f4d&#x27;, &#x27;\u1f48&#x27;, &#x27;\u1f49&#x27;, &#x27;\u1ff8&#x27;, &#x27;\u1ff9&#x27;]"}, {"fullname": "formulaic_mechanics.letters.make_auto_diphthongs", "modulename": "formulaic_mechanics.letters", "qualname": "make_auto_diphthongs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.letters.dipthongs", "modulename": "formulaic_mechanics.letters", "qualname": "dipthongs", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u03b1\u1f76&#x27;, &#x27;\u03b5\u1f76&#x27;, &#x27;\u03bf\u1f76&#x27;, &#x27;\u03c5\u1f76&#x27;, &#x27;\u03b1\u03af&#x27;, &#x27;\u03b5\u03af&#x27;, &#x27;\u03bf\u03af&#x27;, &#x27;\u03c5\u03af&#x27;, &#x27;\u03b1\u1f32&#x27;, &#x27;\u03b5\u1f32&#x27;, &#x27;\u03bf\u1f32&#x27;, &#x27;\u03c5\u1f32&#x27;, &#x27;\u03b1\u1f34&#x27;, &#x27;\u03b5\u1f34&#x27;, &#x27;\u03bf\u1f34&#x27;, &#x27;\u03c5\u1f34&#x27;, &#x27;\u03b1\u1f33&#x27;, &#x27;\u03b5\u1f33&#x27;, &#x27;\u03bf\u1f33&#x27;, &#x27;\u03c5\u1f33&#x27;, &#x27;\u03b1\u1f35&#x27;, &#x27;\u03b5\u1f35&#x27;, &#x27;\u03bf\u1f35&#x27;, &#x27;\u03c5\u1f35&#x27;, &#x27;\u03b1\u1fd2&#x27;, &#x27;\u03b5\u1fd2&#x27;, &#x27;\u03bf\u1fd2&#x27;, &#x27;\u03c5\u1fd2&#x27;, &#x27;\u03b1\u0390&#x27;, &#x27;\u03b5\u0390&#x27;, &#x27;\u03bf\u0390&#x27;, &#x27;\u03c5\u0390&#x27;, &#x27;\u03b1\u03b9&#x27;, &#x27;\u03b5\u03b9&#x27;, &#x27;\u03bf\u03b9&#x27;, &#x27;\u03c5\u03b9&#x27;, &#x27;\u03b1\u03ca&#x27;, &#x27;\u03b5\u03ca&#x27;, &#x27;\u03bf\u03ca&#x27;, &#x27;\u03c5\u03ca&#x27;, &#x27;\u03b1\u1f30&#x27;, &#x27;\u03b5\u1f30&#x27;, &#x27;\u03bf\u1f30&#x27;, &#x27;\u03c5\u1f30&#x27;, &#x27;\u03b1\u1f31&#x27;, &#x27;\u03b5\u1f31&#x27;, &#x27;\u03bf\u1f31&#x27;, &#x27;\u03c5\u1f31&#x27;, &#x27;\u03b1\u1f36&#x27;, &#x27;\u03b5\u1f36&#x27;, &#x27;\u03bf\u1f36&#x27;, &#x27;\u03c5\u1f36&#x27;, &#x27;\u03b1\u1f37&#x27;, &#x27;\u03b5\u1f37&#x27;, &#x27;\u03bf\u1f37&#x27;, &#x27;\u03c5\u1f37&#x27;, &#x27;\u03b1\u1fd2&#x27;, &#x27;\u03b5\u1fd2&#x27;, &#x27;\u03bf\u1fd2&#x27;, &#x27;\u03c5\u1fd2&#x27;, &#x27;\u03b1\u1fd3&#x27;, &#x27;\u03b5\u1fd3&#x27;, &#x27;\u03bf\u1fd3&#x27;, &#x27;\u03c5\u1fd3&#x27;, &#x27;\u03b1\u1fd7&#x27;, &#x27;\u03b5\u1fd7&#x27;, &#x27;\u03bf\u1fd7&#x27;, &#x27;\u03c5\u1fd7&#x27;, &#x27;\u03b1\u1f7a&#x27;, &#x27;\u03b5\u1f7a&#x27;, &#x27;\u03bf\u1f7a&#x27;, &#x27;\u03b7\u1f7a&#x27;, &#x27;\u03c9\u1f7a&#x27;, &#x27;\u03b1\u03cd&#x27;, &#x27;\u03b5\u03cd&#x27;, &#x27;\u03bf\u03cd&#x27;, &#x27;\u03b7\u03cd&#x27;, &#x27;\u03c9\u03cd&#x27;, &#x27;\u03b1\u1f52&#x27;, &#x27;\u03b5\u1f52&#x27;, &#x27;\u03bf\u1f52&#x27;, &#x27;\u03b7\u1f52&#x27;, &#x27;\u03c9\u1f52&#x27;, &#x27;\u03b1\u1f54&#x27;, &#x27;\u03b5\u1f54&#x27;, &#x27;\u03bf\u1f54&#x27;, &#x27;\u03b7\u1f54&#x27;, &#x27;\u03c9\u1f54&#x27;, &#x27;\u03b1\u1f53&#x27;, &#x27;\u03b5\u1f53&#x27;, &#x27;\u03bf\u1f53&#x27;, &#x27;\u03b7\u1f53&#x27;, &#x27;\u03c9\u1f53&#x27;, &#x27;\u03b1\u1f55&#x27;, &#x27;\u03b5\u1f55&#x27;, &#x27;\u03bf\u1f55&#x27;, &#x27;\u03b7\u1f55&#x27;, &#x27;\u03c9\u1f55&#x27;, &#x27;\u03b1\u1fe2&#x27;, &#x27;\u03b5\u1fe2&#x27;, &#x27;\u03bf\u1fe2&#x27;, &#x27;\u03b7\u1fe2&#x27;, &#x27;\u03c9\u1fe2&#x27;, &#x27;\u03b1\u03b0&#x27;, &#x27;\u03b5\u03b0&#x27;, &#x27;\u03bf\u03b0&#x27;, &#x27;\u03b7\u03b0&#x27;, &#x27;\u03c9\u03b0&#x27;, &#x27;\u03b1\u03c5&#x27;, &#x27;\u03b5\u03c5&#x27;, &#x27;\u03bf\u03c5&#x27;, &#x27;\u03b7\u03c5&#x27;, &#x27;\u03c9\u03c5&#x27;, &#x27;\u03b1\u03cb&#x27;, &#x27;\u03b5\u03cb&#x27;, &#x27;\u03bf\u03cb&#x27;, &#x27;\u03b7\u03cb&#x27;, &#x27;\u03c9\u03cb&#x27;, &#x27;\u03b1\u1f50&#x27;, &#x27;\u03b5\u1f50&#x27;, &#x27;\u03bf\u1f50&#x27;, &#x27;\u03b7\u1f50&#x27;, &#x27;\u03c9\u1f50&#x27;, &#x27;\u03b1\u1f51&#x27;, &#x27;\u03b5\u1f51&#x27;, &#x27;\u03bf\u1f51&#x27;, &#x27;\u03b7\u1f51&#x27;, &#x27;\u03c9\u1f51&#x27;, &#x27;\u03b1\u1f56&#x27;, &#x27;\u03b5\u1f56&#x27;, &#x27;\u03bf\u1f56&#x27;, &#x27;\u03b7\u1f56&#x27;, &#x27;\u03c9\u1f56&#x27;, &#x27;\u03b1\u1f57&#x27;, &#x27;\u03b5\u1f57&#x27;, &#x27;\u03bf\u1f57&#x27;, &#x27;\u03b7\u1f57&#x27;, &#x27;\u03c9\u1f57&#x27;, &#x27;\u03b1\u1fe2&#x27;, &#x27;\u03b5\u1fe2&#x27;, &#x27;\u03bf\u1fe2&#x27;, &#x27;\u03b7\u1fe2&#x27;, &#x27;\u03c9\u1fe2&#x27;, &#x27;\u03b1\u1fe3&#x27;, &#x27;\u03b5\u1fe3&#x27;, &#x27;\u03bf\u1fe3&#x27;, &#x27;\u03b7\u1fe3&#x27;, &#x27;\u03c9\u1fe3&#x27;, &#x27;\u03b1\u1fe6&#x27;, &#x27;\u03b5\u1fe6&#x27;, &#x27;\u03bf\u1fe6&#x27;, &#x27;\u03b7\u1fe6&#x27;, &#x27;\u03c9\u1fe6&#x27;, &#x27;\u03b1\u1fe7&#x27;, &#x27;\u03b5\u1fe7&#x27;, &#x27;\u03bf\u1fe7&#x27;, &#x27;\u03b7\u1fe7&#x27;, &#x27;\u03c9\u1fe7&#x27;, &#x27;\u0391\u0399&#x27;, &#x27;\u0395\u0399&#x27;, &#x27;\u039f\u0399&#x27;, &#x27;\u03a5\u0399&#x27;, &#x27;\u0391\u1fda&#x27;, &#x27;\u0395\u1fda&#x27;, &#x27;\u039f\u1fda&#x27;, &#x27;\u03a5\u1fda&#x27;, &#x27;\u0391\u038a&#x27;, &#x27;\u0395\u038a&#x27;, &#x27;\u039f\u038a&#x27;, &#x27;\u03a5\u038a&#x27;, &#x27;\u0391\u1f3a&#x27;, &#x27;\u0395\u1f3a&#x27;, &#x27;\u039f\u1f3a&#x27;, &#x27;\u03a5\u1f3a&#x27;, &#x27;\u0391\u1f3c&#x27;, &#x27;\u0395\u1f3c&#x27;, &#x27;\u039f\u1f3c&#x27;, &#x27;\u03a5\u1f3c&#x27;, &#x27;\u0391\u1f3b&#x27;, &#x27;\u0395\u1f3b&#x27;, &#x27;\u039f\u1f3b&#x27;, &#x27;\u03a5\u1f3b&#x27;, &#x27;\u0391\u1f3d&#x27;, &#x27;\u0395\u1f3d&#x27;, &#x27;\u039f\u1f3d&#x27;, &#x27;\u03a5\u1f3d&#x27;, &#x27;\u0391\u1f38&#x27;, &#x27;\u0395\u1f38&#x27;, &#x27;\u039f\u1f38&#x27;, &#x27;\u03a5\u1f38&#x27;, &#x27;\u0391\u1f39&#x27;, &#x27;\u0395\u1f39&#x27;, &#x27;\u039f\u1f39&#x27;, &#x27;\u03a5\u1f39&#x27;, &#x27;\u0391\u1f3f&#x27;, &#x27;\u0395\u1f3f&#x27;, &#x27;\u039f\u1f3f&#x27;, &#x27;\u03a5\u1f3f&#x27;, &#x27;\u0391\u1f3e&#x27;, &#x27;\u0395\u1f3e&#x27;, &#x27;\u039f\u1f3e&#x27;, &#x27;\u03a5\u1f3e&#x27;, &#x27;\u0391\u03a5&#x27;, &#x27;\u0395\u03a5&#x27;, &#x27;\u039f\u03a5&#x27;, &#x27;\u0397\u03a5&#x27;, &#x27;\u03a9\u03a5&#x27;, &#x27;\u0391\u1fea&#x27;, &#x27;\u0395\u1fea&#x27;, &#x27;\u039f\u1fea&#x27;, &#x27;\u0397\u1fea&#x27;, &#x27;\u03a9\u1fea&#x27;, &#x27;\u0391\u038e&#x27;, &#x27;\u0395\u038e&#x27;, &#x27;\u039f\u038e&#x27;, &#x27;\u0397\u038e&#x27;, &#x27;\u03a9\u038e&#x27;, &#x27;\u0391\u1f5b&#x27;, &#x27;\u0395\u1f5b&#x27;, &#x27;\u039f\u1f5b&#x27;, &#x27;\u0397\u1f5b&#x27;, &#x27;\u03a9\u1f5b&#x27;, &#x27;\u0391\u1f5d&#x27;, &#x27;\u0395\u1f5d&#x27;, &#x27;\u039f\u1f5d&#x27;, &#x27;\u0397\u1f5d&#x27;, &#x27;\u03a9\u1f5d&#x27;, &#x27;\u0391\u1f59&#x27;, &#x27;\u0395\u1f59&#x27;, &#x27;\u039f\u1f59&#x27;, &#x27;\u0397\u1f59&#x27;, &#x27;\u03a9\u1f59&#x27;, &#x27;\u0391\u1f5f&#x27;, &#x27;\u0395\u1f5f&#x27;, &#x27;\u039f\u1f5f&#x27;, &#x27;\u0397\u1f5f&#x27;, &#x27;\u03a9\u1f5f&#x27;]"}, {"fullname": "formulaic_mechanics.letters.double_consonants", "modulename": "formulaic_mechanics.letters", "qualname": "double_consonants", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u03b6&#x27;, &#x27;\u0396&#x27;, &#x27;\u03be&#x27;, &#x27;\u039e&#x27;, &#x27;\u03c8&#x27;, &#x27;\u03a8&#x27;]"}, {"fullname": "formulaic_mechanics.letters.mutes", "modulename": "formulaic_mechanics.letters", "qualname": "mutes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u03c0&#x27;, &#x27;\u03a0&#x27;, &#x27;\u03b2&#x27;, &#x27;\u0392&#x27;, &#x27;\u03c6&#x27;, &#x27;\u03a6&#x27;, &#x27;\u03c4&#x27;, &#x27;\u03a4&#x27;, &#x27;\u03b4&#x27;, &#x27;\u0394&#x27;, &#x27;\u03b8&#x27;, &#x27;\u0398&#x27;, &#x27;\u03ba&#x27;, &#x27;\u039a&#x27;, &#x27;\u03b3&#x27;, &#x27;\u0393&#x27;, &#x27;\u03c7&#x27;, &#x27;\u03a7&#x27;]"}, {"fullname": "formulaic_mechanics.letters.liquids", "modulename": "formulaic_mechanics.letters", "qualname": "liquids", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;\u03bb&#x27;, &#x27;\u039b&#x27;, &#x27;\u03c1&#x27;, &#x27;\u03a1&#x27;]"}, {"fullname": "formulaic_mechanics.line_sets", "modulename": "formulaic_mechanics.line_sets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.line_sets.find_repeated_line_sets", "modulename": "formulaic_mechanics.line_sets", "qualname": "find_repeated_line_sets", "kind": "function", "doc": "<p>Finds sets of repeated lines in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/repeated_line_sets.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nbigram_expectancies : DataFrame\n    contains all bigrams and their expectancies\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains all sets of repeated lines in the Homeric corpus and their expectancies</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">bigram_expectancies</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.line_sets.get_repeated_lines_in_book", "modulename": "formulaic_mechanics.line_sets", "qualname": "get_repeated_lines_in_book", "kind": "function", "doc": "<p>Finds repeated lines in a given book.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/repeated_lines_[text][book].csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus (use corpus.me_by_line_df)\ntext : String\n    name of the text (Iliad or Odyssey)\nbook : int\n    book number in text</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains all repeated lines in the specified book</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">book</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics", "modulename": "formulaic_mechanics.meter_mechanics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.meter_mechanics.full_metrical_distribution", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "full_metrical_distribution", "kind": "function", "doc": "<p>Counts metrical patterns in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/metrical_pattern_counts.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus, including scansion of each line\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains counts of the 32 metrical patterns in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.get_hemistiches", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "get_hemistiches", "kind": "function", "doc": "<p>Reads all csv files in data/meter/meter_files to a pandas dataframe.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>to_file : boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains meters and hemistiches for each line in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.count_meters_by_text", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "count_meters_by_text", "kind": "function", "doc": "<p>Returns a table with counts of meter types for the Iliad and the Odyssey.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus, including scansion of each line (use corpus.full_corpus)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pivot_table\n    counts of meter types for the Iliad and the Odyssey</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.count_feet", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "count_feet", "kind": "function", "doc": "<p>Counts feet shapes (dactyl, spondee, anceps) in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/feet_shape_counts.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus, including scansion of each line (use Corpus.full_corpus)\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains counts feet shapes in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.count_unit", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "count_unit", "kind": "function", "doc": "<p>Helper method for dactyl/spondee counts.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>meters : list\n    list of lists; each sub-list is a meter string (e.g. DSDSDA)\nunit : string\n    'D' or 'S'; unit to count\nfoot : int\n    in which foot to count unit types</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>int\n    count of <code>unit</code> in <code>foot</code> position in <code>meters</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">meters</span>, </span><span class=\"param\"><span class=\"n\">unit</span>, </span><span class=\"param\"><span class=\"n\">foot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.foot_type_and_position", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "foot_type_and_position", "kind": "function", "doc": "<p>Counts feet shapes (dactyl, spondee, anceps) in line locations in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/foot_shapes_by_position_counts.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus, including scansion of each line (use Corpus.full_corpus)\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains counts feet shapes in the Homeric corpus, grouped by foot position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.convert_ftp_to_percent", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "convert_ftp_to_percent", "kind": "function", "doc": "<p>Counts feet shapes (dactyl, spondee, anceps) in line locations in the Homeric corpus.\nConverts those counts to percents and stores information in dataframe.\nThis is the same method as <code>foot_type_and_position</code>, but returns percentages.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/foot_shapes_by_position_counts.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus, including scansion of each line (use Corpus.full_corpus)\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains percents/frequencies of feet shapes in the Homeric corpus, grouped by foot position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.feet_by_book", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "feet_by_book", "kind": "function", "doc": "<p>Counts feet shapes (dactyl, spondee, anceps) grouped by book in the Homeric corpus.\nOptionally stores this information in a .csv file for easy data loading.\nCSV File location: data/dactyls_spondees_by_book.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus, including scansion of each line (use Corpus.full_corpus)\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains feet shapes (dactyl, spondee, anceps) grouped by book</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.oneway_anova_meter_me", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "oneway_anova_meter_me", "kind": "function", "doc": "<p>Performs a one-way ANOVA using metrical pattern as the independent variable and mutual expectancy as the\ndependent variable.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    use corpus.full_corpus</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    computed F statistic of the test\nfloat\n    the associated p-value from the F distribution</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.tukey_hsd_meter_me", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "tukey_hsd_meter_me", "kind": "function", "doc": "<p>Performs a Tukey HSD post-hoc test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    use corpus.full_corpus</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>string\n    summary of post-hoc test results</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.metrical_pattern_linear_regression", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "metrical_pattern_linear_regression", "kind": "function", "doc": "<p>Performs a linear regression using metrical pattern as the independent variable and mutual expectancy as the\ndependent variable. Prints model summary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    use corpus.full_corpus</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>model\n    linear regression model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.foot_placement_linear_regression", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "foot_placement_linear_regression", "kind": "function", "doc": "<p>Performs a linear regression using metrical foot as the independent variable and spondee/dactyl as the\ndependent variable. Prints model summary. Relies on data/me_by_line_meter_split.csv.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>model\n    linear regression model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.avg_me_by_foot_placement", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "avg_me_by_foot_placement", "kind": "function", "doc": "<p>Calculates average mutual expectancy for each possible foot configuration. Relies on\ndata/me_by_line_meter_split.csv.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dictionary\n    average mutual expectancy by foot and shape</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.describe_caesura_data", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "describe_caesura_data", "kind": "function", "doc": "<p>Prints out information about caesura distributions in the Homeric corpus.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>caesura_df : DataFrame\n    contains text of Homeric corpus, including scansion of each line</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">caesura_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.meter_mechanics.compare_meter", "modulename": "formulaic_mechanics.meter_mechanics", "qualname": "compare_meter", "kind": "function", "doc": "<p>Compares the numbers of dactyls and spondees in two given corpora.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus1 : DataFrame\n    first corpus to use</p>\n\n<p>corpus2: DataFrame\n    second corpus to use</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dictionary\n    Contains numbers of dactyls and spondees in two given corpora</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus1</span>, </span><span class=\"param\"><span class=\"n\">corpus2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.mutual_expectancy", "modulename": "formulaic_mechanics.mutual_expectancy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.mutual_expectancy.expectancy", "modulename": "formulaic_mechanics.mutual_expectancy", "qualname": "expectancy", "kind": "function", "doc": "<p>Calculates mutual expectancy for a phrase of line-length or less.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>phrase : String\n    target phrase to calculate mutual expectancy\nexpectancies : DataFrame\n    contains all bigrams and their expectancies</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Float\n    mutual expectancy for given phrase</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">phrase</span>, </span><span class=\"param\"><span class=\"n\">expectancies</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.mutual_expectancy.geometric_passage_expectancy", "modulename": "formulaic_mechanics.mutual_expectancy", "qualname": "geometric_passage_expectancy", "kind": "function", "doc": "<p>Calculates (geometric) mutual expectancy for a passage (more than length of a line).\nNot recommended; Recommend use arithmetic passage expectancy.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>passage : String\n    target passage to calculate mutual expectancy\nsplit_on : String\n    demarcates new lines in passage\nbigram_expectancies : DataFrame\n    contains all bigrams and their expectancies</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Float\n    geometric mutual expectancy for given passage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">passage</span>, </span><span class=\"param\"><span class=\"n\">bigram_expectancies</span>, </span><span class=\"param\"><span class=\"n\">split_on</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.mutual_expectancy.arithmetic_passage_expectancy", "modulename": "formulaic_mechanics.mutual_expectancy", "qualname": "arithmetic_passage_expectancy", "kind": "function", "doc": "<p>Calculates arithmetic mutual expectancy for a passage (more than length of a line).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>passage : String\n    target passage to calculate mutual expectancy\nsplit_on : String\n    demarcates new lines in passage\nbigram_expectancies : DataFrame\n    contains all bigrams and their expectancies</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Float\n    arithmetic mutual expectancy for given passage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">passage</span>, </span><span class=\"param\"><span class=\"n\">bigram_expectancies</span>, </span><span class=\"param\"><span class=\"n\">split_on</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.mutual_expectancy.me_by_book_geometric", "modulename": "formulaic_mechanics.mutual_expectancy", "qualname": "me_by_book_geometric", "kind": "function", "doc": "<p>NOT RECOMMENDED: USE ARITHMETIC MUTUAL EXPECTANCY FOR PASSAGE-LENGTH TEXT\nComputes geometric mutual expectancy for each book in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/me_by_book_geometric.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nbigram_expectancies : DataFrame\n    contains all bigrams and their expectancies\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains computed geometric expectancies for each book in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">bigram_expectancies</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.mutual_expectancy.me_by_book_arithmetic", "modulename": "formulaic_mechanics.mutual_expectancy", "qualname": "me_by_book_arithmetic", "kind": "function", "doc": "<p>RECOMMENDED FOR PASSAGE-LENGTH TEXT\nComputes arithmetic mutual expectancy for each book in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/me_by_book_arithmetic.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nbigram_expectancies : DataFrame\n    contains all bigrams and their expectancies\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains computed arithmetic expectancies for each book in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">bigram_expectancies</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.mutual_expectancy.me_by_line", "modulename": "formulaic_mechanics.mutual_expectancy", "qualname": "me_by_line", "kind": "function", "doc": "<p>Computes  mutual expectancy for each line in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/me_by_line.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nbigram_expectancies : DataFrame\n    contains all bigrams and their expectancies\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains mutual expectancy for each line in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">bigram_expectancies</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.mutual_expectancy.me_by_meter", "modulename": "formulaic_mechanics.mutual_expectancy", "qualname": "me_by_meter", "kind": "function", "doc": "<p>Computes (arithmetic)  mutual expectancy for each metrical pattern in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/me_by_meter.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains mutual expectancy for each metrical pattern in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.mutual_expectancy.same_me_diff_count_bigrams", "modulename": "formulaic_mechanics.mutual_expectancy", "qualname": "same_me_diff_count_bigrams", "kind": "function", "doc": "<p>Finds all bigrams with same frequencies and different counts.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/same_me_diff_count_bigrams.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>bigram_expectancies : DataFrame\n    contains all bigrams and their expectancies\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    all bigrams with same frequencies and different counts</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bigram_expectancies</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.n_grams", "modulename": "formulaic_mechanics.n_grams", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.n_grams.count_bigrams", "modulename": "formulaic_mechanics.n_grams", "qualname": "count_bigrams", "kind": "function", "doc": "<p>Counts all bigrams in the Homeric corpus.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nquiet : boolean\n    If True, include print statements.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains all bigrams and their counts</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.n_grams.filemaker_bigram_frequency", "modulename": "formulaic_mechanics.n_grams", "qualname": "filemaker_bigram_frequency", "kind": "function", "doc": "<p>Computes forward and backward frequency of each bigram in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/bigram_frequencies.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>bigrams : DataFrame\n    contains all bigrams, columns are word1, word2, and count\n    obtain from n_grams.count_bigrams\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains all bigrams and their forward and backward frequencies</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bigrams</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.n_grams.filemaker_bigram_expectancy", "modulename": "formulaic_mechanics.n_grams", "qualname": "filemaker_bigram_expectancy", "kind": "function", "doc": "<p>Computes mutual expectancy of each bigram in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/bigram_expectancies.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>bigram_frequencies : DataFrame\n    contains all bigrams and their forward and backward frequencies\n    obtain from n_grams.filemaker_bigram_frequency\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains all bigrams and their expectancies</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bigram_frequencies</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.n_grams.count_trigrams", "modulename": "formulaic_mechanics.n_grams", "qualname": "count_trigrams", "kind": "function", "doc": "<p>Computes mutual expectancy of each trigram in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/trigram_expectancies.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nexpectancies : DataFrame\n    contains all bigrams and their expectancies\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains all trigrams and their expectancies</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">expectancies</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.n_grams.count_quadgrams", "modulename": "formulaic_mechanics.n_grams", "qualname": "count_quadgrams", "kind": "function", "doc": "<p>Computes mutual expectancy of each quadgram in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/trigram_expectancies.csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nexpectancies : DataFrame\n    contains all bigrams and their expectancies\nto_file : Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains all quadgrams and their expectancies</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">expectancies</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary", "modulename": "formulaic_mechanics.vocabulary", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "formulaic_mechanics.vocabulary.count_words", "modulename": "formulaic_mechanics.vocabulary", "qualname": "count_words", "kind": "function", "doc": "<p>Counts all words in the Homeric corpus.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nto_file: Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains statistics about words counts in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.corpus_book_counts", "modulename": "formulaic_mechanics.vocabulary", "qualname": "corpus_book_counts", "kind": "function", "doc": "<p>Counts all words in the Homeric corpus.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nto_file: Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains statistics about words counts in the Homeric corpus, by book</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.vocabulary_overlaps", "modulename": "formulaic_mechanics.vocabulary", "qualname": "vocabulary_overlaps", "kind": "function", "doc": "<p>Compares vocabularies of each book in the Homeric corpus.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nto_file: Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    statistics about vocabulary overlap for each pair of books in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.calculate_lexical_diversity", "modulename": "formulaic_mechanics.vocabulary", "qualname": "calculate_lexical_diversity", "kind": "function", "doc": "<p>Computes lexical diversity statistics for each book in the Homeric canon.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nto_file: Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    statistics about lexical diversity for each book in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.count_hapax", "modulename": "formulaic_mechanics.vocabulary", "qualname": "count_hapax", "kind": "function", "doc": "<p>Counts hapax legomena (forms) for the Iliad and the Odyssey.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nto_file: Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    statistics about hapax legomena (forms) for the Iliad and the Odyssey</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.hapax_distribution", "modulename": "formulaic_mechanics.vocabulary", "qualname": "hapax_distribution", "kind": "function", "doc": "<p>Find locations of hapax legomena within text.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nto_file: Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Locations of corpus-level hapax legomena within the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.proper_noun_stats", "modulename": "formulaic_mechanics.vocabulary", "qualname": "proper_noun_stats", "kind": "function", "doc": "<p>Find locations of proper nouns within text.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus and mutual expectancies\nto_file: Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Locations of proper nouns within the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.corpus_word_counts", "modulename": "formulaic_mechanics.vocabulary", "qualname": "corpus_word_counts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.compare_vocab_books", "modulename": "formulaic_mechanics.vocabulary", "qualname": "compare_vocab_books", "kind": "function", "doc": "<p>Compares the vocabulary of two specific books in the Homeric corpus.\nStores this information in a .csv file for easy data loading.\nCSV File location: data/compare_vocab_[text1][book1]_[text2][book2].csv</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus and mutual expectancies\ntext1 : String\n    name of the first text (Iliad or Odyssey)\nbook1 : int\n    book number of first text\ntext2 : String\n    name of the second text (Iliad or Odyssey)\nbook2 : int\n    book number of the second text</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    contains all words in each book and their counts</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">text1</span>, </span><span class=\"param\"><span class=\"n\">book1</span>, </span><span class=\"param\"><span class=\"n\">text2</span>, </span><span class=\"param\"><span class=\"n\">book2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.cs_preprocess", "modulename": "formulaic_mechanics.vocabulary", "qualname": "cs_preprocess", "kind": "function", "doc": "<p>Returns text of book as a space-separated string.\nUsed a preprocessing step for cosine similarity computation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus (recommend full_corpus)\ntarget_text : String\n    name of the target text (Iliad or Odyssey)\ntarget_book : int\n    book number of target book</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>string\n    space-separated string of target book</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">target_text</span>, </span><span class=\"param\"><span class=\"n\">target_book</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.cosine_similarity", "modulename": "formulaic_mechanics.vocabulary", "qualname": "cosine_similarity", "kind": "function", "doc": "<p>Compute the cosine similarity of two specific books in the Homeric corpus.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus (recommend full_corpus)\ntext1 : String\n    name of the first text (Iliad or Odyssey)\nbook1 : int\n    book number of first text\ntext2 : String\n    name of the second text (Iliad or Odyssey)\nbook2 : int\n    book number of the second text</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    cosine similarity of two specific books in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">text1</span>, </span><span class=\"param\"><span class=\"n\">book1</span>, </span><span class=\"param\"><span class=\"n\">text2</span>, </span><span class=\"param\"><span class=\"n\">book2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "formulaic_mechanics.vocabulary.all_cosine_sims", "modulename": "formulaic_mechanics.vocabulary", "qualname": "all_cosine_sims", "kind": "function", "doc": "<p>Computes cosine similarity for each pair of books in the corpus.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>corpus : DataFrame\n    contains text of Homeric corpus\nto_file: Boolean\n    if True, save DataFrame to .csv</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    cosine similarity for each pair of books in the Homeric corpus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corpus</span>, </span><span class=\"param\"><span class=\"n\">to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();