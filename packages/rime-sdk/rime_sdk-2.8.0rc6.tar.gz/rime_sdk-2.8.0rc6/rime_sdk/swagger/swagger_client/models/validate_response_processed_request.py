# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidateResponseProcessedRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'RimeUUID',
        'input_truncated': 'str',
        'input_token_count': 'int',
        'contexts_truncated': 'str',
        'contexts_token_count': 'int',
        'output_truncated': 'str',
        'output_token_count': 'int'
    }

    attribute_map = {
        'request_id': 'requestId',
        'input_truncated': 'inputTruncated',
        'input_token_count': 'inputTokenCount',
        'contexts_truncated': 'contextsTruncated',
        'contexts_token_count': 'contextsTokenCount',
        'output_truncated': 'outputTruncated',
        'output_token_count': 'outputTokenCount'
    }

    def __init__(self, request_id=None, input_truncated=None, input_token_count=None, contexts_truncated=None, contexts_token_count=None, output_truncated=None, output_token_count=None):  # noqa: E501
        """ValidateResponseProcessedRequest - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._input_truncated = None
        self._input_token_count = None
        self._contexts_truncated = None
        self._contexts_token_count = None
        self._output_truncated = None
        self._output_token_count = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if input_truncated is not None:
            self.input_truncated = input_truncated
        if input_token_count is not None:
            self.input_token_count = input_token_count
        if contexts_truncated is not None:
            self.contexts_truncated = contexts_truncated
        if contexts_token_count is not None:
            self.contexts_token_count = contexts_token_count
        if output_truncated is not None:
            self.output_truncated = output_truncated
        if output_token_count is not None:
            self.output_token_count = output_token_count

    @property
    def request_id(self):
        """Gets the request_id of this ValidateResponseProcessedRequest.  # noqa: E501


        :return: The request_id of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ValidateResponseProcessedRequest.


        :param request_id: The request_id of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: RimeUUID
        """

        self._request_id = request_id

    @property
    def input_truncated(self):
        """Gets the input_truncated of this ValidateResponseProcessedRequest.  # noqa: E501

        Information about the `user_input_text`. The raw input is truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.  # noqa: E501

        :return: The input_truncated of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: str
        """
        return self._input_truncated

    @input_truncated.setter
    def input_truncated(self, input_truncated):
        """Sets the input_truncated of this ValidateResponseProcessedRequest.

        Information about the `user_input_text`. The raw input is truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.  # noqa: E501

        :param input_truncated: The input_truncated of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: str
        """

        self._input_truncated = input_truncated

    @property
    def input_token_count(self):
        """Gets the input_token_count of this ValidateResponseProcessedRequest.  # noqa: E501


        :return: The input_token_count of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: int
        """
        return self._input_token_count

    @input_token_count.setter
    def input_token_count(self, input_token_count):
        """Sets the input_token_count of this ValidateResponseProcessedRequest.


        :param input_token_count: The input_token_count of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: int
        """

        self._input_token_count = input_token_count

    @property
    def contexts_truncated(self):
        """Gets the contexts_truncated of this ValidateResponseProcessedRequest.  # noqa: E501

        Information about the `contexts`. The contexts are truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.  # noqa: E501

        :return: The contexts_truncated of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: str
        """
        return self._contexts_truncated

    @contexts_truncated.setter
    def contexts_truncated(self, contexts_truncated):
        """Sets the contexts_truncated of this ValidateResponseProcessedRequest.

        Information about the `contexts`. The contexts are truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.  # noqa: E501

        :param contexts_truncated: The contexts_truncated of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: str
        """

        self._contexts_truncated = contexts_truncated

    @property
    def contexts_token_count(self):
        """Gets the contexts_token_count of this ValidateResponseProcessedRequest.  # noqa: E501


        :return: The contexts_token_count of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: int
        """
        return self._contexts_token_count

    @contexts_token_count.setter
    def contexts_token_count(self, contexts_token_count):
        """Sets the contexts_token_count of this ValidateResponseProcessedRequest.


        :param contexts_token_count: The contexts_token_count of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: int
        """

        self._contexts_token_count = contexts_token_count

    @property
    def output_truncated(self):
        """Gets the output_truncated of this ValidateResponseProcessedRequest.  # noqa: E501

        Information about the `output_text`. The output text is truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.  # noqa: E501

        :return: The output_truncated of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: str
        """
        return self._output_truncated

    @output_truncated.setter
    def output_truncated(self, output_truncated):
        """Sets the output_truncated of this ValidateResponseProcessedRequest.

        Information about the `output_text`. The output text is truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.  # noqa: E501

        :param output_truncated: The output_truncated of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: str
        """

        self._output_truncated = output_truncated

    @property
    def output_token_count(self):
        """Gets the output_token_count of this ValidateResponseProcessedRequest.  # noqa: E501


        :return: The output_token_count of this ValidateResponseProcessedRequest.  # noqa: E501
        :rtype: int
        """
        return self._output_token_count

    @output_token_count.setter
    def output_token_count(self, output_token_count):
        """Sets the output_token_count of this ValidateResponseProcessedRequest.


        :param output_token_count: The output_token_count of this ValidateResponseProcessedRequest.  # noqa: E501
        :type: int
        """

        self._output_token_count = output_token_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidateResponseProcessedRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateResponseProcessedRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
