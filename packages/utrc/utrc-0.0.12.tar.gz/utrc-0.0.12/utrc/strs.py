# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_strs.ipynb.

# %% auto 0
__all__ = ['snakecase', 'prepart', 'midpart', 'endpart', 'is_not_named']

# %% ../nbs/09_strs.ipynb 6
import re

# %% ../nbs/09_strs.ipynb 8
from typing import overload

# %% ../nbs/09_strs.ipynb 11
#| export

# %% ../nbs/09_strs.ipynb 13
try: import pandas as pd
except: ...

# %% ../nbs/09_strs.ipynb 15
#| export


# %% ../nbs/09_strs.ipynb 17
#| export


# %% ../nbs/09_strs.ipynb 19
from nchr import U1, SPACE
from nlit import INDEX, NAME
from quac import strq
from chck import isdf, isstr, isnilstr, isnone

# %% ../nbs/09_strs.ipynb 21
from .cons import WORDS_TO_SNAKE_WITH_UPPERCASE

# %% ../nbs/09_strs.ipynb 23
def snakecase(s: str) -> str:
    '''Convert a string to snake_case'''
    matches = re.findall(WORDS_TO_SNAKE_WITH_UPPERCASE, s)
    return U1.join(matches).lower()

# %% ../nbs/09_strs.ipynb 24
def prepart(s: str, sep: strq = SPACE) -> str:
    pre, *_ = s.partition(sep)
    return pre

def midpart(s: str, sep: strq = SPACE) -> str:
    _, mid, _ = s.partition(sep)
    return mid

def endpart(s: str, sep: strq = SPACE) -> str:
    *_, end = s.partition(sep)
    return end

# %% ../nbs/09_strs.ipynb 25
@overload
def is_not_named(obj: object) -> bool: ...
@overload
def is_not_named(index: pd.Index) -> bool: ...
@overload
def is_not_named(series: pd.Series) -> bool: ...
@overload
def is_not_named(df: pd.DataFrame) -> bool: ...
@overload
def is_not_named(name: str) -> bool: ...
def is_not_named(item: str) -> bool:
    '''Check if a pandas `Index`, `Series`, or `DataFrame`'s index does not have a name, its `name` is `None`, or `''`.
    
    Parameters
    ----------
    item : object, pd.Index, pd.Series, pd.DataFrame, str
        The item to check for a named or unnamed status.

    Returns
    -------
    bool
        True if the item is not named, False otherwise.
    
    Notes
    -----
    `is_not_named` has the following overloaded function signatures:
        - is_not_named(obj: object) -> bool
        - is_not_named(index: pd.Index) -> bool
        - is_not_named(series: pd.Series) -> bool
        - is_not_named(df: pd.DataFrame) -> bool
        - is_not_named(name: str) -> bool
    '''
    if isdf(item): 
        return is_not_named(getattr(item, INDEX, item))
    elif isstr(item): 
        return isnone(item) or isnilstr(item)
    return isnone(getattr(item, NAME, item))

# %% ../nbs/09_strs.ipynb 27
#| export
