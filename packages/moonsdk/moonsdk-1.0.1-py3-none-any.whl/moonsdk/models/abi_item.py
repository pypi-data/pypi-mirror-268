# coding: utf-8

"""
    moon-vault-api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from moonsdk.models.abi_input import AbiInput
from moonsdk.models.abi_output import AbiOutput
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AbiItem(BaseModel):
    """
    The abi to parse the log object of the contract
    """ # noqa: E501
    anonymous: Optional[StrictBool] = None
    constant: Optional[StrictBool] = None
    inputs: Optional[List[AbiInput]] = None
    name: Optional[StrictStr] = None
    outputs: Optional[List[AbiOutput]] = None
    payable: Optional[StrictBool] = None
    state_mutability: Optional[StrictStr] = Field(default=None, alias="stateMutability")
    type: StrictStr
    gas: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["anonymous", "constant", "inputs", "name", "outputs", "payable", "stateMutability", "type", "gas"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AbiItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in inputs (list)
        _items = []
        if self.inputs:
            for _item in self.inputs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item in self.outputs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AbiItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "anonymous": obj.get("anonymous"),
            "constant": obj.get("constant"),
            "inputs": [AbiInput.from_dict(_item) for _item in obj.get("inputs")] if obj.get("inputs") is not None else None,
            "name": obj.get("name"),
            "outputs": [AbiOutput.from_dict(_item) for _item in obj.get("outputs")] if obj.get("outputs") is not None else None,
            "payable": obj.get("payable"),
            "stateMutability": obj.get("stateMutability"),
            "type": obj.get("type"),
            "gas": obj.get("gas")
        })
        return _obj


