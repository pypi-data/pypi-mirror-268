# coding: utf-8

"""
    moon-vault-api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from moonsdk.models.transaction_input_meta_data import TransactionInputMetaData
from moonsdk.models.transaction_input_supported_params import TransactionInputSupportedParams
from moonsdk.models.transaction_input_wallet import TransactionInputWallet
from typing import Optional, Set
from typing_extensions import Self

class TransactionInput(BaseModel):
    """
    TransactionInput
    """ # noqa: E501
    supported_params: TransactionInputSupportedParams = Field(alias="supportedParams")
    wallet: TransactionInputWallet
    meta_data: TransactionInputMetaData = Field(alias="metaData")
    originating_host: StrictStr = Field(alias="originatingHost")
    partner_context: StrictStr = Field(alias="partnerContext")
    uuid: StrictStr
    network: StrictStr
    payment_method: StrictStr = Field(alias="paymentMethod")
    type: StrictStr
    amount: Union[StrictFloat, StrictInt]
    destination: StrictStr
    source: StrictStr
    onramp: StrictStr
    __properties: ClassVar[List[str]] = ["supportedParams", "wallet", "metaData", "originatingHost", "partnerContext", "uuid", "network", "paymentMethod", "type", "amount", "destination", "source", "onramp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of supported_params
        if self.supported_params:
            _dict['supportedParams'] = self.supported_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wallet
        if self.wallet:
            _dict['wallet'] = self.wallet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meta_data
        if self.meta_data:
            _dict['metaData'] = self.meta_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "supportedParams": TransactionInputSupportedParams.from_dict(obj["supportedParams"]) if obj.get("supportedParams") is not None else None,
            "wallet": TransactionInputWallet.from_dict(obj["wallet"]) if obj.get("wallet") is not None else None,
            "metaData": TransactionInputMetaData.from_dict(obj["metaData"]) if obj.get("metaData") is not None else None,
            "originatingHost": obj.get("originatingHost"),
            "partnerContext": obj.get("partnerContext"),
            "uuid": obj.get("uuid"),
            "network": obj.get("network"),
            "paymentMethod": obj.get("paymentMethod"),
            "type": obj.get("type"),
            "amount": obj.get("amount"),
            "destination": obj.get("destination"),
            "source": obj.get("source"),
            "onramp": obj.get("onramp")
        })
        return _obj


