# coding: utf-8

"""
    moon-vault-api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from moonsdk.models.aave_reserves_data import AaveReservesData
from moonsdk.models.account_response import AccountResponse
from moonsdk.models.balance_response import BalanceResponse
from moonsdk.models.bitcoin_transaction_output import BitcoinTransactionOutput
from moonsdk.models.broad_cast_raw_transaction_response import BroadCastRawTransactionResponse
from moonsdk.models.ens_resolve_response import EnsResolveResponse
from moonsdk.models.ens_reverse_resolve_response import ENSReverseResolveResponse
from moonsdk.models.erc1155_response import Erc1155Response
from moonsdk.models.erc20_response import Erc20Response
from moonsdk.models.erc721_response import Erc721Response
from moonsdk.models.nonce_response import NonceResponse
from moonsdk.models.sign_message import SignMessage
from moonsdk.models.transaction import Transaction
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

ACCOUNTCONTROLLERRESPONSEDATA_ANY_OF_SCHEMAS = ["AaveReservesData", "AccountResponse", "BalanceResponse", "BitcoinTransactionOutput", "BroadCastRawTransactionResponse", "ENSReverseResolveResponse", "EnsResolveResponse", "Erc1155Response", "Erc20Response", "Erc721Response", "NonceResponse", "SignMessage", "Transaction"]

class AccountControllerResponseData(BaseModel):
    """
    AccountControllerResponseData
    """

    # data type: NonceResponse
    anyof_schema_1_validator: Optional[NonceResponse] = None
    # data type: BalanceResponse
    anyof_schema_2_validator: Optional[BalanceResponse] = None
    # data type: Transaction
    anyof_schema_3_validator: Optional[Transaction] = None
    # data type: AccountResponse
    anyof_schema_4_validator: Optional[AccountResponse] = None
    # data type: SignMessage
    anyof_schema_5_validator: Optional[SignMessage] = None
    # data type: EnsResolveResponse
    anyof_schema_6_validator: Optional[EnsResolveResponse] = None
    # data type: ENSReverseResolveResponse
    anyof_schema_7_validator: Optional[ENSReverseResolveResponse] = None
    # data type: AaveReservesData
    anyof_schema_8_validator: Optional[AaveReservesData] = None
    # data type: Erc20Response
    anyof_schema_9_validator: Optional[Erc20Response] = None
    # data type: Erc1155Response
    anyof_schema_10_validator: Optional[Erc1155Response] = None
    # data type: BroadCastRawTransactionResponse
    anyof_schema_11_validator: Optional[BroadCastRawTransactionResponse] = None
    # data type: BitcoinTransactionOutput
    anyof_schema_12_validator: Optional[BitcoinTransactionOutput] = None
    # data type: Erc721Response
    anyof_schema_13_validator: Optional[Erc721Response] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[AaveReservesData, AccountResponse, BalanceResponse, BitcoinTransactionOutput, BroadCastRawTransactionResponse, ENSReverseResolveResponse, EnsResolveResponse, Erc1155Response, Erc20Response, Erc721Response, NonceResponse, SignMessage, Transaction]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[ACCOUNTCONTROLLERRESPONSEDATA_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = AccountControllerResponseData.model_construct()
        error_messages = []
        # validate data type: NonceResponse
        if not isinstance(v, NonceResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NonceResponse`")
        else:
            return v

        # validate data type: BalanceResponse
        if not isinstance(v, BalanceResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BalanceResponse`")
        else:
            return v

        # validate data type: Transaction
        if not isinstance(v, Transaction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Transaction`")
        else:
            return v

        # validate data type: AccountResponse
        if not isinstance(v, AccountResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AccountResponse`")
        else:
            return v

        # validate data type: SignMessage
        if not isinstance(v, SignMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SignMessage`")
        else:
            return v

        # validate data type: EnsResolveResponse
        if not isinstance(v, EnsResolveResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EnsResolveResponse`")
        else:
            return v

        # validate data type: ENSReverseResolveResponse
        if not isinstance(v, ENSReverseResolveResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ENSReverseResolveResponse`")
        else:
            return v

        # validate data type: AaveReservesData
        if not isinstance(v, AaveReservesData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AaveReservesData`")
        else:
            return v

        # validate data type: Erc20Response
        if not isinstance(v, Erc20Response):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Erc20Response`")
        else:
            return v

        # validate data type: Erc1155Response
        if not isinstance(v, Erc1155Response):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Erc1155Response`")
        else:
            return v

        # validate data type: BroadCastRawTransactionResponse
        if not isinstance(v, BroadCastRawTransactionResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BroadCastRawTransactionResponse`")
        else:
            return v

        # validate data type: BitcoinTransactionOutput
        if not isinstance(v, BitcoinTransactionOutput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitcoinTransactionOutput`")
        else:
            return v

        # validate data type: Erc721Response
        if not isinstance(v, Erc721Response):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Erc721Response`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in AccountControllerResponseData with anyOf schemas: AaveReservesData, AccountResponse, BalanceResponse, BitcoinTransactionOutput, BroadCastRawTransactionResponse, ENSReverseResolveResponse, EnsResolveResponse, Erc1155Response, Erc20Response, Erc721Response, NonceResponse, SignMessage, Transaction. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[NonceResponse] = None
        try:
            instance.actual_instance = NonceResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[BalanceResponse] = None
        try:
            instance.actual_instance = BalanceResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[Transaction] = None
        try:
            instance.actual_instance = Transaction.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[AccountResponse] = None
        try:
            instance.actual_instance = AccountResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[SignMessage] = None
        try:
            instance.actual_instance = SignMessage.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[EnsResolveResponse] = None
        try:
            instance.actual_instance = EnsResolveResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[ENSReverseResolveResponse] = None
        try:
            instance.actual_instance = ENSReverseResolveResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[AaveReservesData] = None
        try:
            instance.actual_instance = AaveReservesData.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[Erc20Response] = None
        try:
            instance.actual_instance = Erc20Response.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[Erc1155Response] = None
        try:
            instance.actual_instance = Erc1155Response.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[BroadCastRawTransactionResponse] = None
        try:
            instance.actual_instance = BroadCastRawTransactionResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[BitcoinTransactionOutput] = None
        try:
            instance.actual_instance = BitcoinTransactionOutput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[Erc721Response] = None
        try:
            instance.actual_instance = Erc721Response.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AccountControllerResponseData with anyOf schemas: AaveReservesData, AccountResponse, BalanceResponse, BitcoinTransactionOutput, BroadCastRawTransactionResponse, ENSReverseResolveResponse, EnsResolveResponse, Erc1155Response, Erc20Response, Erc721Response, NonceResponse, SignMessage, Transaction. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


