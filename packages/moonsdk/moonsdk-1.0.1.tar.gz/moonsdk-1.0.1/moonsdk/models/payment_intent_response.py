# coding: utf-8

"""
    moon-vault-api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaymentIntentResponse(BaseModel):
    """
    PaymentIntentResponse
    """ # noqa: E501
    metadata: Optional[Dict[str, StrictStr]] = None
    uri: Optional[StrictStr] = None
    qr_code: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    destination: Optional[StrictStr] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    network: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    success: StrictBool
    __properties: ClassVar[List[str]] = ["metadata", "uri", "qr_code", "status", "destination", "amount", "network", "currency", "id", "message", "success"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaymentIntentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaymentIntentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadata": obj.get("metadata"),
            "uri": obj.get("uri"),
            "qr_code": obj.get("qr_code"),
            "status": obj.get("status"),
            "destination": obj.get("destination"),
            "amount": obj.get("amount"),
            "network": obj.get("network"),
            "currency": obj.get("currency"),
            "id": obj.get("id"),
            "message": obj.get("message"),
            "success": obj.get("success")
        })
        return _obj


