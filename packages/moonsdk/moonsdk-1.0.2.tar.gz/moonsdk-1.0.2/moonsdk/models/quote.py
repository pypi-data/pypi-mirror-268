# coding: utf-8

"""
    moon-vault-api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from moonsdk.models.available_payment_method import AvailablePaymentMethod
from typing import Optional, Set
from typing_extensions import Self

class Quote(BaseModel):
    """
    Quote
    """ # noqa: E501
    recommendations: List[StrictStr]
    payment_method: StrictStr = Field(alias="paymentMethod")
    quote_id: StrictStr = Field(alias="quoteId")
    ramp: StrictStr
    available_payment_methods: List[AvailablePaymentMethod] = Field(alias="availablePaymentMethods")
    payout: Union[StrictFloat, StrictInt]
    transaction_fee: Union[StrictFloat, StrictInt] = Field(alias="transactionFee")
    network_fee: Union[StrictFloat, StrictInt] = Field(alias="networkFee")
    rate: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["recommendations", "paymentMethod", "quoteId", "ramp", "availablePaymentMethods", "payout", "transactionFee", "networkFee", "rate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Quote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in available_payment_methods (list)
        _items = []
        if self.available_payment_methods:
            for _item in self.available_payment_methods:
                if _item:
                    _items.append(_item.to_dict())
            _dict['availablePaymentMethods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Quote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recommendations": obj.get("recommendations"),
            "paymentMethod": obj.get("paymentMethod"),
            "quoteId": obj.get("quoteId"),
            "ramp": obj.get("ramp"),
            "availablePaymentMethods": [AvailablePaymentMethod.from_dict(_item) for _item in obj["availablePaymentMethods"]] if obj.get("availablePaymentMethods") is not None else None,
            "payout": obj.get("payout"),
            "transactionFee": obj.get("transactionFee"),
            "networkFee": obj.get("networkFee"),
            "rate": obj.get("rate")
        })
        return _obj


