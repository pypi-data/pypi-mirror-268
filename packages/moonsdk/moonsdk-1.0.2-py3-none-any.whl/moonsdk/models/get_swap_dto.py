# coding: utf-8

"""
    moon-vault-api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetSwapDto(BaseModel):
    """
    GetSwapDto
    """ # noqa: E501
    src: StrictStr
    dst: StrictStr
    amount: StrictStr
    var_from: StrictStr = Field(alias="from")
    slippage: Union[StrictFloat, StrictInt]
    protocols: Optional[StrictStr] = None
    fee: Optional[StrictStr] = None
    disable_estimate: Optional[StrictBool] = Field(default=None, alias="disableEstimate")
    permit: Optional[StrictStr] = None
    include_tokens_info: Optional[StrictBool] = Field(default=None, alias="includeTokensInfo")
    include_protocols: Optional[StrictBool] = Field(default=None, alias="includeProtocols")
    compatibility: Optional[StrictBool] = None
    allow_partial_fill: Optional[StrictBool] = Field(default=None, alias="allowPartialFill")
    parts: Optional[StrictStr] = None
    main_route_parts: Optional[StrictStr] = Field(default=None, alias="mainRouteParts")
    connector_tokens: Optional[StrictStr] = Field(default=None, alias="connectorTokens")
    complexity_level: Optional[StrictStr] = Field(default=None, alias="complexityLevel")
    gas_limit: Optional[StrictStr] = Field(default=None, alias="gasLimit")
    gas_price: Optional[StrictStr] = Field(default=None, alias="gasPrice")
    referrer: Optional[StrictStr] = None
    receiver: Optional[StrictStr] = None
    chain_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="chainId")
    __properties: ClassVar[List[str]] = ["src", "dst", "amount", "from", "slippage", "protocols", "fee", "disableEstimate", "permit", "includeTokensInfo", "includeProtocols", "compatibility", "allowPartialFill", "parts", "mainRouteParts", "connectorTokens", "complexityLevel", "gasLimit", "gasPrice", "referrer", "receiver", "chainId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSwapDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSwapDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "src": obj.get("src"),
            "dst": obj.get("dst"),
            "amount": obj.get("amount"),
            "from": obj.get("from"),
            "slippage": obj.get("slippage"),
            "protocols": obj.get("protocols"),
            "fee": obj.get("fee"),
            "disableEstimate": obj.get("disableEstimate"),
            "permit": obj.get("permit"),
            "includeTokensInfo": obj.get("includeTokensInfo"),
            "includeProtocols": obj.get("includeProtocols"),
            "compatibility": obj.get("compatibility"),
            "allowPartialFill": obj.get("allowPartialFill"),
            "parts": obj.get("parts"),
            "mainRouteParts": obj.get("mainRouteParts"),
            "connectorTokens": obj.get("connectorTokens"),
            "complexityLevel": obj.get("complexityLevel"),
            "gasLimit": obj.get("gasLimit"),
            "gasPrice": obj.get("gasPrice"),
            "referrer": obj.get("referrer"),
            "receiver": obj.get("receiver"),
            "chainId": obj.get("chainId")
        })
        return _obj


