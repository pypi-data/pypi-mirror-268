
# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "stac-model"
version = "0.1.2"
description = "A PydanticV2 validation and serialization libary for the STAC ML Model Extension"
readme = "README.md"
authors = ["Ryan Avery <ryan@wherobots.com>"]
license = "Apache Software License 2.0"
repository = "https://github.com/rbavery/stac-model"
homepage = "https://github.com/rbavery/stac-model"
packages = [
  {include = "stac_model"}
]


# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  # UPDATEME with relevant keywords


# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 3 - Alpha",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Framework :: Pydantic",
  "Framework :: Pydantic :: 2",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Science/Research",
  "Topic :: File Formats :: JSON :: JSON Schema",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: GIS",
  "Topic :: Scientific/Engineering :: Image Processing",
  "Topic :: Scientific/Engineering :: Image Recognition",
]


[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"stac-model" = "stac_model.__main__:app"


[tool.poetry.dependencies]
python = "^3.10"

typer = {extras = ["all"], version = "^0.9.0"}
rich = "^13.7.0"
pydantic = "^2.6.3" # bug in post 2.3 https://github.com/pydantic/pydantic/issues/7720
pydantic-core = "^2"
pystac = "^1.9.0"
shapely = "^2"
jsonschema = "^4.21.1"

[tool.poetry.group.dev.dependencies]
mypy = "^1.0.0"
mypy-extensions = "^0.4.3"
pre-commit = "^2.21.0"
bandit = "^1.7.5"
safety = "^2.3.4"
pystac = "^1.10.0"  # custom validator required (https://github.com/stac-utils/pystac/pull/1320)

pydocstyle = {extras = ["toml"], version = "^6.2.0"}
pydoclint = "^0.3.0"

pytest = "^7.2.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.10.0"
pytest-timeout = "^2.2.0"
pytest-benchmark = "^4.0.0"
pytest-sugar = "^0.9.7"
pytest-click = "^1.1.0"
pytest-pikachu = "^1.0.0"
coverage = "^7.3.0"
ruff = "^0.2.2"

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "env",
    "venv",
    "node_modules",
]
respect-gitignore = true
line-length = 120
show-fixes = true

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]

[tool.mypy]
# https://github.com/python/mypy
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = "3.10"
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

plugins = [
  "pydantic.mypy"
]


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pydocstyle]
# https://github.com/PyCQA/pydocstyle
# http://www.pydocstyle.org/en/stable/usage.html#available-options
convention = "google"
match_dir = "^(stac_model|tests)"
# ignore missing documentation, just validate provided ones
add_ignore = "D100,D101,D102,D103,D104,D105,D107,D200,D202,D204,D212,D401"

[tool.pydoclint]
# https://github.com/jsh9/pydoclint
# https://jsh9.github.io/pydoclint/how_to_config.html
style = "google"
exclude = '\.git|\.hg|\.mypy_cache|\.tox|.?v?env|__pycache__|_build|buck-out|dist|node_modules'
# don't require type hints, since we have them in the signature instead (don't duplicate)
arg-type-hints-in-docstring = false
arg-type-hints-in-signature = true
check-return-types = false

[tool.pytest.ini_options]
# https://github.com/pytest-dev/pytest
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =[
  "hooks",
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__",
  "node_modules",
]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
timeout = 1000

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
  "--pikachu"
]


[tool.coverage.run]
source = ["tests"]
branch = true


[tool.coverage.report]
exclude_also = [
  "def main",
  "if __name__ == .__main__.:"
]
fail_under = 50
show_missing = true


[tool.coverage.paths]
source = ["stac_model"]
