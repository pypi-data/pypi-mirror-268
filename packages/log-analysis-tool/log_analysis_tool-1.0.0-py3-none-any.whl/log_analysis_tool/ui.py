# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from log_analysis_tool import logo
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtWidgets import QDesktopWidget
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QSystemTrayIcon, QMenu, QAction,  QMessageBox


class Mainui(QtWidgets.QMainWindow):
    def setupUi(self):
        self.setMinimumSize(1000, 500)
        self.setWindowIcon(QIcon(':logo.png'))

        self.Center()

        self.resize(1158, 595)

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setWhatsThis("")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_process_log = QtWidgets.QWidget()
        self.tab_process_log.setObjectName("tab_process_log")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.tab_process_log)
        self.verticalLayout_4.setContentsMargins(0, 9, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.process_log_v_l = QtWidgets.QVBoxLayout()
        self.process_log_v_l.setSpacing(0)
        self.process_log_v_l.setObjectName("process_log_v_l")
        self.process_log_h_l = QtWidgets.QHBoxLayout()
        self.process_log_h_l.setObjectName("process_log_h_l")
        self.label_start_time = QtWidgets.QLabel(self.tab_process_log)
        self.label_start_time.setObjectName("label_start_time")
        self.process_log_h_l.addWidget(self.label_start_time)
        self.input_dt_start = QtWidgets.QDateTimeEdit(self.tab_process_log)
        self.input_dt_start.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.input_dt_start.setButtonSymbols(QtWidgets.QAbstractSpinBox.UpDownArrows)
        self.input_dt_start.setCorrectionMode(QtWidgets.QAbstractSpinBox.CorrectToPreviousValue)
        self.input_dt_start.setProperty("showGroupSeparator", False)
        self.input_dt_start.setCalendarPopup(True)
        self.input_dt_start.setTimeSpec(QtCore.Qt.LocalTime)
        self.input_dt_start.setObjectName("input_dt_start")
        self.process_log_h_l.addWidget(self.input_dt_start)
        self.label_end_time = QtWidgets.QLabel(self.tab_process_log)
        self.label_end_time.setObjectName("label_end_time")
        self.process_log_h_l.addWidget(self.label_end_time)
        self.input_dt_end = QtWidgets.QDateTimeEdit(self.tab_process_log)
        self.input_dt_end.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.input_dt_end.setCalendarPopup(True)
        self.input_dt_end.setObjectName("input_dt_end")
        self.process_log_h_l.addWidget(self.input_dt_end)
        self.btn_log = QtWidgets.QPushButton(self.tab_process_log)
        self.btn_log.setObjectName("btn_log")
        self.process_log_h_l.addWidget(self.btn_log)
        self.input_log = QtWidgets.QLineEdit(self.tab_process_log)
        self.input_log.setMouseTracking(False)
        self.input_log.setReadOnly(True)
        self.input_log.setObjectName("input_log")
        self.process_log_h_l.addWidget(self.input_log)
        self.label_csv = QtWidgets.QLabel(self.tab_process_log)
        self.process_log_h_l.addWidget(self.label_csv)
        self.input_csv = QtWidgets.QLineEdit(self.tab_process_log)
        self.input_csv.setReadOnly(True)
        self.input_csv.setObjectName("input_csv")
        self.process_log_h_l.addWidget(self.input_csv)
        self.label_img = QtWidgets.QLabel(self.tab_process_log)
        self.process_log_h_l.addWidget(self.label_img)
        self.input_img = QtWidgets.QLineEdit(self.tab_process_log)
        self.input_img.setReadOnly(True)
        self.input_img.setObjectName("input_img")
        self.process_log_h_l.addWidget(self.input_img)
        self.btn_site_save = QtWidgets.QPushButton(self.tab_process_log)
        self.process_log_h_l.addWidget(self.btn_site_save)
        self.input_result = QtWidgets.QLineEdit(self.tab_process_log)
        self.input_result.setReadOnly(True)
        self.input_result.setObjectName("input_result")
        self.process_log_h_l.addWidget(self.input_result)
        self.btn_save = QtWidgets.QPushButton(self.tab_process_log)
        self.btn_save.setObjectName("btn_save")
        self.process_log_h_l.addWidget(self.btn_save)
        self.process_log_v_l.addLayout(self.process_log_h_l)
        self.process_log_h_l_1 = QtWidgets.QHBoxLayout()
        self.process_log_h_l_1.setSpacing(6)
        self.process_log_h_l_1.setObjectName("process_log_h_l_1")
        self.process_log_v_l_1 = QtWidgets.QVBoxLayout()
        self.process_log_v_l_1.setObjectName("process_log_v_l_1")
        self.label_2 = QtWidgets.QLabel(self.tab_process_log)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_2.setStyleSheet("color:skyblue;")
        self.label_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.process_log_v_l_1.addWidget(self.label_2)
        self.tableView = QtWidgets.QTableView(self.tab_process_log)
        self.tableView.setObjectName("tableView")
        self.process_log_v_l_1.addWidget(self.tableView)
        self.process_log_h_l_1.addLayout(self.process_log_v_l_1)
        self.process_log_v_l_2 = QtWidgets.QVBoxLayout()
        self.process_log_v_l_2.setObjectName("process_log_v_l_2")
        self.label_3 = QtWidgets.QLabel(self.tab_process_log)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color:skyblue;")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.process_log_v_l_2.addWidget(self.label_3)
        self.tableView_1 = QtWidgets.QTableView(self.tab_process_log)
        self.tableView_1.setObjectName("tableView_1")
        self.process_log_v_l_2.addWidget(self.tableView_1)
        self.process_log_h_l_1.addLayout(self.process_log_v_l_2)
        self.process_log_v_l.addLayout(self.process_log_h_l_1)
        self.verticalLayout_4.addLayout(self.process_log_v_l)
        self.tabWidget.addTab(self.tab_process_log, "")
        self.tab_find_csv = QtWidgets.QWidget()
        self.tab_find_csv.setObjectName("tab_find_csv")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tab_find_csv)
        self.verticalLayout_7.setContentsMargins(0, -1, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.find_csv_v_l = QtWidgets.QVBoxLayout()
        self.find_csv_v_l.setSpacing(0)
        self.find_csv_v_l.setObjectName("find_csv_v_l")
        self.find_csv_h_l = QtWidgets.QHBoxLayout()
        self.find_csv_h_l.setObjectName("find_csv_h_l")
        self.btn_file = QtWidgets.QPushButton(self.tab_find_csv)
        self.btn_file.setObjectName("btn_file")
        self.find_csv_h_l.addWidget(self.btn_file)
        self.input_file = QtWidgets.QLineEdit(self.tab_find_csv)
        self.input_file.setReadOnly(True)
        self.input_file.setObjectName("input_file")
        self.find_csv_h_l.addWidget(self.input_file)
        self.btn_save_2 = QtWidgets.QPushButton(self.tab_find_csv)
        self.btn_save_2.setObjectName("btn_save_2")
        self.find_csv_h_l.addWidget(self.btn_save_2)
        self.input_save = QtWidgets.QLineEdit(self.tab_find_csv)
        self.input_save.setReadOnly(True)
        self.input_save.setObjectName("input_save")
        self.find_csv_h_l.addWidget(self.input_save)
        self.btn_move = QtWidgets.QPushButton(self.tab_find_csv)
        self.btn_move.setObjectName("btn_move")
        self.find_csv_h_l.addWidget(self.btn_move)
        self.find_csv_v_l.addLayout(self.find_csv_h_l)
        self.verticalLayout_7.addLayout(self.find_csv_v_l)
        self.listView = QtWidgets.QListView(self.tab_find_csv)
        self.listView.setMinimumSize(QtCore.QSize(600, 250))
        self.listView.setDisabled(True)
        self.listView.setObjectName("listView")
        self.verticalLayout_7.addWidget(self.listView)
        self.tabWidget.addTab(self.tab_find_csv, "")
        self.verticalLayout_5.addWidget(self.tabWidget)
        self.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.statusLabel = QtWidgets.QLabel("") # 已清扫: 0 个 || 已上报: 0 个
        self.statusBar().addPermanentWidget(self.statusLabel)

        self.retranslateUi(self)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)
        
        # sys tray
        self.tray = QSystemTrayIcon()
        self.tray.setIcon(QIcon(':logo.png'))
        showAction = QAction("打开", self, triggered = self.Show)
        quitAction = QAction("退出", self, triggered = QCoreApplication.instance().quit)
        self.trayMenu = QMenu(self)
        self.trayMenu.addAction(showAction)
        self.trayMenu.addSeparator()
        self.trayMenu.addAction(quitAction)
        self.tray.setContextMenu(self.trayMenu)
        self.tray.show()

    def Center(self):
        screen = QDesktopWidget().screenGeometry()
        window_size = self.geometry()
        self.move(int((screen.width() - window_size.width()) / 2) , int((screen.height() - window_size.height()) / 2))
    
    def Show(self):
        self.showNormal()
        self.activateWindow()
        self.setWindowFlags(QtCore.Qt.Window)
        self.Center()
        self.show()

    def closeEvent(self, event): # 重写关闭事件
        reply = QMessageBox(QMessageBox.Question, self.tr("提示"), self.tr("确定要退出吗?"), QMessageBox.NoButton, self)
        yr_btn = reply.addButton(self.tr("是的我要退出"), QMessageBox.YesRole)
        reply.addButton(self.tr("最小化到托盘"), QMessageBox.NoRole)
        reply.exec_()
        if reply.clickedButton() == yr_btn:
            event.accept()
            sys.exit(0)
        else:
            event.ignore()
            self.setWindowFlags(QtCore.Qt.SplashScreen | QtCore.Qt.FramelessWindowHint) # 最小化到托盘

    def retranslateUi(self, LogAnalysisTool):
        _translate = QtCore.QCoreApplication.translate
        LogAnalysisTool.setWindowTitle(_translate("LogAnalysisTool", "Log-Analysis-Tool"))
        self.label_start_time.setText(_translate("LogAnalysisTool", "开始时间："))
        self.input_dt_start.setDisplayFormat(_translate("LogAnalysisTool", "yyyy-MM-dd HH:mm:ss"))
        self.label_end_time.setText(_translate("LogAnalysisTool", " 结束时间："))
        self.input_dt_end.setDisplayFormat(_translate("LogAnalysisTool", "yyyy-MM-dd HH:mm:ss"))
        self.btn_log.setText(_translate("LogAnalysisTool", " 设置 Log 目录"))
        self.label_csv.setText(_translate("LogAnalysisTool", " CSV 目录："))
        self.label_img.setText(_translate("LogAnalysisTool", " 图片目录："))
        self.btn_site_save.setText(_translate("LogAnalysisTool", "设置结果保存目录："))
        self.btn_save.setText(_translate("LogAnalysisTool", "保存结果"))
        self.label_2.setText(_translate("LogAnalysisTool", "已清扫"))
        self.label_3.setText(_translate("LogAnalysisTool", "已上报"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_process_log), _translate("LogAnalysisTool", "处理 Log"))
        self.btn_file.setText(_translate("LogAnalysisTool", "设置文件目录："))
        self.btn_save_2.setText(_translate("LogAnalysisTool", "设置保存目录："))
        self.btn_move.setText(_translate("LogAnalysisTool", "开始查找/拷贝"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_find_csv), _translate("LogAnalysisTool", "查找 CSV"))