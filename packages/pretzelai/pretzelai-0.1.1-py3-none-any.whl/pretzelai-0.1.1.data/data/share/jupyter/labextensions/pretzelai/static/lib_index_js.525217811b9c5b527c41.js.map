{"version":3,"file":"lib_index_js.525217811b9c5b527c41.js","mappings":"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","sources":["webpack://pretzelai/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport * as monaco from 'monaco-editor';\n\nlet index = 0;\n\nconst keywordMap = new Map<string, string>([\n  [\n    'in @dataframe, for each menu item, I want to get the cancelled and completed order count and total price',\n    `# Group the dataframe by 'MENU_ITEM' and 'ORDER_STATUS', then count and sum 'ORDER_ID' and 'PRICE'\nresult = dataframe.groupby([\"MENU_ITEM\", \"ORDER_STATUS\"]).agg(\n    ORDER_ID_count=(\"ORDER_ID\", \"count\"), PRICE_sum=(\"PRICE\", \"sum\")\n)\n\n# Reset index to turn the grouped columns back into regular columns\nresult = result.reset_index()\n\n# Pivot the table to have 'MENU_ITEM' as index and the counts and sums as columns\nresult = result.pivot_table(\n    index=\"MENU_ITEM\",\n    columns=\"ORDER_STATUS\",\n    values=[\"ORDER_ID_count\", \"PRICE_sum\"],\n    fill_value=0,\n)\n\n# Flatten the MultiIndex in columns\nresult.columns = [f\"{col[1]}_{col[0]}\" for col in result.columns]\n\n# Reset index to turn 'MENU_ITEM' back into a column\nresult = result.reset_index()`\n  ],\n  [\n    'Rename columns in @result to have clearer column names - for eg, num_orders_cancelled',\n    `result.columns = [\n    \"menu_item\",\n    \"num_orders_cancelled\",\n    \"num_orders_completed\",\n    \"cancelled_price_sum\",\n    \"completed_price_sum\",\n]`\n  ],\n  [\n    'plot the top grossing menu items from @result',\n    `import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Calculate the total revenue for each menu item\nresult[\"total_revenue\"] = (\n    result[\"cancelled_price_sum\"]\n    + result[\"completed_price_sum\"]\n)\n\n# Sort the result_with_category dataframe by total revenue in descending order\nresult_sorted = result.sort_values(by=\"total_revenue\", ascending=False)\n\n# Plot the top grossing products using a bar chart with colors based on category\nplt.figure(figsize=(10, 8))\nsns.barplot(\n    data=result_sorted, x=\"menu_item\", y=\"total_revenue\", dodge=False\n)\nplt.title(\"Top Grossing Products\")\nplt.xlabel(\"Menu Item\")\nplt.ylabel(\"Total Revenue\")\nplt.xticks(rotation=45, ha=\"right\")\nplt.tight_layout()\nplt.show()`\n  ],\n  [\n    'Join @result with @dataframe to get the category for each menu item. Then, color the bars using teh category information',\n    `result_with_category = result.merge(\n    dataframe[[\"MENU_ITEM\", \"CATEGORY\"]].drop_duplicates(),\n    left_on=\"menu_item\",\n    right_on=\"MENU_ITEM\",\n    how=\"left\",\n).drop(columns=[\"MENU_ITEM\"])\n\n# Calculate the total revenue for each menu item\nresult_with_category[\"total_revenue\"] = (\n    result_with_category[\"cancelled_price_sum\"]\n    + result_with_category[\"completed_price_sum\"]\n)\n\n# Sort the result_with_category dataframe by total revenue in descending order\nresult_sorted = result_with_category.sort_values(by=\"total_revenue\", ascending=False)\n\n# Plot the top grossing products using a bar chart with colors based on category\nplt.figure(figsize=(10, 8))\nsns.barplot(\n    data=result_sorted, x=\"menu_item\", y=\"total_revenue\", hue=\"CATEGORY\", dodge=False\n)\nplt.title(\"Top Grossing Products by Category\")\nplt.xlabel(\"Menu Item\")\nplt.ylabel(\"Total Revenue\")\nplt.xticks(rotation=45, ha=\"right\")\nplt.tight_layout()\nplt.legend(title=\"Category\")\nplt.show()`\n  ],\n  [\n    'make a bar chart using @result_by_category that shows the proportion of orders cancelled my menu item',\n    `# Calculate the proportion of cancelled orders for each menu item\nresult_with_category[\"cancel_proportion\"] = result_with_category[\n    \"num_orders_cancelled\"\n] / (\n    result_with_category[\"num_orders_cancelled\"]\n    + result_with_category[\"num_orders_completed\"]\n)\n\n# Plot a bar chart using seaborn\nplt.figure(figsize=(10, 8))\nsns.barplot(\n    data=result_with_category,\n    x=\"cancel_proportion\",\n    y=\"menu_item\",\n    hue=\"CATEGORY\",\n    dodge=False,\n)\nplt.title(\"Proportion of Cancelled Orders by Menu Item and Category\")\nplt.xlabel(\"Cancellation Proportion\")\nplt.ylabel(\"Menu Item\")\nplt.legend(title=\"Category\")\nplt.show()`\n  ],\n  [\n    'filter @dataframe for category \"Sweets\" and show a grouped bar plot showing completed orders by year split by menu item',\n    `import pandas as pd\nimport plotly.express as px\n\n# Filter the dataframe for category 'Sweets'\nsweets_df = dataframe[dataframe[\"CATEGORY\"] == \"Sweets\"]\n\n# Group by ORDER_DATE and MENU_ITEM, and get the count of orders for completed orders\n# Assuming 'ORDER_STATUS' column indicates if an order is completed or not\ncompleted_orders = sweets_df[sweets_df[\"ORDER_STATUS\"] == \"completed\"]\ncompleted_orders[\"year\"] = pd.to_datetime(completed_orders[\"ORDER_DATE\"]).dt.year\n\ngrouped_sweets = (\n    completed_orders.groupby([\"year\", \"MENU_ITEM\"])\n    .size()\n    .reset_index(name=\"order_counts\")\n)\n\nplt.figure(figsize=(10, 6))\nsns.barplot(data=grouped_sweets, x=\"year\", y=\"order_counts\", hue=\"MENU_ITEM\")\nplt.title(\"Completed Orders by Year and Menu Item\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Completed Orders\")\nplt.legend(title=\"Menu Item\")\nplt.show()`\n  ],\n  [\n    'Make a forecast for monthly completed orders per category. Use @dataframe to first create a dataframe of monthly completed orders and then use the Prophet library to make a 12 month prediction. Put all data in a new dataframe',\n    `from prophet import Prophet\n\n# Assuming 'completed_orders' dataframe contains only completed orders\n# First, we need to prepare the data for Prophet\ncompleted_orders = dataframe[dataframe[\"ORDER_STATUS\"] == \"completed\"]\n\ncompleted_orders[\"month\"] = (\n    pd.to_datetime(dataframe[\"ORDERED_AT\"]).dt.to_period(\"M\").dt.to_timestamp()\n)\n\n# Group by month and category, then count the completed orders\nmonthly_completed_orders = (\n    completed_orders.groupby([\"month\", \"CATEGORY\"])\n    .size()\n    .reset_index(name=\"order_count\")\n)\n\n# Initialize an empty dataframe to store all forecasts\nall_forecasts = pd.DataFrame()\n\n# Forecasting with Prophet for each category\nfor category in monthly_completed_orders[\"CATEGORY\"].unique():\n    # Prepare the dataframe for Prophet\n    df = monthly_completed_orders[monthly_completed_orders[\"CATEGORY\"] == category][\n        [\"month\", \"order_count\"]\n    ]\n    df.columns = [\"ds\", \"y\"]  # Prophet requires the columns to be named 'ds' and 'y'\n\n    # Create and fit the model\n    model = Prophet()\n    model.fit(df)\n\n    # Create future dataframe for 12 months\n    future = model.make_future_dataframe(periods=12, freq=\"M\")\n\n    # Predict\n    forecast = model.predict(future)\n\n    # Add the category to the forecast\n    forecast[\"category\"] = category\n\n    # Select only the necessary columns\n    forecast = forecast[[\"ds\", \"yhat\", \"yhat_lower\", \"yhat_upper\", \"category\"]]\n\n    # Rename 'ds' to 'month'\n    forecast.rename(columns={\"ds\": \"month\"}, inplace=True)\n\n    # Append to the all_forecasts dataframe\n    all_forecasts = pd.concat([all_forecasts, forecast], ignore_index=True)\n\n# all_forecasts dataframe now contains all the forecasts for each category with the specified columns`\n  ],\n  [\n    'Use @all_forecasts to create a stacked bar plot of completed orders by month split by category. use plotly',\n    `fig = px.bar(\n  all_forecasts,\n  x=\"month\",\n  y=\"yhat\",\n  color=\"category\",\n  title=\"Forecasts by Category\",\n  labels={\"yhat\": \"Forecast\"},\n)\nfig.update_layout(barmode=\"stack\")\nfig.show()`\n  ],\n  [\n    'This chart looks very ugly. Use a cleaner theme like plotly_white, use Arial font and make the plot taller',\n    `import plotly.express as px\n\n# Assuming 'all_forecasts' is your DataFrame\nfig = px.bar(\n    all_forecasts,\n    x=\"month\",\n    y=\"yhat\",\n    color=\"category\",\n    title=\"Forecasts by Category\",\n    labels={\"yhat\": \"Forecast\"},\n    height=600,  # Making the chart taller\n    template='plotly_white',  # Using a cleaner theme\n    color_discrete_sequence=px.colors.qualitative.Plotly  # Using a vibrant color palette\n)\n\n# Update layout to enhance font and other aesthetics\nfig.update_layout(\n    barmode=\"stack\",\n    font=dict(\n        family=\"Arial, sans-serif\",  # Setting a commonly used, appealing font\n        size=12,\n        color=\"black\"\n    ),\n    title=dict(\n        font=dict(\n            family=\"Arial, sans-serif\",  # Consistent font for the title\n            size=18,\n            color=\"black\"\n        )\n    )\n)\n\n# Show the figure\nfig.show()`\n  ]\n]);\n\nconst PLUGIN_ID = 'cell-code-replacer:plugin';\n\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: PLUGIN_ID,\n  autoStart: true,\n  requires: [ICommandPalette, INotebookTracker],\n  activate: (\n    app: JupyterFrontEnd,\n    palette: ICommandPalette,\n    notebookTracker: INotebookTracker\n  ) => {\n    const { commands } = app;\n    const command = 'cell-code-replacer:replace-code';\n    const command2 = 'cell-code-replacer:paste-text';\n\n    commands.addCommand(command, {\n      label: 'Replace Cell Code',\n      execute: () => {\n        const activeCell = notebookTracker.activeCell;\n        if (activeCell) {\n          const oldCode = activeCell.model.sharedModel.source;\n\n          // Create an input field and append it below the cell\n          const inputContainer = document.createElement('div');\n          const buttonsContainer = document.createElement('div');\n          buttonsContainer.style.marginTop = '10px';\n          buttonsContainer.style.marginLeft = '70px';\n          buttonsContainer.style.display = 'flex';\n          buttonsContainer.style.flexDirection = 'row';\n          inputContainer.style.marginTop = '10px';\n          inputContainer.style.marginLeft = '70px';\n          inputContainer.style.display = 'flex';\n          inputContainer.style.flexDirection = 'column';\n          activeCell.node.appendChild(inputContainer);\n          activeCell.node.appendChild(buttonsContainer);\n\n          const inputField = document.createElement('textarea');\n          inputField.placeholder = 'Enter your text';\n          inputField.style.width = '100%';\n          inputField.style.height = '100px';\n          inputContainer.appendChild(inputField);\n\n          const submitButton = document.createElement('button');\n          submitButton.textContent = 'Submit';\n          submitButton.style.backgroundColor = 'lightblue';\n          submitButton.style.borderRadius = '5px';\n          submitButton.style.border = '1px solid darkblue';\n          submitButton.style.maxWidth = '100px';\n          submitButton.style.minHeight = '25px';\n          submitButton.style.marginTop = '10px';\n          inputContainer.appendChild(submitButton);\n\n          inputField.focus();\n\n          const handleAccept = () => {\n            const userInput = inputField.value;\n            if (userInput !== '') {\n              const diffContainer = document.createElement('div');\n              diffContainer.style.marginTop = '10px';\n              diffContainer.style.height = '200px';\n              activeCell.node.appendChild(diffContainer);\n\n              // Remove input field and submit button\n              inputContainer.removeChild(inputField);\n              inputContainer.removeChild(submitButton);\n\n              // Show \"Thinking ...\" message\n              const thinkingMessage = document.createElement('div');\n              thinkingMessage.textContent = 'Thinking ...';\n              inputContainer.appendChild(thinkingMessage);\n\n              const renderEditor = (gen: string) => {\n                const diffEditor = monaco.editor.createDiffEditor(\n                  diffContainer,\n                  {\n                    readOnly: true,\n                    theme: 'vs-dark'\n                  }\n                );\n                diffEditor.setModel({\n                  original: monaco.editor.createModel(oldCode, 'python'),\n                  modified: monaco.editor.createModel(gen, 'python')\n                });\n\n                // Remove \"Thinking ...\" message\n                inputContainer.removeChild(thinkingMessage);\n\n                // Create \"Accept\" and \"Reject\" buttons\n                const acceptButton = document.createElement('button');\n                acceptButton.textContent = 'Accept';\n                acceptButton.style.backgroundColor = 'lightblue';\n                acceptButton.style.borderRadius = '5px';\n                acceptButton.style.border = '1px solid darkblue';\n                acceptButton.style.maxWidth = '100px';\n                acceptButton.style.minHeight = '25px';\n                acceptButton.style.marginTop = '10px';\n                acceptButton.style.marginRight = '10px';\n                acceptButton.addEventListener('click', () => {\n                  activeCell.model.sharedModel.source = gen;\n                  commands.execute('notebook:run-cell');\n                  activeCell.node.removeChild(diffContainer);\n                  activeCell.node.removeChild(buttonsContainer);\n                });\n                buttonsContainer.appendChild(acceptButton);\n\n                const rejectButton = document.createElement('button');\n                rejectButton.textContent = 'Reject';\n                rejectButton.style.backgroundColor = 'lightblue';\n                rejectButton.style.borderRadius = '5px';\n                rejectButton.style.border = '1px solid darkblue';\n                rejectButton.style.maxWidth = '100px';\n                rejectButton.style.minHeight = '25px';\n                rejectButton.style.marginTop = '10px';\n                rejectButton.style.marginRight = '10px';\n                rejectButton.addEventListener('click', () => {\n                  activeCell.node.removeChild(diffContainer);\n                  activeCell.node.removeChild(buttonsContainer);\n                });\n                buttonsContainer.appendChild(rejectButton);\n\n                const editPromptButton = document.createElement('button');\n                editPromptButton.textContent = 'Edit Prompt';\n                editPromptButton.style.backgroundColor = 'lightblue';\n                editPromptButton.style.borderRadius = '5px';\n                editPromptButton.style.border = '1px solid darkblue';\n                editPromptButton.style.maxWidth = '100px';\n                editPromptButton.style.minHeight = '25px';\n                editPromptButton.style.marginTop = '10px';\n                editPromptButton.style.marginRight = '10px';\n                editPromptButton.addEventListener('click', () => {\n                  activeCell.node.removeChild(diffContainer);\n                  activeCell.node.removeChild(buttonsContainer);\n                  activeCell.node.appendChild(inputContainer);\n                  inputContainer.appendChild(inputField);\n                  inputContainer.appendChild(submitButton);\n                });\n                buttonsContainer.appendChild(editPromptButton);\n\n                // Handle Enter key press to trigger accept on accept/reject buttons\n                buttonsContainer.addEventListener('keydown', event => {\n                  if (event.key === 'Enter') {\n                    event.preventDefault();\n                    const activeElement = document.activeElement;\n                    if (activeElement === acceptButton) {\n                      acceptButton.click();\n                    } else if (activeElement === rejectButton) {\n                      rejectButton.click();\n                    }\n                  }\n                });\n\n                // Handle Escape key press to trigger reject on accept/reject buttons\n                buttonsContainer.addEventListener('keydown', event => {\n                  if (event.key === 'Escape') {\n                    event.preventDefault();\n                    rejectButton.click();\n                  }\n                });\n              };\n\n              let isMapMatch = false;\n\n              for (const keyword of keywordMap.keys()) {\n                if (userInput.includes(keyword)) {\n                  const content = keywordMap.get(keyword) as string;\n                  const chunkSize = 1024;\n                  let offset = 0;\n                  let cumulativeChunks = '';\n\n                  let ms = 100;\n\n                  const streamContent = () => {\n                    const chunk = content.slice(offset, offset + chunkSize);\n                    cumulativeChunks += chunk;\n                    activeCell.model.sharedModel.source = cumulativeChunks;\n                    offset += chunkSize;\n                    ms = ms + 100;\n                    if (offset < content.length) {\n                      setTimeout(streamContent, ms);\n                    }\n                  };\n\n                  streamContent();\n                  renderEditor(keywordMap.get(keyword) as string);\n                  isMapMatch = true;\n                  break;\n                }\n              }\n\n              if (!isMapMatch) {\n                const isLocalhost = window.location.hostname === 'localhost';\n\n                const options: any = {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: isLocalhost\n                    ? JSON.stringify({\n                        model: 'gpt-4-turbo-preview',\n                        messages: [\n                          {\n                            role: 'user',\n                            content: `Write python code to do \\n\"\"\"\\n${userInput}\\n\"\"\"\\nThe previous code is\\n\"\"\"\\n${oldCode}\\n\"\"\"\\nReturn ONLY executable python code, no backticks`\n                          }\n                        ]\n                      })\n                    : JSON.stringify({\n                        oldCode,\n                        userInput\n                      })\n                };\n\n                if (isLocalhost) {\n                  options.headers.Authorization =\n                    'Bearer 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';\n                }\n\n                fetch(\n                  isLocalhost\n                    ? 'https://api.openai.com/v1/chat/completions'\n                    : 'https://q8qeei2tn4.execute-api.us-west-1.amazonaws.com/default/pretzel_notebook',\n                  options\n                )\n                  .then(response => response.json())\n                  .then(data => {\n                    const gen = isLocalhost\n                      ? data.choices[0].message.content\n                      : data.message;\n                    renderEditor(gen);\n                  })\n                  .catch(error => {\n                    activeCell.model.sharedModel.source = `# Error: ${error}\\n${oldCode}`;\n                    activeCell.node.removeChild(diffContainer);\n                    activeCell.node.removeChild(inputContainer);\n                  });\n              }\n            }\n          };\n\n          // Handle Enter key press to trigger submit\n          inputField.addEventListener('keydown', event => {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              handleAccept();\n            }\n          });\n\n          // Handle submit button click to trigger accept\n          submitButton.addEventListener('click', handleAccept);\n        }\n      }\n    });\n\n    commands.addCommand(command2, {\n      label: 'Paste Text',\n      execute: () => {\n        navigator.clipboard.writeText(Array.from(keywordMap.keys())[index]);\n        index++;\n      }\n    });\n\n    const category = 'Cell Operations';\n    palette.addItem({ command, category });\n    palette.addItem({ command: command2, category });\n\n    app.commands.addKeyBinding({\n      command,\n      keys: ['Accel K'],\n      selector: '.jp-Notebook'\n    });\n    app.commands.addKeyBinding({\n      command: command2,\n      keys: ['Accel X'],\n      selector: '.jp-Notebook'\n    });\n  }\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}