[tool.poetry]
name = "cascade_node_sdk"
version = "0.1.0"
description = ""
authors = ["Cody Hartsook <chartsoo@cisco.com>"]
readme = "README.md"

packages = [
    { include = "cascade_node_sdk", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
grpcio = "^1.59.2"
protobuf = "^4.25.0"
langchain = "^0.1.6"
langchain-core = "0.1.23"
langchain-openai = "0.0.4"
traceloop-sdk = "^0.13.3"
python-dotenv = "1.0.0"
click = "^8.1.7"
requests = "^2.31.0"
nats-py = "^2.6.0"
langchainhub = "^0.1.14"
nest-asyncio = "^1.6.0"
flask-cors = "^4.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0.0"
openai = "1.11.0"
numexpr = "2.8.7"
black = "^23.1.0"
pylint = "^3.0.0"
types-requests = "^2.31.0.20240125"
types-protobuf = "^4.24.0.20240129"

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
cascade = "cascade_node_sdk.cli_proxy:cli"

[tool.poetry-grpc-plugin]
proto_path = "protobuffs"
python_out = "src/cascade_node_sdk/protobuffs"

[tool.ruff]
target-version = "py311"
extend-exclude = ["src/cascade_node_sdk/protobuffs"]

[tool.ruff.lint]
select = [
    "B002",    # Python does not support the unary prefix increment
    "B007",    # Loop control variable {name} not used within loop body
    "B014",    # Exception handler with duplicate exception
    "B023",    # Function definition does not bind loop variable {name}
    "B026",    # Star-arg unpacking after a keyword argument is strongly discouraged
    "B904",    # Raise in except should use from
    "C",       # complexity
    "COM818",  # Trailing comma on bare tuple prohibited
    # "D",       # docstrings
    "DTZ003",  # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004",  # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E",       # pycodestyle
    "F",       # pyflakes/autoflake
    "G",       # flake8-logging-format
    "I",       # isort
    "ICN001",  # import concentions; {name} should be imported as {asname}
    "ISC001",  # Implicitly concatenated string literals on one line
    "N804",    # First argument of a class method should be named cls
    "N805",    # First argument of a method should be named self
    "N815",    # Variable {name} in class scope should not be mixedCase
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "PLC",     # pylint
    "PLE",     # pylint
    "PLR",     # pylint
    "PLW",     # pylint
    "Q000",    # Double quotes found but single quotes preferred
    "RUF006",  # Store a reference to the return value of asyncio.create_task
    "S102",    # Use of exec detected
    "S103",    # bad-file-permissions
    "S108",    # hardcoded-temp-file
    "S306",    # suspicious-mktemp-usage
    "S307",    # suspicious-eval-usage
    "S313",    # suspicious-xmlc-element-tree-usage
    "S314",    # suspicious-xml-element-tree-usage
    "S315",    # suspicious-xml-expat-reader-usage
    "S316",    # suspicious-xml-expat-builder-usage
    "S317",    # suspicious-xml-sax-usage
    "S318",    # suspicious-xml-mini-dom-usage
    "S319",    # suspicious-xml-pull-dom-usage
    "S320",    # suspicious-xmle-tree-usage
    "S601",    # paramiko-call
    "S602",    # subprocess-popen-with-shell-equals-true
    "S604",    # call-with-shell-equals-true
    "S608",    # hardcoded-sql-expression
    "S609",    # unix-command-wildcard-injection
    "SIM105",  # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117",  # Merge with-statements that use the same scope
    "SIM118",  # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201",  # Use {left} != {right} instead of not {left} == {right}
    "SIM208",  # Use {expr} instead of not (not {expr})
    "SIM212",  # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300",  # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401",  # Use get from dict with default instead of an if block
    "T100",    # Trace found: {name} used
    "T20",     # flake8-print
    "TID251",  # Banned imports
    "TRY004",  # Prefer TypeError exception for invalid type
    "TRY302",  # Remove exception handler; error is immediately re-raised
    "UP",      # pyupgrade
    "W",       # pycodestyle
]

ignore = [
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "E501", # line too long
    "E731", # do not assign a lambda expression, use a def
    "PLR0913", # Too many arguments
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.mccabe]
max-complexity = 25
