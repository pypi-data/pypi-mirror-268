# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/70_dlit.ipynb.

# %% auto 0
__all__ = ['DynamicsModule']

# %% ../nbs/70_dlit.ipynb 6
from abc import ABCMeta, abstractmethod
from functools import wraps

# %% ../nbs/70_dlit.ipynb 8
from types import FunctionType

# %% ../nbs/70_dlit.ipynb 11
#| export

# %% ../nbs/70_dlit.ipynb 13
try: import numpy as np
except ImportError: ...

try: import pandas as pd
except ImportError: ...

try: import matplotlib.pyplot as plt
except ImportError: ...

try: import seaborn as sns
except ImportError: ...

# %% ../nbs/70_dlit.ipynb 14
try: from pandas.core.indexing import _LocIndexer, _iLocIndexer
except: ...
try: from pandas import Categorical, CategoricalIndex, RangeIndex, CategoricalDtype
except: ...
try: from pandas.io.formats import (format as pd_format)
except ImportError: ...

# %% ../nbs/70_dlit.ipynb 16
try: import torch
except ImportError: ...

try: import torch, torch.nn as nn
except: ...

try: from torch.utils.data import Dataset, DataLoader
except: ...

try: import lightning as L
except: ...

try: from lightning import LightningDataModule
except: ...

# %% ../nbs/70_dlit.ipynb 18
from nlit import LABEL, MPS
from chck import isnone, iscall, notnone, istensor
from quac import ptdevice, tensor
from sigr import get_signature_defaults

from utrc.cons import WRAPS_ASSIGN_ANNDOCS
from utrc.atyp import P, LossFunction
from utrc.util import extent, integration_steps
from utrc.misc import get_categories, grouplens, drop_column, generate_spans, generate_pairs
from utrc.smpl import categorical_sample
from utrc.data import datasplit

from etrc import Stage, BatchReturn, DataFormat

# %% ../nbs/70_dlit.ipynb 20
from .cons import DATASET_CLS, DATAFRAME_FN
from .util import DataSplits
from .make import diamonds
from .dset import PandasDataset, PandasCategoricalDataset, PandasTimeSeriesDataset
from dtrc.cfgs import (
    RegularizationSpec, TimeSteps, IntegrationSpec,
    AlphaLike, AlphasLike, GaussianLike, zero_placeholder,
    RegSpec
)

# %% ../nbs/70_dlit.ipynb 23
class DynamicsModule(L.LightningModule):
    '''Generic Learner for NeuralODEs.'''
    def __init__(
        self, 
        model: L.LightningModule,
        device: str | ptdevice = MPS,
        lr: float = 1e-3, 
        wd: float = 1e-5, 
        lr_step: int = 100,
        lr_factor: float = 0.1,
        
        imin: int = 2, 
        imax: int = 100,
        tmin: int | None = 0,
        tmax: int | None = 1,
        zscale : float | None = 0.02
    ):
        super().__init__()
        self.model = model.to(device)
        self.device
        
        self.lr = lr
        self.lr_step = lr_step
        self.lr_factor = lr_factor
        self.wd = wd
        
        self.gauss = GaussianLike(zscale)
        self.ispec = IntegrationSpec(imin, imax)
        self.tspec = TimeSteps(self.configure_timesteps(), model, tmin, tmax)
        self.rspec = RegularizationSpec(self.configure_regularizations())
                
    @abstractmethod
    def configure_timesteps(self) -> tensor[int] | list[int] | None: ...
    @abstractmethod
    def configure_regularizations(self) -> RegSpec: ...
        
    def forward_ij(self, x: torch.Tensor, i: int, j: int, n: torch.Tensor | None = None):
        return self(self.gauss(x[i]), n or self.ispec.space(i, j, n))

    def forward_0n(self, x: torch.Tensor, step: torch.Tensor | None = None):
        return self.forward_ij(x, 0, self.tmax, step or self.t_step)
    
    def forward(self, x, t = None):
        if t is None: t = self.t_step
        return self.model(x, t)
    
    def calc_loss(self, x, y):
        vals = [lmd * reg(x, y) for lmd, reg in iter(self.rspec)]
        return sum(vals)
    
    @property    
    def imin(self) -> int: return self.ispec.imin
    @property    
    def imax(self) -> int: return self.ispec.imax
    @property    
    def tnum(self) -> int: return self.tspec.tnum
    @property    
    def tmin(self) -> int: return self.tspec.tmin
    @property    
    def tmax(self) -> int: return self.tspec.tmax
    @property    
    def t_step(self) -> int: return self.tspec.spec
    def gett(self, i) -> int: return self.t_step[int(i)]

# %% ../nbs/70_dlit.ipynb 25
#| export

