workflow:
  rules:
    # build on merge request updates
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      # on merge-requests, don't upload the docker image, just test we can build it
      variables:
        DOCKER_EXTRA_ARGS: "--no-push"
        DOCKER_TAG: "${CI_COMMIT_HASH}"

    # pushes to main
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        # on main, update the "latest" version
        DOCKER_TAG: "latest"

    # and tags
    - if: $CI_COMMIT_TAG
      variables:
        # on tags, create image tag using the same name
        DOCKER_TAG: "${CI_COMMIT_TAG}"

# jobs in the same stage run in parallel
# later stages run after all jobs of previous stage were successfull
stages:
  - static-checks
  - test
  - sonarqube
  - deploy

static:
  stage: static-checks
  image: "python:3.10"

  before_script:
    - apt update && apt install -y --no-install-recommends git
    - python --version
    - pip install pre-commit

  script:
    - pre-commit run --all-files

tests:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION:
        - "3.11"
        - "3.12"

  image: "python:$PYTHON_VERSION"

  before_script:
    - python --version
    - pip install -e .[test]

  script:
    - pytest -v --color=yes --doctest-modules --doctest-glob='docs/**/*.rst' --ignore-glob='src/ctao_cr_spectra/_dev_version/*'

# Run the coverage on the oldest supported python version
# no special reason, just to have no "gap" in the versions in the matrix above
tests-with-cov:
  stage: test
  image: "python:3.10"

  before_script:
    - python --version
    - pip install -e .[test]

  script:
    - pytest -v --color=yes --doctest-modules --doctest-glob='docs/**/*.rst' --ignore-glob='src/ctao_cr_spectra/_dev_version/*' --cov --cov-report=xml

  artifacts:
    paths:
      - coverage.xml

sonarqube:
  stage: sonarqube
  needs:
    - job: tests-with-cov
      artifacts: true
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]

  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"

  script:
    - sonar-scanner -Dsonar.branch.name=${CI_COMMIT_BRANCH}

build-docs:
  stage: test
  image: "python:3.11"

  before_script:
    - python --version
    - pip install .[doc]

  script:
    - make -C docs html

  artifacts:
    paths:
      - docs/build/html

# actual deployment to gitlab pages, only on main
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  image: "python:3.11"
  needs:
    - job: build-docs
      artifacts: true
  before_script:
    - pip install git+https://gitlab.cta-observatory.org/cta-computing/common/gitlab-multi-version-sphinx/
  script:
    - gitlab_multi_version_sphinx -v
    - find public -maxdepth 1
  artifacts:
    paths:
      - public
  environment: production


build-docker-image:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]

  script:
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${DOCKER_TAG}"
      ${DOCKER_EXTRA_ARGS}


# Set the TWINE_PASSWORD env variable in the gitlab ci variables
pypi:
  image: "python:3.11"
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - pip install -U twine build
    - python -m build
    - twine upload dist/*
  variables:
    TWINE_NON_INTERACTIVE: "true"
    TWINE_USERNAME: "__token__"
