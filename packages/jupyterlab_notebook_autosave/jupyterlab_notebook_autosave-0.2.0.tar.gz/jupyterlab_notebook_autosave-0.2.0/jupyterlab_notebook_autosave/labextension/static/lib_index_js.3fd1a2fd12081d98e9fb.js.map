{"version":3,"file":"lib_index_js.3fd1a2fd12081d98e9fb.js","mappings":";;;;;;;;;;;;;;;;;;;AAI+D;AACV;AAC3B;AAE1B,MAAM,SAAS,GAAG,qCAAqC,CAAC;AAExD,MAAM,SAAS,GAAgC;IAC7C,EAAE,EAAE,SAAS;IACb,WAAW,EAAE,+DAA+D;IAC5E,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,yEAAgB,CAAC;IAC5B,QAAQ,EAAE,CAAC,GAAoB,EAAE,QAA0B,EAAE,EAAE;QAC7D,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC;QAEzB,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE;YAC7B,OAAO;SACR;QAED,SAAS,UAAU,CAAC,QAAa,EAAE,IAAY;YAC7C,OAAO,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,IAAI,CAAC,CAAC;QAC1B,CAAC;QAED,SAAS,gBAAgB;YACvB,QAAQ;iBACL,OAAO,CAAC,iBAAiB,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;iBAC9C,IAAI,CAAC,GAAG,EAAE;;gBACT,MAAM,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAC7C,8BAA8B,CAC/B,CAAC;gBAEF,MAAM,eAAe,GAAG,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;gBACpE,MAAM,sBAAsB,GAAG,qBAAqB,4CAAK,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;gBAElF,IAAI,eAAe,EAAE;oBACnB,eAAe,CAAC,SAAS,GAAG,sBAAsB,CAAC;iBACpD;qBAAM;oBACL,MAAM,kBAAkB,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBAC1D,kBAAkB,CAAC,EAAE,GAAG,kBAAkB,CAAC;oBAC3C,kBAAkB,CAAC,SAAS,GAAG,sBAAsB,CAAC;oBAEtD,sBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,aAAa,0CAAE,WAAW,CAAC,kBAAkB,CAAC,CAAC;iBAClE;YACH,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,MAAW,EAAE,EAAE;gBACrB,OAAO,CAAC,KAAK,CAAC,oCAAoC,MAAM,EAAE,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACP,CAAC;QAED,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE;YACjC,KAAK,EAAE,cAAc;YACrB,SAAS,EAAE,cAAc;YACzB,IAAI,EAAE,+DAAQ;YACd,OAAO,EAAE,GAAG,EAAE,CAAC,gBAAgB,EAAE;SAClC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aAClD,IAAI,CAAC,GAAG,EAAE;;YACT,MAAM,gBAAgB,GACpB,cAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,0CAAG,yCAAyC,CAAC,CAAC;YACjE,MAAM,cAAc,GAAG,cAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,0CAAG,SAAS,CAAC,CAAC;YAEtD,MAAM,0BAA0B,GAAG,UAAU,CAC3C,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,QAAQ,EAC1B,kBAAkB,CACnB,CAAC;YACF,MAAM,8BAA8B,GAAG,UAAU,CAC/C,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,QAAQ,EACxB,kBAAkB,CACnB,CAAC;YACF,MAAM,qCAAqC,GACzC,gCAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,0CAAE,UAAU,0CAAE,gBAAgB,0CAAE,OAAO,CAAC;YAEhE,MAAM,gBAAgB,GACpB,8BAA8B;gBAC9B,0BAA0B;gBAC1B,qCAAqC,CAAC;YAExC,OAAO,CAAC,GAAG,CAAC,sBAAsB,gBAAgB,UAAU,CAAC,CAAC;YAE9D,WAAW,CAAC,GAAG,EAAE;gBACf,gBAAgB,EAAE,CAAC;YACrB,CAAC,EAAE,gBAAgB,GAAG,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC;aACD,KAAK,CAAC,MAAM,CAAC,EAAE;YACd,OAAO,CAAC,KAAK,CACX,oDAAoD,MAAM,EAAE,CAC7D,CAAC;QACJ,CAAC,CAAC,CAAC;IACP,CAAC;CACF,CAAC;AAEF,iEAAe,SAAS,EAAC","sources":["webpack://jupyterlab-notebook-autosave/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { saveIcon } from '@jupyterlab/ui-components';\nimport dayjs from 'dayjs';\n\nconst PLUGIN_ID = 'jupyterlab-notebook-autosave:plugin';\n\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: PLUGIN_ID,\n  description: 'A JupyterLab extension that will autosave your open Notebook.',\n  autoStart: true,\n  requires: [ISettingRegistry],\n  activate: (app: JupyterFrontEnd, settings: ISettingRegistry) => {\n    const { commands } = app;\n\n    if (app.name === 'JupyterLab') {\n      return;\n    }\n\n    function getSetting(settings: any, name: string): any {\n      return settings?.[name];\n    }\n\n    function handleCustomSave(): void {\n      commands\n        .execute('docmanager:save', { origin: 'init' })\n        .then(() => {\n          const customSaveButton = document.querySelector(\n            '[data-command=\"custom:save\"]'\n          );\n\n          const saveInfoElement = document.getElementById('custom-save-info');\n          const saveInfoElementContent = `Last saved: today ${dayjs().format('h:mm:ss A')}`;\n\n          if (saveInfoElement) {\n            saveInfoElement.innerHTML = saveInfoElementContent;\n          } else {\n            const newSaveInfoElement = document.createElement('span');\n            newSaveInfoElement.id = 'custom-save-info';\n            newSaveInfoElement.innerHTML = saveInfoElementContent;\n\n            customSaveButton?.parentElement?.appendChild(newSaveInfoElement);\n          }\n        })\n        .catch((reason: any) => {\n          console.error(`An error occurred while saving.\\n${reason}`);\n        });\n    }\n\n    commands.addCommand('custom:save', {\n      label: 'Save changes',\n      iconLabel: 'Save changes',\n      icon: saveIcon,\n      execute: () => handleCustomSave()\n    });\n\n    Promise.all([app.restored, settings.load(PLUGIN_ID)])\n      .then(() => {\n        const docmanagerPlugin =\n          settings?.plugins?.['@jupyterlab/docmanager-extension:plugin'];\n        const autosavePlugin = settings?.plugins?.[PLUGIN_ID];\n\n        const docmanagerAutosaveInterval = getSetting(\n          docmanagerPlugin?.settings,\n          'autosaveInterval'\n        );\n        const autosavePluginAutosaveInterval = getSetting(\n          autosavePlugin?.settings,\n          'autosaveInterval'\n        );\n        const autosavePluginAutosaveDefaultInterval =\n          autosavePlugin?.schema?.properties?.autosaveInterval?.default;\n\n        const autosaveInterval =\n          autosavePluginAutosaveInterval ||\n          docmanagerAutosaveInterval ||\n          autosavePluginAutosaveDefaultInterval;\n\n        console.log(`Autosave interval: ${autosaveInterval} seconds`);\n\n        setInterval(() => {\n          handleCustomSave();\n        }, autosaveInterval * 1000);\n      })\n      .catch(reason => {\n        console.error(\n          `Something went wrong when reading the settings.\\n${reason}`\n        );\n      });\n  }\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}