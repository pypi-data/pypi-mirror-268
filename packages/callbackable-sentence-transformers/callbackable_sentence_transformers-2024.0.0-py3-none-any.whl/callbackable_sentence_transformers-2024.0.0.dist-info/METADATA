Metadata-Version: 2.1
Name: callbackable-sentence-transformers
Version: 2024.0.0
Summary: A simple package to add a new parameter for the SentenceTransformer class
Author-email: Cyrille Siouffi <cyrille.siouffi@protonmail.com>
Maintainer-email: Cyrille Siouffi <cyrille.siouffi@protonmail.com>
License: MIT License
        
        Copyright (c) 2024 Cyrille Siouffi
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Keywords: sentence_transformers,train,log
Classifier: Programming Language :: Python
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: sentence-transformers
Requires-Dist: torch
Requires-Dist: tqdm
Requires-Dist: transformers

# Callbackable Sentence Transformers

A simple class to replace the `SentenceTransformer` class from [sentence_transformers](https://sbert.net/) package.

It adds a simple parameter `callback_during_training` to the `SentenceTransformer.fit()` function be able to get the loss value of the SentenceTransformer during training.

```python
from callbackable_sentence_transformers import CallbackableSentenceTransformer

model = CallbackableSentenceTransformer(model_checkpoint)

def callback(loss, epoch, step):
    print(f"Loss at epoch {epoch}, {step}: {loss}")

model.fit(..., callback_during_training=callback)
```
