{"version":3,"sources":["st_comments.tsx","index.tsx"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","require","withStreamlitConnection","props","_useState","useState","args","comments","_useState2","_slicedToArray","setComments","_useState3","_useState4","newComment","setNewComment","customCss","custom_css","maxHeight","max_height","minHeight","min_height","delete_keyword","custom_font_awesome_url","delete_user","return_mode","allow_html_comment","auth_token","retrieve_from_api","host_url_api","api_user_name","textfield","max_chars","button_post_label","text_field_placeholder","submitButtonColor","submit_button_color","isCommentValid","trim","new_on_top","remainingChars","comment_field_key","no_comments_text","api_database","toast_show_time","toast_text_failed_post","toast_text_failed_delete","toast_text_failed_fetch","toast_text_delete_comment","toast_text_post_comment","debug","showErrorToast","message","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","showSuccessToast","success","fetchComments","_ref","_asyncToGenerator","_callee","apiUrl","queryParams","queryString","response","apiCommentsData","transformedComments","_context","concat","URLSearchParams","append","toString","encodeURIComponent","console","log","fetch","headers","ok","statusText","json","sort","a","b","Date","date","getTime","map","apiComment","id","user","text","comment","t0","apply","arguments","useEffect","handleCommentSubmit","_ref2","_callee2","commentToAdd","commentToAddAPI","responseData","updatedComments","_context2","now","toISOString","body","JSON","stringify","_toConsumableArray","handleDelete","_ref3","_callee3","deletedComment","newComments","_context3","find","filter","Streamlit","setComponentValue","_x","setFrameHeight","React","createElement","Fragment","Helmet","src","crossOrigin","dangerouslySetInnerHTML","__html","ToastContainer","style","display","flexDirection","height","flexGrow","overflowY","padding","textAlign","Typography","Card","CardContent","variant","color","component","split","CardActions","paddingTop","right","top","IconButton","aria-label","size","onClick","DeleteIcon","visibility","gap","TextField","label","fullWidth","onChange","e","target","multiline","maxRows","className","inputProps","maxLength","InputProps","margin","bottom","fontSize","justifyContent","alignItems","Button","disabled","backgroundColor","ReactDOM","render","StrictMode","CommentComponent","document","getElementById"],"mappings":"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","file":"static/js/main.1962b93f.chunk.js","sourcesContent":["import React, { useEffect, useState, CSSProperties  } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport { Card, CardContent, CardActions, IconButton, Typography  } from '@material-ui/core';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Helmet } from 'react-helmet';\r\nimport { TextField, Button } from '@material-ui/core';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\nrequire('react-toastify/dist/ReactToastify.css');\r\n\r\ninterface Comment {\r\n  id: number;\r\n  user: string;\r\n  date: string;\r\n  text: string;\r\n}\r\n\r\n\r\ninterface CommentAPI {\r\n  user: string;\r\n  comment_field_key: string;\r\n  comment: string;\r\n}\r\n\r\n\r\ninterface PythonStyle {\r\n  border?: string;\r\n  border_radius?: string;\r\n  padding?: string;\r\n  margin?: string;\r\n}\r\n\r\ninterface ApiComment {\r\n  id: number;\r\n  user: string;\r\n  date: string;\r\n  comment: string;\r\n  comment_field_key: string;\r\n  deleted: number;\r\n  api_database: string;\r\n}\r\n\r\n\r\nconst CommentComponent = (props: ComponentProps) => {\r\n  const [comments, setComments] = useState<Comment[]>(props.args.comments || []);\r\n  const [newComment, setNewComment] = useState<string>(\"\");\r\n\r\n  \r\n  const customCss = props.args.custom_css || \"\";\r\n  const maxHeight  = props.args.max_height;\r\n  const minHeight  = props.args.min_height;\r\n  const delete_keyword = props.args.delete_keyword;\r\n  const custom_font_awesome_url = props.args.custom_font_awesome_url;\r\n  const delete_user = props.args.delete_user;\r\n  const return_mode = props.args.return_mode;\r\n\r\n  const allow_html_comment = props.args.allow_html_comment || false;\r\n  const retrieve_from_api = props.args.retrieve_from_api || false;\r\n\r\n  const auth_token = props.args.auth_token;\r\n  const host_url_api = props.args.host_url_api;\r\n  const textfield = props.args.textfield;\r\n  const api_user_name = props.args.api_user_name || \"Anonymous\";\r\n  const max_chars = props.args.max_chars;\r\n  const button_post_label = props.args.button_post_label || \"Post\";\r\n  const text_field_placeholder = props.args.text_field_placeholder || \"Write a comment\";\r\n  const submitButtonColor = props.args.submit_button_color || \"primary\";\r\n  const isCommentValid = newComment.trim().length > 0 && newComment.length <= max_chars;\r\n  const new_on_top = props.args.new_on_top || false;\r\n\r\n  const remainingChars = max_chars - newComment.length;\r\n  const isOverLimit = remainingChars < 0;\r\n  const comment_field_key = props.args.comment_field_key ;\r\n  const no_comments_text = props.args.no_comments_text || \"No comments yet\";\r\n  const api_database = props.args.api_database || \"haspa_test\";\r\n\r\n  const toast_show_time = props.args.toast_show_time || 5000;\r\n  const toast_text_failed_post = props.args.toast_text_failed_post || \"Failed to post comment. Please try again later.\";\r\n  const toast_text_failed_delete = props.args.toast_text_failed_delete || \"Failed to delete comment. Please try again later.\";\r\n  const toast_text_failed_fetch = props.args.toast_text_failed_fetch || \"Failed to fetch comments. Please try again later.\";\r\n  const toast_text_delete_comment = props.args.toast_text_delete_comment || \"Comment deleted\";\r\n  const toast_text_post_comment = props.args.toast_text_post_comment || \"Comment posted\";\r\n\r\n  const debug = props.args.debug || false;\r\n// Function to show error toast\r\nconst showErrorToast = (message: string) => {\r\n  toast.error(message, {\r\n    position: \"top-right\",\r\n    autoClose: toast_show_time,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n};\r\n\r\n// Function to show error toast\r\nconst showSuccessToast = (message: string) => {\r\n  toast.success(message, {\r\n    position: \"top-right\",\r\n    autoClose: toast_show_time,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n};\r\n\r\n\r\n  const fetchComments = async () => {\r\n    if (props.args.retrieve_from_api) {\r\n      let apiUrl = `${host_url_api}/notes`;\r\n      const queryParams = new URLSearchParams();\r\n  \r\n  \r\n      if (props.args.comment_field_key) {\r\n        queryParams.append('comment_field_key', props.args.comment_field_key);\r\n      }\r\n  \r\n      const queryString = queryParams.toString();\r\n      if (queryString) {\r\n        apiUrl += `?${queryString}`;\r\n      }\r\n\r\n      if (props.args.api_database) {\r\n        apiUrl += `&db_key=${encodeURIComponent(props.args.api_database)}`;\r\n      }\r\n  \r\n      try {\r\n        if (debug) {\r\n          console.log(apiUrl);\r\n        }\r\n        //const response = await fetch(apiUrl);\r\n        const response = await fetch(apiUrl, {\r\n          method: 'GET', // Specify the method if it's not a simple GET, e.g., 'POST'\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${auth_token}`, // Add the Authorization header\r\n          },\r\n          // Include other options like 'body' if needed for methods other than GET\r\n        });\r\n        if (!response.ok) {\r\n          showErrorToast(toast_text_failed_fetch);\r\n          console.error('Failed to fetch comments:', response.statusText);\r\n          return;\r\n        }\r\n        const apiCommentsData: ApiComment[] = await response.json();\r\n  \r\n        // Sort comments if new_on_top is true\r\n        if (props.args.new_on_top) {\r\n          apiCommentsData.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n        }\r\n  \r\n        const transformedComments = apiCommentsData.map((apiComment: ApiComment) => ({\r\n          id: apiComment.id,\r\n          user: apiComment.user,\r\n          date: apiComment.date,\r\n          text: apiComment.comment,\r\n        }));\r\n  \r\n        setComments(transformedComments);\r\n  \r\n      } catch (error) {\r\n        console.error('Failed to fetch comments:', error);\r\n        showErrorToast(toast_text_failed_fetch);\r\n      }\r\n    } else {\r\n      setComments(props.args.comments || []);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [props.args.retrieve_from_api, props.args.comments, props.args.new_on_top]); // Also re-fetch when new_on_top changes\r\n  \r\n  // Function to handle new comment submission\r\n  const handleCommentSubmit = async () => { // Mark this function as async\r\n    const commentToAdd: Comment = {\r\n      id: Date.now(), // or some other unique ID logic\r\n      user: api_user_name, // Replace with actual user data if available\r\n      date: new Date().toISOString(),\r\n      text: newComment,\r\n    };\r\n\r\n\r\n  // send data to API\r\n  if (return_mode === \"api\") {\r\n\r\n    const commentToAddAPI: CommentAPI = {\r\n      user: api_user_name, // Replace with actual user data if available\r\n      comment_field_key: comment_field_key,\r\n      comment: newComment,\r\n    };\r\n\r\n\r\n    let apiUrl = `${host_url_api}/notes`;\r\n    // if (auth_token) {\r\n    //   apiUrl += `?auth_token=${encodeURIComponent(auth_token)}&db_key=${encodeURIComponent(api_database)}`;\r\n    // } else {\r\n    //   apiUrl += `?db_key=${encodeURIComponent(api_database)}`;\r\n    // }\r\n\r\n    apiUrl += `?db_key=${encodeURIComponent(api_database)}`;\r\n    \r\n\r\n    try {\r\n      if (debug) {\r\n        console.log(apiUrl);\r\n      }\r\n      const response = await fetch(apiUrl, { // 'await' can be used here\r\n        method: 'POST',\r\n        // mode: 'no-cors', // Add this line\r\n\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${auth_token}`,\r\n        },\r\n        body: JSON.stringify(commentToAddAPI),\r\n\r\n      });\r\n\r\n      const responseData = await response.json(); // Await the JSON response\r\n      commentToAdd.id = responseData.id || Date.now();\r\n    \r\n      if (!response.ok) {\r\n        // Handle response errors\r\n        showErrorToast(toast_text_failed_post);\r\n        console.error('Failed to post comment:', response.statusText);\r\n        \r\n        return;\r\n      }\r\n      showSuccessToast(toast_text_post_comment);\r\n    } catch (error) {\r\n      // Handle fetch errors\r\n      showErrorToast(toast_text_failed_post);\r\n      console.error('Failed to post comment:', error);\r\n      \r\n      //create an error message and siaply it for 10 seocnds\r\n\r\n      return;\r\n    } \r\n  }\r\n\r\n    let updatedComments;\r\n    if (new_on_top) {\r\n      updatedComments = [commentToAdd, ...comments]; // Add new comment to the top\r\n    } else {\r\n      updatedComments = [...comments, commentToAdd]; // Add new comment to the bottom\r\n    }\r\n    setComments(updatedComments);\r\n    setNewComment(\"\"); // Reset the input field\r\n\r\n    // Send data back to Python, if needed\r\n    // Streamlit.setComponentValue(updatedComments);\r\n  };\r\n\r\n  // Define textareaStyles with CSSProperties type\r\n  const textareaStyles: CSSProperties = {\r\n    height: 'calc(1.5em * 1.5 + 16px + 2px)', // Example calculation for 3 lines\r\n    overflowY: 'auto', // Correctly typed for TypeScript\r\n    margin: '2px'\r\n  };\r\n\r\n\r\n  const handleDelete = async (id: number)   => { // Mark this function as async\r\n    const deletedComment = comments.find((comment: Comment) => comment.id === id);\r\n    const newComments = comments.filter((comment: Comment) => comment.id !== id);\r\n    \r\n\r\n    if (return_mode === \"api\") {\r\n      let apiUrl = `${host_url_api}/notes/${id}?comment_field_key=${encodeURIComponent(comment_field_key)}&db_key=${encodeURIComponent(api_database)}`;\r\n      \r\n      try {\r\n        if (debug) {\r\n          console.log(apiUrl);\r\n        }\r\n        const response = await fetch(apiUrl, {\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization': `Bearer ${auth_token}`,\r\n          },\r\n        }); \r\n  \r\n        if (!response.ok) {\r\n          // Handle response errors\r\n          showErrorToast(toast_text_failed_delete);\r\n          console.error('Failed to delete comment:', response.statusText);\r\n          return;\r\n        }\r\n        showSuccessToast(toast_text_delete_comment);\r\n    } catch (error) {\r\n      // Handle fetch errors\r\n      showErrorToast(toast_text_failed_delete);\r\n      console.error('Failed to delete comment:', error);\r\n      \r\n      //create an error message and siaply it for 10 seocnds\r\n\r\n      return;\r\n    }\r\n  }\r\n    \r\n  setComments(newComments);\r\n    if (return_mode === \"all\") {\r\n      Streamlit.setComponentValue(newComments);\r\n    } else if (return_mode === \"deleted\" && deletedComment) {\r\n      Streamlit.setComponentValue([deletedComment]);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight();\r\n  }, [comments]);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script\r\n          src={custom_font_awesome_url}\r\n          crossOrigin=\"anonymous\"\r\n          id=\"font-awesome-icons\"\r\n        />\r\n      </Helmet>\r\n      <style dangerouslySetInnerHTML={{__html: customCss}} />\r\n      <ToastContainer />\r\n      <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\r\n        <div style={{ flexGrow: 1, overflowY: 'auto', maxHeight: maxHeight, minHeight: minHeight, padding: '5px' }}>\r\n            {\r\n      comments.length === 0 ? (\r\n        // Display this when there are no comments\r\n        <div style={{ textAlign: 'center', padding: '20px' }}>\r\n          <Typography>  <span dangerouslySetInnerHTML={{ __html: no_comments_text }}></span> </Typography>\r\n   \r\n        </div>\r\n      ) : (\r\n          comments.map((comment: Comment) => (\r\n            <Card key={comment.id} style={{ position: 'relative' }}>\r\n              <CardContent>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                  {comment.user} ({new Date(comment.date).toISOString().split('T')[0]})\r\n                </Typography>\r\n                <Typography variant=\"body1\" component=\"p\">\r\n                  {allow_html_comment ? (\r\n                    <span dangerouslySetInnerHTML={{ __html: comment.text }}></span>\r\n                  ) : (\r\n                    <span>{comment.text}</span>\r\n                  )}\r\n                </Typography>\r\n              </CardContent>\r\n              {(delete_user === \"all\" || delete_user === comment.user) ? (\r\n                <CardActions style={{ paddingTop: 0, position: 'absolute', right: '1px', top: '1px', padding: \"2px\" }}>\r\n                  <IconButton aria-label=\"delete\" color=\"secondary\" size=\"small\" onClick={() => handleDelete(comment.id)}>\r\n                    <DeleteIcon />\r\n                    <span dangerouslySetInnerHTML={{ __html: delete_keyword }}></span>\r\n                  </IconButton>\r\n                </CardActions>\r\n              ) : (\r\n                <CardActions style={{ visibility: 'hidden', paddingTop: 0, position: 'absolute', right: '1px', top: '1px', padding: \"2px\" }}>\r\n                  <IconButton aria-label=\"delete\" color=\"secondary\" size=\"small\">\r\n                    <DeleteIcon style={{ visibility: 'hidden' }} />\r\n                  </IconButton>\r\n                </CardActions>\r\n              )}\r\n            </Card>\r\n          ))\r\n          )}\r\n\r\n        </div>\r\n        {props.args.textfield && (\r\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '10px', padding: '5px' }}>\r\n            <div style={{ position: 'relative' }}>\r\n            <TextField\r\n              label= {text_field_placeholder}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={newComment}\r\n              onChange={(e) => setNewComment(e.target.value)}\r\n              multiline\r\n              maxRows={2}\r\n              className=\"CommentField\"\r\n              id=\"commentfield\"\r\n              inputProps={{ maxLength: max_chars }}\r\n              InputProps={{\r\n                style: {  overflowY: 'auto' },\r\n                inputProps: { style: textareaStyles }\r\n              }}\r\n            />\r\n             <span style={{ \r\n                position: 'absolute', \r\n                bottom: 5, \r\n                right: 20, \r\n                fontSize: '0.75rem', \r\n                color: remainingChars < 0 ? 'red' : 'grey' \r\n              }}>\r\n                {`${newComment.length}/${max_chars}`}\r\n              </span>\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n              <Button\r\n                className=\"submitbtnclass\"\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={handleCommentSubmit}\r\n                disabled={!isCommentValid}\r\n                fullWidth\r\n                style={{ backgroundColor: submitButtonColor ? submitButtonColor : undefined }}\r\n              >\r\n                <span dangerouslySetInnerHTML={{ __html: button_post_label }}></span>\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n  \r\n}\r\nexport default withStreamlitConnection(CommentComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport CommentComponent from \"./st_comments\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CommentComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}