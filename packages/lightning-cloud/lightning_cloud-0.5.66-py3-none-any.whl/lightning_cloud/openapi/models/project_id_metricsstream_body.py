# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *

class ProjectIdMetricsstreamBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'source_id': 'str',
        'stream_source_type': 'V1StreamSourceType',
        'user_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'source_id': 'sourceId',
        'stream_source_type': 'streamSourceType',
        'user_id': 'userId'
    }

    def __init__(self, name: 'str' =None, source_id: 'str' =None, stream_source_type: 'V1StreamSourceType' =None, user_id: 'str' =None):  # noqa: E501
        """ProjectIdMetricsstreamBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._source_id = None
        self._stream_source_type = None
        self._user_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if source_id is not None:
            self.source_id = source_id
        if stream_source_type is not None:
            self.stream_source_type = stream_source_type
        if user_id is not None:
            self.user_id = user_id

    @property
    def name(self) -> 'str':
        """Gets the name of this ProjectIdMetricsstreamBody.  # noqa: E501


        :return: The name of this ProjectIdMetricsstreamBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this ProjectIdMetricsstreamBody.


        :param name: The name of this ProjectIdMetricsstreamBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source_id(self) -> 'str':
        """Gets the source_id of this ProjectIdMetricsstreamBody.  # noqa: E501


        :return: The source_id of this ProjectIdMetricsstreamBody.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id: 'str'):
        """Sets the source_id of this ProjectIdMetricsstreamBody.


        :param source_id: The source_id of this ProjectIdMetricsstreamBody.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def stream_source_type(self) -> 'V1StreamSourceType':
        """Gets the stream_source_type of this ProjectIdMetricsstreamBody.  # noqa: E501


        :return: The stream_source_type of this ProjectIdMetricsstreamBody.  # noqa: E501
        :rtype: V1StreamSourceType
        """
        return self._stream_source_type

    @stream_source_type.setter
    def stream_source_type(self, stream_source_type: 'V1StreamSourceType'):
        """Sets the stream_source_type of this ProjectIdMetricsstreamBody.


        :param stream_source_type: The stream_source_type of this ProjectIdMetricsstreamBody.  # noqa: E501
        :type: V1StreamSourceType
        """

        self._stream_source_type = stream_source_type

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this ProjectIdMetricsstreamBody.  # noqa: E501


        :return: The user_id of this ProjectIdMetricsstreamBody.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this ProjectIdMetricsstreamBody.


        :param user_id: The user_id of this ProjectIdMetricsstreamBody.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIdMetricsstreamBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProjectIdMetricsstreamBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIdMetricsstreamBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProjectIdMetricsstreamBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
