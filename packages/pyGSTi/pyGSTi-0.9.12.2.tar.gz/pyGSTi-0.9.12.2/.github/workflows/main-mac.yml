# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build and run tests (MacOS only, all Python versions)

on:
  push:
    # Mac runners are expensive and oversubscribed. Only run on beta and master
    branches: [ "beta", "master" ]
  # Allow running manually from Actions tab
  workflow_dispatch:

env:
  SKIP_DEAP: 1

jobs:
  build: # Main build + unit test check

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    - name: Set up installation environment (MacOS)
      run: |
        ./.github/ci-scripts/before_install_macos.sh
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}-${{ hashFiles('**/*requirements.txt') }}
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel
        python -m pip install flake8
        python -m pip install -e .[testing]
        python setup.py build_ext --inplace
        # python -m pip freeze  # this isn't relevant anymore since pip install builds a wheel separately
    - name: Lint with flake8
      run: |
        # Critical errors, exit on failure
        flake8 . --count --show-source --statistics --config=.flake8-critical
        # Standard PEP8, allowed to fail since exit-zero treats all errors as warnings
        flake8 . --exit-zero --statistics
    - name: Run unit tests MacOS  
      if: ${{matrix.os == 'macos-latest'}}
      run: |
       python -Ic "import pygsti; print(pygsti.__version__); print(pygsti.__path__)"
       python -m pytest -n auto --dist loadscope --cov=pygsti test/unit




