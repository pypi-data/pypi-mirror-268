[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[project]
name = "cuid2"
dynamic = []
authors = [
    { name = "Will Gordon", email = "wgordon@redhat.com" },
]
description = "Next generation GUIDs. Collision-resistant ids optimized for horizontal scaling and performance."
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Topic :: Security :: Cryptography",
    "Typing :: Typed",
]
keywords = [
    "crypt",
    "security",
    "uuid",
    "guid",
    "cuid",
    "cryptography",
]
version = "2.0.1"

[project.license]
file = "LICENSE"

[project.urls]
repository = "https://github.com/gordon-code/cuid2/"

[project.scripts]
cuid2 = "cuid2.cli:main"

[tool.pdm.version]
source = "scm"

[tool.pdm.scripts]
ruff-check = "ruff check --fix --exit-zero {args:src/ local/tests/}"
ruff-format = "ruff format {args:src/ local/tests/}"
spelling = "codespell {args:src/ local/tests/}"
pylint = "pylint {args:src/ local/tests/}"
safety = "safety {args:check --bare}"
typing = "mypy {args:src/ local/tests/}"
update-pip = "pip install --upgrade pip"
testing = "pytest local/tests"
testing-slow = "pytest local/tests --runslow"
tox = "tox --parallel auto"

[tool.pdm.scripts.ruff-fix]
composite = [
    "ruff-check",
    "ruff-format",
]

[tool.pdm.scripts.lint-full]
composite = [
    "ruff-fix",
    "spelling",
    "pylint",
    "typing",
    "safety",
]

[tool.pdm.scripts.tox-full]
composite = [
    "update-pip",
    "lint-full",
]

[tool.pdm.dev-dependencies]
lint = [
    "codespell~=2.2.6",
    "pylint~=3.1.0",
    "requests>=2.31.0",
    "ruff~=0.3.7",
    "safety==3.1.0",
]
test = [
    "pytest~=8.1.1",
    "pytest-mock~=3.14.0",
    "pytest-sugar~=1.0.0",
]
tox = [
    "tox~=4.14.2",
    "tox-pdm~=0.7.2",
]
typing = [
    "mypy~=1.9.0",
]

[tool.tox]
legacy_tox_ini = "    [tox]\n    min_version = 4\n    env_list = py3{8,9,10,11,12}, check\n    work_dir = local/.tox\n    isolated_build = True\n\n    [testenv]\n    description = run unit tests\n    groups = test\n    commands = testing\n\n    [testenv:check]\n    description = run linters and typing\n    skip_install = true\n    groups = lint, typing, test\n    commands = tox-full\n"

[tool.ruff]
line-length = 120
src = [
    "src",
]
target-version = "py38"
cache-dir = "local/.ruff_cache"
force-exclude = true

[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "ASYNC",
    "TRIO",
    "S",
    "BLE",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "FA",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    "T20",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "INT",
    "ARG",
    "PTH",
    "PGH",
    "PL",
    "TRY",
    "FLY",
    "PERF",
    "LOG",
    "RUF",
]
ignore = [
    "D100",
    "D101",
    "D102",
    "D104",
    "D205",
    "D401",
    "COM812",
    "ISC001",
]
unfixable = [
    "T201",
    "F401",
    "F841",
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "S101",
    "PLR2004",
    "SLF001",
]

[tool.ruff.lint.isort]
known-first-party = [
    "src",
]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
minversion = "8.1"
cache_dir = "local/.pytest_cache"
python_files = "test_*.py"

[tool.pylint.master]
ignore-patterns = "test_.*.py"

[tool.pylint.format]
max-line-length = 120

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
]

[tool.pylint.design]
max-parents = 13
max-args = 10

[tool.pylint.string]
check-quote-consistency = "yes"

[tool.mypy]
cache_dir = "local/.mypy_cache"
