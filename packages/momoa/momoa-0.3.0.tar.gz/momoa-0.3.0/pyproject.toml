[project]
name = "momoa"
version = "0.3.0"
description = "A library for definition, validation and serialisation of Python objects based on JSONSchema specifications."
readme = "README.md"
authors = [
    { name = "Berislav Lopac", email = "berislav@lopac.net" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: File Formats :: JSON :: JSON Schema",
]
requires-python = ">=3.9"
dependencies = [
    "statham-schema>=0.13.5",
    "python-dateutil>=2.8.2",
    "pyhumps>=3.8.0",
]

[project.license]
text = "MIT"

[project.optional-dependencies]
docs = [
    "mkapi>=1.0.14",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.17",
    "jinja2>=3.1.3",
]

[project.urls]
homepage = "https://momoa.readthedocs.io"
repository = "https://github.com/berislavlopac/momoa"

[tool.black]
line-length = 96
target-version = [
    "py38",
    "py39",
    "py310",
    "py311",
]
verbose = false
skip-string-normalization = false

[tool.isort]
profile = "black"
line_length = 96
filter_files = true
force_alphabetical_sort_within_sections = true

[tool.coverage.run]
source = [
    "momoa/",
]
omit = [
    "*/tests/*",
    "src/tests/*",
]

[tool.coverage.report]
skip_covered = false
show_missing = true
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "@abstract",
]

[tool.mypy]
mypy_path = "momoa/"
files = [
    "momoa/",
]
ignore_missing_imports = true

[tool.pydocstyle]
add-ignore = "D105, D107, D212, D401"
convention = "google"
match-dir = "(?!tests).*"

[tool.ruff]
line-length = 96
output-format = "grouped"

[tool.ruff.lint]
select = [
    "E4",
    "E7",
    "E9",
    "W",
    "F",
    "D",
    "N",
    "PLR",
    "PTH",
    "UP",
    "BLE",
    "B",
    "A",
    "C4",
    "DTZ",
    "PIE",
    "TRY",
    "PERF",
    "RUF",
]
ignore = [
    "D105",
    "D107",
    "D211",
    "D203",
    "D212",
    "D401",
    "D407",
    "D413",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",
    "N",
    "PLR",
    "DTZ001",
]

[tool.pdm.build]
includes = [
    "momoa/",
]

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.2.1",
    "pytest-cov>=4.0.0",
    "pytest-spec>=3.2.0",
    "tox>=3.28.0",
    "tox-pdm>=0.6.1",
]
checks = [
    "isort>=5.12.0",
    "ruff>=0.0.238",
    "mypy>=1.9.0",
]

[tool.pdm.scripts.tests]
cmd = "pytest --spec --cov"
help = "Run unit tests and coverage."

[tool.pdm.scripts.tests-quick]
cmd = "pytest -m 'not api_request'"
help = "Run unit tests without coverage and API request tests."

[tool.pdm.scripts.check-lint]
shell = "    ruff format --check .\n    isort --check .\n    ruff check .\n"
help = "Run linting and formating checks."

[tool.pdm.scripts.check-typing]
cmd = "mypy --install-types --non-interactive"
help = "Run static typing analysis."

[tool.pdm.scripts.checks]
composite = [
    "check-lint",
    "check-typing",
]
help = "Run all checks."

[tool.pdm.scripts.ready]
composite = [
    "check-lint",
    "check-typing",
    "tests",
]
help = "Run all checks and tests."

[tool.pdm.scripts.reformat]
shell = "    isort .\n    ruff format .\n"
help = "Reformat the code using isort and ruff."

[tool.pdm.scripts.reqs]
shell = "pdm export --prod --without-hashes"
help = "Extract current production requirements. Save to a file with the `-o` option."

[tool.pdm.scripts.new-commits]
shell = "git log $(git describe --tags --abbrev=0)..HEAD --oneline --no-decorate"
help = "List all commits since the last tag."

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"
