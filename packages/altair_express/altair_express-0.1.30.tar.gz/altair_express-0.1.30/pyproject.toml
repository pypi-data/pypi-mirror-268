[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "altair_express"
version = "0.1.30"
description = "Create interactive data visualizations in one line of code."
readme = "README.rst"
license = {text = "MIT License"}
authors = [{name = "Dylan Wootton", email = "dwootton@mit.edu"}]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
]
keywords = ["altair_express"]
dependencies = [
    "setuptools",
    "typing_extensions>=4.0.1; python_version<\"3.11\"",
    "jinja2",
    # If you update the minimum required jsonschema version, also update it in build.yml
    "jsonschema>=3.0",
    "numpy",
    # If you update the minimum required pandas version, also update it in build.yml
    "pandas>=0.25",
    "toolz",
    "packaging"
]

python-requirements = ">=3.8"

[project.urls]
homepage = "https://github.com/dwootton/altair_express"
Source = "https://github.com/dwootton/Altair-Express"



[project.optional-dependencies]
all = [
    "vega_datasets>=0.9.0",
    "vl-convert-python>=1.3.0",
    "pyarrow>=11",
    "vegafusion[embed]>=1.6.6",
    "anywidget>=0.9.0",
    "altair_tiles>=0.3.0",
    "altair_alx_alpha"
]
dev = [
    "hatch",
    "ruff>=0.3.0",
    "ipython",
    "pytest",
    "pytest-cov",
    "m2r",
    "mypy",
    "pandas-stubs",
    "types-jsonschema",
    "types-setuptools",
    "geopandas",
    "altair_alx_alpha>=5.4.1a0",
    "jupyterlab>=4.1.5"
]
doc = [
    "sphinx",
    "altair_alx_alpha",
    "docutils",
    "sphinxext_altair",
    "jinja2",
    "numpydoc",
    "pillow>=9,<10",
    "pydata-sphinx-theme>=0.14.1",
    "myst-parser",
    "sphinx_copybutton",
    "sphinx-design",
    "scipy",
    "jupyterlite_sphinx",
    "jupyterlite-pyodide-kernel",
    
]


[tool.hatch.envs.doc]
features = ["all", "dev", "doc"]


[project.scripts]
altair_express = "altair_express.cli:main"

[tool.hatch.metadata]
allow-direct-references = true


[tool.hatch.envs.dev.scripts]
test = "jupyter lab"

[tool.hatch.envs.doc.scripts]
clean = "rm -rf docs/_build"
clean-generated = ["rm -rf doc/user_guide/generated", "rm -rf doc/gallery"]
clean-all = ["clean", "clean-generated", "rm -rf doc/_images"]
clean-win = "if exist docs\\_build rd /s /q docs\\_build"
clean-generated-win = [
    "if exist docs\\user_guide\\generated rd /s /q docs\\user_guide\\generated",
    "if exist docs\\gallery rd /s /q docs\\gallery",
]
clean-all-win = [
    "clean-win",
    "clean-generated-win",
    "if exist docs\\_images rd /s /q docs\\_images",
]
build-html = [
    "mkdir -p docs/_images",
    "sphinx-build -b html -d docs/_build/doctrees docsrc docs/_build/html",
]
build-html-win = [
    "if not exist docs\\_images md docs\\_images",
    "sphinx-build -b html -d docs\\_build\\doctrees doc docs\\_build\\html",
]
doctest = "sphinx-build -b doctest -d docs/_build/doctrees docs docs/_build/doctest"
coverage = "sphinx-build -b coverage -d doc/_build/doctrees docs docs/_build/coverage"
serve = "(cd docs/_build/html && python -m http.server)"
publish-clean-build = [
    "clean-all",
    "build-html",
    "(cd doc && bash sync_website.sh)",
]
