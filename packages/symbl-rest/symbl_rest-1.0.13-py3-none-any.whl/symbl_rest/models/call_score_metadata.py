# coding: utf-8

"""
    symbl.ai APIs

    <h1>Symbl's APIs for external consumers.</h1> <h2>Language Insights API</h2> Symbl's Language Insights API provides an interface for applications to perform the analysis on the raw text and get insights from it. The API automatically detects sentence boundaries and punctuates the sentences, and also returns the updated messages in the response. Conversations are the most unstructured piece of information that we represent information in, and which most of the leads to lot of loss of information by not being able to capture them correctly.<br/> Language Insights API focuses on understanding such texts and generate the useful and important information from them. <br/> Currently the API supports detection of the Action Items in any type of unstructured text. In future the same API will also have support to detect \"Information\" and \"Event\", where Information is any informational piece and Event is a reference to something that has happened in the past.<br/> <h2>Telephony Integration</h2> Symbl can currently integrate with two types of telephony endpoints: 1. SIP trunks<br/> 2. PSTN endpoints<br/> Results are sent via HTTP WebHooks as and when they are available.<br/> <h2>Flow</h2> 1. External Application invokes REST API to join a meeting/session, with the mode (SIP/PSTN) and joining details<br/> 2. Symbl joins the meeting via SIP or PSTN integration<br/> 3. Symbl continuously processes the audio stream received<br/> 4. Symbl calls WebHook whenever transcription results are available<br/>  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: info@symbl.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CallScoreMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sales_stage': 'str',
        'prospect_name': 'str'
    }

    attribute_map = {
        'sales_stage': 'salesStage',
        'prospect_name': 'prospectName'
    }

    def __init__(self, sales_stage=None, prospect_name=None):  # noqa: E501
        """CallScoreMetadata - a model defined in Swagger"""  # noqa: E501
        self._sales_stage = None
        self._prospect_name = None
        self.discriminator = None
        if sales_stage is not None:
            self.sales_stage = sales_stage
        if prospect_name is not None:
            self.prospect_name = prospect_name

    @property
    def sales_stage(self):
        """Gets the sales_stage of this CallScoreMetadata.  # noqa: E501

        Sales stage of the call  # noqa: E501

        :return: The sales_stage of this CallScoreMetadata.  # noqa: E501
        :rtype: str
        """
        return self._sales_stage

    @sales_stage.setter
    def sales_stage(self, sales_stage):
        """Sets the sales_stage of this CallScoreMetadata.

        Sales stage of the call  # noqa: E501

        :param sales_stage: The sales_stage of this CallScoreMetadata.  # noqa: E501
        :type: str
        """

        self._sales_stage = sales_stage

    @property
    def prospect_name(self):
        """Gets the prospect_name of this CallScoreMetadata.  # noqa: E501

        Name of the prospect  # noqa: E501

        :return: The prospect_name of this CallScoreMetadata.  # noqa: E501
        :rtype: str
        """
        return self._prospect_name

    @prospect_name.setter
    def prospect_name(self, prospect_name):
        """Sets the prospect_name of this CallScoreMetadata.

        Name of the prospect  # noqa: E501

        :param prospect_name: The prospect_name of this CallScoreMetadata.  # noqa: E501
        :type: str
        """

        self._prospect_name = prospect_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CallScoreMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CallScoreMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
