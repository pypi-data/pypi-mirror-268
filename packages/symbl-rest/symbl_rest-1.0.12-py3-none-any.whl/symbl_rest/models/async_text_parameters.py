# coding: utf-8

"""
    symbl.ai APIs

    <h1>Symbl's APIs for external consumers.</h1> <h2>Language Insights API</h2> Symbl's Language Insights API provides an interface for applications to perform the analysis on the raw text and get insights from it. The API automatically detects sentence boundaries and punctuates the sentences, and also returns the updated messages in the response. Conversations are the most unstructured piece of information that we represent information in, and which most of the leads to lot of loss of information by not being able to capture them correctly.<br/> Language Insights API focuses on understanding such texts and generate the useful and important information from them. <br/> Currently the API supports detection of the Action Items in any type of unstructured text. In future the same API will also have support to detect \"Information\" and \"Event\", where Information is any informational piece and Event is a reference to something that has happened in the past.<br/> <h2>Telephony Integration</h2> Symbl can currently integrate with two types of telephony endpoints: 1. SIP trunks<br/> 2. PSTN endpoints<br/> Results are sent via HTTP WebHooks as and when they are available.<br/> <h2>Flow</h2> 1. External Application invokes REST API to join a meeting/session, with the mode (SIP/PSTN) and joining details<br/> 2. Symbl joins the meeting via SIP or PSTN integration<br/> 3. Symbl continuously processes the audio stream received<br/> 4. Symbl calls WebHook whenever transcription results are available<br/>  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: info@symbl.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AsyncTextParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'messages': 'AsyncMessagesField',
        'entities': 'AsyncEntitiesPayload',
        'detect_phrases': 'AsyncDetectPhrases',
        'enable_all_trackers': 'AsyncEnableAllTrackers',
        'confidence_threshold': 'AsyncConfidenceThreshold',
        'name': 'AsyncMeetingName',
        'trackers': 'AsyncTrackers',
        'features': 'CallScoreFeatures',
        'metadata': 'CallScoreMetadata'
    }

    attribute_map = {
        'messages': 'messages',
        'entities': 'entities',
        'detect_phrases': 'detectPhrases',
        'enable_all_trackers': 'enableAllTrackers',
        'confidence_threshold': 'confidenceThreshold',
        'name': 'name',
        'trackers': 'trackers',
        'features': 'features',
        'metadata': 'metadata'
    }

    def __init__(self, messages=None, entities=None, detect_phrases=None, enable_all_trackers=None, confidence_threshold=None, name=None, trackers=None, features=None, metadata=None):  # noqa: E501
        """AsyncTextParameters - a model defined in Swagger"""  # noqa: E501
        self._messages = None
        self._entities = None
        self._detect_phrases = None
        self._enable_all_trackers = None
        self._confidence_threshold = None
        self._name = None
        self._trackers = None
        self._features = None
        self._metadata = None
        self.discriminator = None
        if messages is not None:
            self.messages = messages
        if entities is not None:
            self.entities = entities
        if detect_phrases is not None:
            self.detect_phrases = detect_phrases
        if enable_all_trackers is not None:
            self.enable_all_trackers = enable_all_trackers
        if confidence_threshold is not None:
            self.confidence_threshold = confidence_threshold
        if name is not None:
            self.name = name
        if trackers is not None:
            self.trackers = trackers
        if features is not None:
            self.features = features
        if metadata is not None:
            self.metadata = metadata

    @property
    def messages(self):
        """Gets the messages of this AsyncTextParameters.  # noqa: E501

        Messages Body for a Async Submit Text request.  # noqa: E501

        :return: The messages of this AsyncTextParameters.  # noqa: E501
        :rtype: AsyncMessagesField
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this AsyncTextParameters.

        Messages Body for a Async Submit Text request.  # noqa: E501

        :param messages: The messages of this AsyncTextParameters.  # noqa: E501
        :type: AsyncMessagesField
        """

        self._messages = messages

    @property
    def entities(self):
        """Gets the entities of this AsyncTextParameters.  # noqa: E501

        Messages Body for a Async Submit Text request.  # noqa: E501

        :return: The entities of this AsyncTextParameters.  # noqa: E501
        :rtype: AsyncEntitiesPayload
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this AsyncTextParameters.

        Messages Body for a Async Submit Text request.  # noqa: E501

        :param entities: The entities of this AsyncTextParameters.  # noqa: E501
        :type: AsyncEntitiesPayload
        """

        self._entities = entities

    @property
    def detect_phrases(self):
        """Gets the detect_phrases of this AsyncTextParameters.  # noqa: E501

        Messages Body for a Async Submit Text request.  # noqa: E501

        :return: The detect_phrases of this AsyncTextParameters.  # noqa: E501
        :rtype: AsyncDetectPhrases
        """
        return self._detect_phrases

    @detect_phrases.setter
    def detect_phrases(self, detect_phrases):
        """Sets the detect_phrases of this AsyncTextParameters.

        Messages Body for a Async Submit Text request.  # noqa: E501

        :param detect_phrases: The detect_phrases of this AsyncTextParameters.  # noqa: E501
        :type: AsyncDetectPhrases
        """

        self._detect_phrases = detect_phrases

    @property
    def enable_all_trackers(self):
        """Gets the enable_all_trackers of this AsyncTextParameters.  # noqa: E501

        Messages Body for a Async Submit Text request.  # noqa: E501

        :return: The enable_all_trackers of this AsyncTextParameters.  # noqa: E501
        :rtype: AsyncEnableAllTrackers
        """
        return self._enable_all_trackers

    @enable_all_trackers.setter
    def enable_all_trackers(self, enable_all_trackers):
        """Sets the enable_all_trackers of this AsyncTextParameters.

        Messages Body for a Async Submit Text request.  # noqa: E501

        :param enable_all_trackers: The enable_all_trackers of this AsyncTextParameters.  # noqa: E501
        :type: AsyncEnableAllTrackers
        """

        self._enable_all_trackers = enable_all_trackers

    @property
    def confidence_threshold(self):
        """Gets the confidence_threshold of this AsyncTextParameters.  # noqa: E501

        Confidence threshold to be passed to Async API. Needs to be above 0.5.  # noqa: E501

        :return: The confidence_threshold of this AsyncTextParameters.  # noqa: E501
        :rtype: AsyncConfidenceThreshold
        """
        return self._confidence_threshold

    @confidence_threshold.setter
    def confidence_threshold(self, confidence_threshold):
        """Sets the confidence_threshold of this AsyncTextParameters.

        Confidence threshold to be passed to Async API. Needs to be above 0.5.  # noqa: E501

        :param confidence_threshold: The confidence_threshold of this AsyncTextParameters.  # noqa: E501
        :type: AsyncConfidenceThreshold
        """

        self._confidence_threshold = confidence_threshold

    @property
    def name(self):
        """Gets the name of this AsyncTextParameters.  # noqa: E501

        Name of the conversation to be saved in Async API.  # noqa: E501

        :return: The name of this AsyncTextParameters.  # noqa: E501
        :rtype: AsyncMeetingName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AsyncTextParameters.

        Name of the conversation to be saved in Async API.  # noqa: E501

        :param name: The name of this AsyncTextParameters.  # noqa: E501
        :type: AsyncMeetingName
        """

        self._name = name

    @property
    def trackers(self):
        """Gets the trackers of this AsyncTextParameters.  # noqa: E501

        A list of key words and/or phrases for Async Submit Text request.  # noqa: E501

        :return: The trackers of this AsyncTextParameters.  # noqa: E501
        :rtype: AsyncTrackers
        """
        return self._trackers

    @trackers.setter
    def trackers(self, trackers):
        """Sets the trackers of this AsyncTextParameters.

        A list of key words and/or phrases for Async Submit Text request.  # noqa: E501

        :param trackers: The trackers of this AsyncTextParameters.  # noqa: E501
        :type: AsyncTrackers
        """

        self._trackers = trackers

    @property
    def features(self):
        """Gets the features of this AsyncTextParameters.  # noqa: E501

        A list of features for Async Submit Text request.  # noqa: E501

        :return: The features of this AsyncTextParameters.  # noqa: E501
        :rtype: CallScoreFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this AsyncTextParameters.

        A list of features for Async Submit Text request.  # noqa: E501

        :param features: The features of this AsyncTextParameters.  # noqa: E501
        :type: CallScoreFeatures
        """

        self._features = features

    @property
    def metadata(self):
        """Gets the metadata of this AsyncTextParameters.  # noqa: E501

        Metadata for Async Submit Text request.  # noqa: E501

        :return: The metadata of this AsyncTextParameters.  # noqa: E501
        :rtype: CallScoreMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AsyncTextParameters.

        Metadata for Async Submit Text request.  # noqa: E501

        :param metadata: The metadata of this AsyncTextParameters.  # noqa: E501
        :type: CallScoreMetadata
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsyncTextParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsyncTextParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
