import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from amsdal.migration.base_migration_schemas import BaseMigrationSchemas as BaseMigrationSchemas
from amsdal_models.schemas.data_models.schema import ObjectSchema
from amsdal_utils.models.enums import SchemaTypes as SchemaTypes

class BaseMigrationExecutor(ABC, metaclass=abc.ABCMeta):
    schemas: BaseMigrationSchemas
    _buffer: Incomplete
    def __init__(self) -> None: ...
    @abstractmethod
    def create_class(self, schemas: BaseMigrationSchemas, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    @abstractmethod
    def update_class(self, schemas: BaseMigrationSchemas, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    @abstractmethod
    def delete_class(self, schemas: BaseMigrationSchemas, class_name: str, schema_type: SchemaTypes) -> None: ...
    @staticmethod
    def _resolve_base_class_name(class_name: str, meta_class: str) -> str: ...
    def buffer_class_migration(self, class_name: str, object_schema: ObjectSchema, schema_type: SchemaTypes) -> None: ...
    def flush_buffer(self) -> None: ...
