# coding: utf-8

"""
    IcoTest Voice

    IcoTest Voice API

    The version of the OpenAPI document: 1.0.44
    Contact: shaun.hirst@3adesign.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Request(BaseModel):
    """
    The model of a request
    """ # noqa: E501
    request_id: Annotated[str, Field(min_length=36, strict=True, max_length=36)] = Field(description="the unique id of the request")
    device_id: Optional[Annotated[str, Field(min_length=36, strict=True, max_length=36)]] = Field(default=None, description="the uuid of the device")
    status: Annotated[str, Field(strict=True, max_length=32)] = Field(description="The status of a request")
    message: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The message for a request")
    action: Annotated[str, Field(strict=True, max_length=32)] = Field(description="The action of the request")
    request_params: Optional[List[Union[str, Any]]] = None
    created: datetime = Field(description="The date time the request was created")
    updated: Optional[datetime] = Field(default=None, description="The date time the request was last updated")
    controller_id: Optional[Annotated[str, Field(min_length=36, strict=True, max_length=36)]] = Field(default=None, description="the unique id of the controller")
    __properties: ClassVar[List[str]] = ["request_id", "device_id", "status", "message", "action", "request_params", "created", "updated", "controller_id"]

    @field_validator('request_id')
    def request_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/")
        return value

    @field_validator('device_id')
    def device_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('pending', 'inprogress', 'completed', 'failed', 'suspended'):
            raise ValueError("must be one of enum values ('pending', 'inprogress', 'completed', 'failed', 'suspended')")
        return value

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('register', 'deregister', 'make_call', 'receive_call', 'dect_get_handset_name', 'dect_run_at_cmd', 'dect_get_last_commands', 'dect_reset_device', 'scan', 'end_call', 'send_command', 'retrieve_file', 'delete_playback_file', 'upload_playback_file', 'delete_resuts_file', 'delete_results_files_in_range', 'appium_take_screenshot', 'appium_delete_all_screenshots', 'appium_delete_ios_certificates', 'appium_upload_ios_certificates', 'appium_install_ios_webdriveragent'):
            raise ValueError("must be one of enum values ('register', 'deregister', 'make_call', 'receive_call', 'dect_get_handset_name', 'dect_run_at_cmd', 'dect_get_last_commands', 'dect_reset_device', 'scan', 'end_call', 'send_command', 'retrieve_file', 'delete_playback_file', 'upload_playback_file', 'delete_resuts_file', 'delete_results_files_in_range', 'appium_take_screenshot', 'appium_delete_all_screenshots', 'appium_delete_ios_certificates', 'appium_upload_ios_certificates', 'appium_install_ios_webdriveragent')")
        return value

    @field_validator('controller_id')
    def controller_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "request_id": obj.get("request_id"),
            "device_id": obj.get("device_id"),
            "status": obj.get("status"),
            "message": obj.get("message"),
            "action": obj.get("action"),
            "request_params": obj.get("request_params"),
            "created": obj.get("created"),
            "updated": obj.get("updated"),
            "controller_id": obj.get("controller_id")
        })
        return _obj


