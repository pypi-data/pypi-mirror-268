# coding: utf-8

"""
    IcoTest Voice

    IcoTest Voice API

    The version of the OpenAPI document: 1.0.43
    Contact: shaun.hirst@3adesign.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Device(BaseModel):
    """
    The model of the device
    """ # noqa: E501
    device_id: Annotated[str, Field(min_length=36, strict=True, max_length=36)] = Field(description="the uuid of the device")
    serial_no: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="Serial number of the connected device")
    device_type: Annotated[str, Field(strict=True, max_length=64)] = Field(description="The type of the device")
    url: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The url of the device")
    created: Optional[datetime] = Field(default=None, description="The date time the device was added")
    updated: Optional[datetime] = Field(default=None, description="The date time the device was last updated")
    controller_id: Annotated[str, Field(min_length=36, strict=True, max_length=36)] = Field(description="The controller id that manages the device")
    device_status: Optional[Union[str, Any]] = Field(default=None, description="Model of device status")
    callback_port: Optional[Annotated[int, Field(le=65535, strict=True, ge=1)]] = Field(default=None, description="The call back port number")
    management_status: Optional[StrictBool] = Field(default=None, description="Management status, if True we run process")
    last_contact: Optional[datetime] = Field(default=None, description="The last contact date time with the controller")
    __properties: ClassVar[List[str]] = ["device_id", "serial_no", "device_type", "url", "created", "updated", "controller_id", "device_status", "callback_port", "management_status", "last_contact"]

    @field_validator('device_id')
    def device_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/")
        return value

    @field_validator('device_type')
    def device_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('handset', 'basestation', 'sip', 'fxo', 'appium', 'unknown'):
            raise ValueError("must be one of enum values ('handset', 'basestation', 'sip', 'fxo', 'appium', 'unknown')")
        return value

    @field_validator('controller_id')
    def controller_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device_id": obj.get("device_id"),
            "serial_no": obj.get("serial_no"),
            "device_type": obj.get("device_type"),
            "url": obj.get("url"),
            "created": obj.get("created"),
            "updated": obj.get("updated"),
            "controller_id": obj.get("controller_id"),
            "device_status": obj.get("device_status"),
            "callback_port": obj.get("callback_port"),
            "management_status": obj.get("management_status"),
            "last_contact": obj.get("last_contact")
        })
        return _obj


