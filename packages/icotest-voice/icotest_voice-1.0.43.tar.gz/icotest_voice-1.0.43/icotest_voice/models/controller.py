# coding: utf-8

"""
    IcoTest Voice

    IcoTest Voice API

    The version of the OpenAPI document: 1.0.43
    Contact: shaun.hirst@3adesign.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Controller(BaseModel):
    """
    The model of a controller
    """ # noqa: E501
    controller_id: Annotated[str, Field(min_length=36, strict=True, max_length=36)] = Field(description="the unique id of the controller")
    controller_type: Annotated[str, Field(strict=True, max_length=32)] = Field(description="the type of the controller")
    description: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="the description of the controller")
    location: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="the location of the controller")
    callback_url: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="the url to contact the controller")
    created: Optional[datetime] = Field(default=None, description="The date the controller was added")
    last_contact: Optional[datetime] = Field(default=None, description="The last contact date time with the controller")
    __properties: ClassVar[List[str]] = ["controller_id", "controller_type", "description", "location", "callback_url", "created", "last_contact"]

    @field_validator('controller_id')
    def controller_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/")
        return value

    @field_validator('controller_type')
    def controller_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('dect', 'sip', 'fxo', 'appium'):
            raise ValueError("must be one of enum values ('dect', 'sip', 'fxo', 'appium')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Controller from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Controller from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "controller_id": obj.get("controller_id"),
            "controller_type": obj.get("controller_type"),
            "description": obj.get("description"),
            "location": obj.get("location"),
            "callback_url": obj.get("callback_url"),
            "created": obj.get("created"),
            "last_contact": obj.get("last_contact")
        })
        return _obj


