# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from hstp.v1 import hstp_pb2 as hstp_dot_v1_dot_hstp__pb2


class HSTPServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAuthUrl = channel.unary_unary(
                '/hstp.v1.HSTPService/GetAuthUrl',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.GetAuthUrlRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.GetAuthUrlResponse.FromString,
                )
        self.BatchRead = channel.unary_unary(
                '/hstp.v1.HSTPService/BatchRead',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.BatchReadRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchReadResponse.FromString,
                )
        self.BatchUpsert = channel.unary_unary(
                '/hstp.v1.HSTPService/BatchUpsert',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.BatchUpsertRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchUpsertResponse.FromString,
                )
        self.BatchArchive = channel.unary_unary(
                '/hstp.v1.HSTPService/BatchArchive',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.BatchArchiveRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchArchiveResponse.FromString,
                )
        self.BatchRestore = channel.unary_unary(
                '/hstp.v1.HSTPService/BatchRestore',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.BatchRestoreRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchRestoreResponse.FromString,
                )
        self.BatchNearest = channel.unary_unary(
                '/hstp.v1.HSTPService/BatchNearest',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.BatchNearestRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchNearestResponse.FromString,
                )
        self.BatchListen = channel.stream_stream(
                '/hstp.v1.HSTPService/BatchListen',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.BatchListenRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchListenResponse.FromString,
                )
        self.BatchLinks = channel.unary_unary(
                '/hstp.v1.HSTPService/BatchLinks',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.BatchLinksRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchLinksResponse.FromString,
                )
        self.Ingest = channel.unary_unary(
                '/hstp.v1.HSTPService/Ingest',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.IngestRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.IngestResponse.FromString,
                )
        self.Query = channel.unary_unary(
                '/hstp.v1.HSTPService/Query',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.QueryRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.QueryResponse.FromString,
                )
        self.ParseQuery = channel.unary_unary(
                '/hstp.v1.HSTPService/ParseQuery',
                request_serializer=hstp_dot_v1_dot_hstp__pb2.ParseQueryRequest.SerializeToString,
                response_deserializer=hstp_dot_v1_dot_hstp__pb2.ParseQueryResponse.FromString,
                )


class HSTPServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAuthUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchUpsert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchArchive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchRestore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchNearest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchListen(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchLinks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ingest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ParseQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HSTPServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAuthUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuthUrl,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.GetAuthUrlRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.GetAuthUrlResponse.SerializeToString,
            ),
            'BatchRead': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchRead,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchReadRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.BatchReadResponse.SerializeToString,
            ),
            'BatchUpsert': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchUpsert,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchUpsertRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.BatchUpsertResponse.SerializeToString,
            ),
            'BatchArchive': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchArchive,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchArchiveRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.BatchArchiveResponse.SerializeToString,
            ),
            'BatchRestore': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchRestore,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchRestoreRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.BatchRestoreResponse.SerializeToString,
            ),
            'BatchNearest': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchNearest,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchNearestRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.BatchNearestResponse.SerializeToString,
            ),
            'BatchListen': grpc.stream_stream_rpc_method_handler(
                    servicer.BatchListen,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchListenRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.BatchListenResponse.SerializeToString,
            ),
            'BatchLinks': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchLinks,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.BatchLinksRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.BatchLinksResponse.SerializeToString,
            ),
            'Ingest': grpc.unary_unary_rpc_method_handler(
                    servicer.Ingest,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.IngestRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.IngestResponse.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.QueryRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.QueryResponse.SerializeToString,
            ),
            'ParseQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ParseQuery,
                    request_deserializer=hstp_dot_v1_dot_hstp__pb2.ParseQueryRequest.FromString,
                    response_serializer=hstp_dot_v1_dot_hstp__pb2.ParseQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hstp.v1.HSTPService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HSTPService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAuthUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hstp.v1.HSTPService/GetAuthUrl',
            hstp_dot_v1_dot_hstp__pb2.GetAuthUrlRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.GetAuthUrlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hstp.v1.HSTPService/BatchRead',
            hstp_dot_v1_dot_hstp__pb2.BatchReadRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.BatchReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchUpsert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hstp.v1.HSTPService/BatchUpsert',
            hstp_dot_v1_dot_hstp__pb2.BatchUpsertRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.BatchUpsertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchArchive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hstp.v1.HSTPService/BatchArchive',
            hstp_dot_v1_dot_hstp__pb2.BatchArchiveRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.BatchArchiveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchRestore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hstp.v1.HSTPService/BatchRestore',
            hstp_dot_v1_dot_hstp__pb2.BatchRestoreRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.BatchRestoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchNearest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hstp.v1.HSTPService/BatchNearest',
            hstp_dot_v1_dot_hstp__pb2.BatchNearestRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.BatchNearestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchListen(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/hstp.v1.HSTPService/BatchListen',
            hstp_dot_v1_dot_hstp__pb2.BatchListenRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.BatchListenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchLinks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hstp.v1.HSTPService/BatchLinks',
            hstp_dot_v1_dot_hstp__pb2.BatchLinksRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.BatchLinksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ingest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hstp.v1.HSTPService/Ingest',
            hstp_dot_v1_dot_hstp__pb2.IngestRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.IngestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hstp.v1.HSTPService/Query',
            hstp_dot_v1_dot_hstp__pb2.QueryRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ParseQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hstp.v1.HSTPService/ParseQuery',
            hstp_dot_v1_dot_hstp__pb2.ParseQueryRequest.SerializeToString,
            hstp_dot_v1_dot_hstp__pb2.ParseQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
