[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = [
  "/\\..*",
  "/docs",
  "/examples",
  "/docker",
  "/startup.py",
]

[tool.hatch.build.targets.wheel]
packages = ["src/baler_operator"]

[project]
# The name of the package, as it is to be installed.
name = "baler-operator"
# Version is read from the VERSION file using the [tool.hatch.version] section.
dynamic = ["version"]
# The description of the package, as it is to be installed.
description = "A Kubernetes operator for managing NLP framework deplotments."
# The authors of the package.
authors = [

    {name = "Greg Nagy", email = "greg@gatecastle.com"},
]
# The maintainers of the package.
maintainers = [
]
# The license of the package.
license = {file = "LICENSE.md"}
# Required Python version.
requires-python = ">=3.8"
# Readme file.
readme = "README.md"
# Keywords for the package.
keywords = ["nlp", "haystack", "kubernetes", "operator", "baler", "baler-operator"]
# The classifiers for the package.
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
# Runtime dependencies for the package.
dependencies = [
    "kopf==1.37.1",
    "kubernetes==29.0.0",
    "Jinja2==3.1.3",
    "jsonschema==4.21.1",
]

[project.optional-dependencies]
dev = [
    "sphinx==7.2.6",
    "myst-parser",
    "sphinx-rtd-theme",
]

# The version of the package.
[tool.hatch.version]
path = "VERSION"

# For the following work I reused deepset/hayhooks pyproject.toml file
# as inspiration and guidance.
# Source: https://github.com/deepset-ai/hayhooks/blob/main/pyproject.toml

# Ruff configuration

[tool.ruff]
target-version = "py37"
line-length = 120

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore unused variables in function parameters
  "ARG001",
  # Ignore unused lambda argument variables
  "ARG005",
  # Ignore Error suffix for exceptions
  "N818",
  # Ignore 120+ line length
  "E501",
  # Allow magic constants
  "PLR2004",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["baler_operator"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "F405", "B017", "F403"]
"src/**/*/__init__.py" = ["F403"]
"startup.py" = ["F401"]
"docs/**/*" = ["PLR2004", "S101", "TID252", "F405", "B017", "F403", "A001"]

# Environments for the package.

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

# Environment: default
[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests/*}"
test-cov = "coverage run -m pytest {args:tests/*}"
cov-report = [
  "- coverage combine",
  "coverage report",
  "coverage xml",
]
cov = [
  "test-cov",
  "cov-report",
]

# Environment: lint
[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/baler_operator tests}"
style = [
  "ruff check {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff check --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

# Environment: docs
[tool.hatch.envs.docs]
dependencies = [
  "sphinx",
  "myst-parser",
  "sphinx-rtd-theme",
]

[tool.hatch.envs.docs.scripts]
build = "make -C docs html"

