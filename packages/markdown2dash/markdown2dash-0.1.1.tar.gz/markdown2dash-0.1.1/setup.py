# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['markdown2dash', 'markdown2dash.src', 'markdown2dash.src.directives']

package_data = \
{'': ['*']}

install_requires = \
['dash-iconify>=0.1.2,<0.2.0',
 'dash-mantine-components>=0.14,<0.15',
 'dash>=2,<3',
 'gunicorn>=21.2.0,<22.0.0',
 'jsonpath>=0.82,<0.83',
 'mistune>=3.0.1,<4.0.0']

setup_kwargs = {
    'name': 'markdown2dash',
    'version': '0.1.1',
    'description': 'Render markdown into a dash layout using dash-mantine-components',
    'long_description': '## Markdown-2-Dash\n\n.. toc::\n    :min_level: 3\n\nMarkdown-2-Dash or M2D is a standalone package forked out of source code of [official documentation of dash-mantine-components](https://www.dash-mantine-components.com).\nSome form of M2D has always existed since the inception of the documentation, but I figured more people can make use of this to document their dash\napps or component libraries.\n\nHave a look [here](https://markdown2dash.onrender.com) to see how this README would look after parsing with M2D. The render also\nworks perfectly with dark mode without any extra code.\n\n.. admonition::Note\n    :icon: radix-icons:info-circled\n    :color: red\n\n    The theme switcher has been added only for this demo, its not available as part of markdown2dash.\n\n### Installation\n\n```bash\npip install markdown2dash\n```\n\n```bash\npoetry add markdown2dash\n```\n\n.. admonition::Note\n    :icon: radix-icons:info-circled\n    :color: red\n\n    Latest dmc is based on REACT 18. You need to set REACT_VERSION=18.2.0 before starting the app. \n\n### Quickstart\n\n#### Parsing M2D\'s README\n\nLet\'s start by parsing the readme of this repository with M2D.\n\n.. admonition::Note\n    :icon: radix-icons:bookmark-filled\n    :color: yellow\n\n    Make sure to include stylesheets for all extensions you are planning to use in your app.    \n\n```python\nimport dash_mantine_components as dmc\nfrom dash import Dash\n\nfrom markdown2dash import parse\n\nwith open("../README.md") as f:\n    md = f.read()\n\nlayout = parse(md)\n\nstylesheets = [\n    "https://unpkg.com/@mantine/dates@7/styles.css",\n    "https://unpkg.com/@mantine/code-highlight@7/styles.css",\n    "https://unpkg.com/@mantine/charts@7/styles.css",\n    "https://unpkg.com/@mantine/carousel@7/styles.css",\n    "https://unpkg.com/@mantine/notifications@7/styles.css",\n    "https://unpkg.com/@mantine/nprogress@7/styles.css",\n]\n\napp = Dash(__name__, external_stylesheets=stylesheets)\n\n\napp.layout = dmc.MantineProvider(\n    dmc.Container(layout, size="lg", p=20),\n    theme={\n        "primaryColor": "indigo",\n        "colorScheme": "light",\n        "fontFamily": "\'Inter\', sans-serif",\n        "components": {\n            "Table": {"defaultProps": {"striped": True, "withTableBorder": True, "highlightOnHover": True}},\n            "Alert": {"styles": {"title": {"fontWeight": 500}}},\n        },\n    },\n)\n\nif __name__ == "__main__":\n    app.run()\n```\n\nThere\'s no styling by default, so you\'ll have to provide your own css. You can do that in two ways:\n1. Use MantineProvider to style your page (as you can see above)\n2. Create CSS files. You can get started with the one provided in this repository: [styles.css]()\n\nEach component rendered by M2D will have a class name attached to it. \n\n#### Available tokens and class names\n\nM2D can render following types of tokens:\n\n| Token               | Class Name            |\n|---------------------|-----------------------|\n| Links               | .m2d-link             |\n| Paragraph           | .m2d-paragraph        |\n| Emphasis            | .m2d-emphasis         |\n| Strong              | .m2d-strong           |\n| Code Span           | .m2d-codespan         |\n| Heading             | .m2d-heading          |\n| Thematic Break      | .m2d-thematic-break   |\n| Block Code          | .m2d-block-code       |\n| Block Quote         | .m2d-block-quote      |\n| List Item           | .m2d-list-item        |\n| List                | .m2d-list             |\n| Strikethrough       | .m2d-strikethrough    |\n| Mark                | .m2d-mark             |\n| Table               | .m2d-table            |\n| Table Head          | .m2d-table-head       |\n| Table Body          | .m2d-table-body       |\n| Table Row           | .m2d-table-row        |\n| Table Cell          | .m2d-table-cell       |\n| Spoiler             | .m2d-block-spoiler    |\n| Admonition          | .m2d-block-admonition |\n| Divider             | .m2d-block-divider    |\n| Executable Block    | .m2d-block-exec       |\n| Image               | .m2d-block-image      |\n| Dash Component Docs | .m2d-block-kwargs     |\n| Source Code         | .m2d-block-source     |\n| Table of Contents   | .m2d-block-toc        |\n\n### Special Directives\n\nM2D includes some special directives enabling you to do a lot more than just rendering static markdown into a dash layout.\n\nThe directives are all extensible, and you can just overwrite the render method to suit your own needs. The default render method is provided in all directives out of the box.\n\n#### Executable Block\n\nYou can use the `exec` directive to embed the output of a python script as well as its source code. This directive expects that \nyou have stored the output layout in the variable called `component`.\n\n```markdown\n.. exec::example.navlink\n```\n\nHere\'s the output if you are viewing this in a dash app:\n\n.. exec::example.navlink\n\nYou can hide the source code using the `code` argument, and the border using `border`.\n\n```markdown\n.. exec::example.navlink\n    :code: false\n    :border: false\n```\n\n#### Source Code\n\nYou can use SourceCode directive to display code from a file in your project. The path of file is relative to current working directory.\n\nHere\'s the css used to style this page.\n\n```markdown\n.. source::example/assets/styles.css\n    :language: css\n```\n\n.. source::example/assets/styles.css\n    :language: css\n\n#### Admonition\n\nYou can use `admonition` directive to add dmc.Alert components in your page.\nAdmonition directive uses [DashIconify]() to render icons as well.\n\n```markdown\n.. admonition::Alert Title\n    :icon: radix-icons:github-logo\n    :variant: outline\n    \n    This is to show that now you can render alerts directly from the markdown.\n```\n\nHere\'s the output if you are viewing this in a dash app:\n\n.. admonition::Alert Title\n    :icon: radix-icons:github-logo\n    :variant: outline\n\n    This is to show that now you can render alerts directly from the markdown.\n\n#### Image\n\nRender images using dmc.Image like this:\n\n```markdown\n.. image::https://www.dash-mantine-components.com/assets/superman.jpeg\n    :w: 300px\n    :h: 300px\n```\n\nHere\'s the output if you are viewing this in a dash app:\n\n.. image::https://www.dash-mantine-components.com/assets/superman.jpeg\n    :w: 300px\n    :h: 300px\n\n#### Dash Component API Docs\n\nIt\'s very simple to add API docs of your component using M2D. You just have to specify the package and the component.\nLet\'s create one for DashIconify:\n\n```markdown\n.. kwargs::DashIconify\n    :library: dash_iconify\n```\n\nHere\'s the output if you are viewing this in a dash app:\n\n.. kwargs::DashIconify\n    :library: dash_iconify\n \n#### Table of Contents\n\nThis directive will parse all the headings and create a table of contents like this:\n\n```python\n\n# a placeholder for self and a list of [<level>, <title>, <id>]\n[\n    (4, \'Installation\', \'installation\'),\n    (4, \'Quickstart\', \'quickstart\'), \n    (5, \'Example App\', \'example-app\'),\n    (4, \'Special Directives\', \'special-directives\'),\n    (5, \'Dash Component API Docs\', \'dash-component-api-docs\'),\n    (5, \'Table of Contents\', \'table-of-contents\')\n]\n```\n\nThis will then be used to render the TOC using the render method. You can enable TOC like this:\n\n```markdown\n.. toc::\n    :min_level: 3\n```\n\n#### Divider\n\nA simple way to add dividers would be to just add `---` in your markdown file.\n\n```markdown\n---\n```\n\n---\n\nBut let\'s say you to add a label to the divider and also customize it. You can use the divider directive to do that.\n\n```markdown\n.. divider::Section Changed!\n    :labelPosition: left\n\n.. divider::Section Changed!\n\n.. divider::Section Changed!\n    :labelPosition: right\n```\n\n.. divider::Section Changed!\n    :labelPosition: left\n\n.. divider::Section Changed!\n\n.. divider::Section Changed!\n    :labelPosition: right\n\n### More Examples\n\n#### Tasks List\n\nYou can create tasks list like below and a checkbox list will be rendered automatically in your dash app.\n\n```markdown\n- [ ] Create README for library.\n- [x] Resolve GitHub issues [here](https://github.com/snehilvj/dash-mantine-components).\n```\n\n- [ ] Create README for library.\n- [x] Resolve GitHub issues [here](https://github.com/snehilvj/dash-mantine-components).\n\n#### Spoiler\n\nCreate spoiler content like this:\n\n```markdown\n>! In the final moments of Dune: Part Two...\n>! Why does Paul need to marry Princess Irulan...\n>! In the book, we learn that a dea...\n```\n\nAnd this is how it will look when rendered (wrapped by dmc.Spoiler):\n\n>! In the final moments of Dune: Part Two, Paul Atreides does two shocking things: he says he’ll marry Princess Irulan (Florence Pugh), and then, he sends his Fremen troops out into the universe to start a holy war against the great houses. This is the horrific future vision that Paul has been seeing since Dune: Part One. The Fremen and House Atreides prevail on Arrakis, but the cost is a massive war that will burn half the universe. Let\'s break down how this happens.\n>! Why does Paul need to marry Princess Irulan to take over the throne from Emperor Shaddam IV? Because he has control of the spice on Arrakis, couldn’t he just kill everyone and marry Chani, his true love? The answer lies in the book. When Paul sees Irulan in the final pages of the book, he thinks, “There’s my key,” and on the very last page of the book, he tells Chani, “We must obey the forms.” This means that he wants to gain power within the system.\n>! In the book, we learn that a deal has been made to “place a Bene Gesserit on the throne, and Irulan is the one they’ve groomed for it.” In the movie, before everything goes down in the end, Reverend Mother Gaius Helen Mohiam tells Irulan that “there’s one way your family can remain in power… are you prepared?”\n\n#### Nested Lists\n\nLet\'s try to render a mix of items in a nested list.\n\n```markdown\n1. Ingredients\n   - spaghetti\n   - marinara sauce\n   - salt\n2. Cooking\n   1. Bring water to boil, add a pinch of salt and spaghetti.\n   2. Cook until pasta is **tender**.\n3. Serve: Drain the pasta on a plate. Add heated sauce.\n4. No man is lonely eating spaghetti, it requires so much attention.\n```\n\n1. Ingredients\n   - spaghetti\n   - marinara sauce\n   - salt\n2. Cooking\n   1. Bring water to boil, add a pinch of salt and spaghetti.\n   2. Cook until pasta is **tender**.\n3. Serve: Drain the pasta on a plate. Add heated sauce.\n4. No man is lonely eating spaghetti, it requires so much attention.\n\n#### Charts\n\nYou can use the exec block to add charts in your app. The following block will render a BarChart as defined in example/chart.py\n\n```markdown\n.. exec::example.chart\n    :code: false\n    :border: true\n```\n\n.. exec::example.chart\n    :code: false\n    :border: false\n\n#### Blockquote\n\n> Life is like npm install – you never know what you are going to get.\n\n### Adding your own directives\n\nYou can create a new directive by extending the BaseDirective class and creating a new parser. Here\'s how you can add a\nnew directive that adds a scroll to top button in the bottom right of your app.\n\n.. source::example/scroll.py\n\nThe associated css class name will be: `m2d-block-scroll`.\n\nCreate a new parser using your new directive like below:\n\n```python\nfrom markdown2dash import create_parser, DEFAULT_DIRECTIVES\n\nparse = create_parser(DEFAULT_DIRECTIVES + [ScrollToTop()])\nlayout = parse(content)\n```\nAnd here\'s how you can use it in the markdown.\n\n```markdown\n.. scroll::\n```\n\n.. scroll::\n\n.. exec::example.theme\n    :code: false\n    :border: false\n',
    'author': 'Snehil Vijay',
    'author_email': 'snehilvj@outlook.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/snehilvj/markdown2dash',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7',
}


setup(**setup_kwargs)
